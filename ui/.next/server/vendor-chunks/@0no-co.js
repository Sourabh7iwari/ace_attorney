"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@0no-co";
exports.ids = ["vendor-chunks/@0no-co"];
exports.modules = {

/***/ "(ssr)/./node_modules/@0no-co/graphql.web/dist/graphql.web.mjs":
/*!***************************************************************!*\
  !*** ./node_modules/@0no-co/graphql.web/dist/graphql.web.mjs ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BREAK: () => (/* binding */ c),\n/* harmony export */   GraphQLError: () => (/* binding */ GraphQLError),\n/* harmony export */   Kind: () => (/* binding */ e1),\n/* harmony export */   OperationTypeNode: () => (/* binding */ r),\n/* harmony export */   Source: () => (/* binding */ Source),\n/* harmony export */   isSelectionNode: () => (/* binding */ isSelectionNode),\n/* harmony export */   parse: () => (/* binding */ parse),\n/* harmony export */   parseType: () => (/* binding */ parseType),\n/* harmony export */   parseValue: () => (/* binding */ parseValue),\n/* harmony export */   print: () => (/* binding */ print),\n/* harmony export */   printBlockString: () => (/* binding */ printBlockString),\n/* harmony export */   printString: () => (/* binding */ printString),\n/* harmony export */   valueFromASTUntyped: () => (/* binding */ valueFromASTUntyped),\n/* harmony export */   valueFromTypeNode: () => (/* binding */ valueFromTypeNode),\n/* harmony export */   visit: () => (/* binding */ visit)\n/* harmony export */ });\nvar e1 = {\n    NAME: \"Name\",\n    DOCUMENT: \"Document\",\n    OPERATION_DEFINITION: \"OperationDefinition\",\n    VARIABLE_DEFINITION: \"VariableDefinition\",\n    SELECTION_SET: \"SelectionSet\",\n    FIELD: \"Field\",\n    ARGUMENT: \"Argument\",\n    FRAGMENT_SPREAD: \"FragmentSpread\",\n    INLINE_FRAGMENT: \"InlineFragment\",\n    FRAGMENT_DEFINITION: \"FragmentDefinition\",\n    VARIABLE: \"Variable\",\n    INT: \"IntValue\",\n    FLOAT: \"FloatValue\",\n    STRING: \"StringValue\",\n    BOOLEAN: \"BooleanValue\",\n    NULL: \"NullValue\",\n    ENUM: \"EnumValue\",\n    LIST: \"ListValue\",\n    OBJECT: \"ObjectValue\",\n    OBJECT_FIELD: \"ObjectField\",\n    DIRECTIVE: \"Directive\",\n    NAMED_TYPE: \"NamedType\",\n    LIST_TYPE: \"ListType\",\n    NON_NULL_TYPE: \"NonNullType\"\n};\nvar r = {\n    QUERY: \"query\",\n    MUTATION: \"mutation\",\n    SUBSCRIPTION: \"subscription\"\n};\nclass GraphQLError extends Error {\n    constructor(e1, r, n, i, t, a, l){\n        super(e1);\n        this.name = \"GraphQLError\";\n        this.message = e1;\n        if (t) {\n            this.path = t;\n        }\n        if (r) {\n            this.nodes = Array.isArray(r) ? r : [\n                r\n            ];\n        }\n        if (n) {\n            this.source = n;\n        }\n        if (i) {\n            this.positions = i;\n        }\n        if (a) {\n            this.originalError = a;\n        }\n        var o = l;\n        if (!o && a) {\n            var u = a.extensions;\n            if (u && \"object\" == typeof u) {\n                o = u;\n            }\n        }\n        this.extensions = o || {};\n    }\n    toJSON() {\n        return {\n            ...this,\n            message: this.message\n        };\n    }\n    toString() {\n        return this.message;\n    }\n    get [Symbol.toStringTag]() {\n        return \"GraphQLError\";\n    }\n}\nvar n;\nvar i;\nfunction error(e1) {\n    return new GraphQLError(`Syntax Error: Unexpected token at ${i} in ${e1}`);\n}\nfunction advance(e1) {\n    e1.lastIndex = i;\n    if (e1.test(n)) {\n        return n.slice(i, i = e1.lastIndex);\n    }\n}\nvar t = / +(?=[^\\s])/y;\nfunction blockString(e1) {\n    var r = e1.split(\"\\n\");\n    var n = \"\";\n    var i = 0;\n    var a = 0;\n    var l = r.length - 1;\n    for(var o = 0; o < r.length; o++){\n        t.lastIndex = 0;\n        if (t.test(r[o])) {\n            if (o && (!i || t.lastIndex < i)) {\n                i = t.lastIndex;\n            }\n            a = a || o;\n            l = o;\n        }\n    }\n    for(var u = a; u <= l; u++){\n        if (u !== a) {\n            n += \"\\n\";\n        }\n        n += r[u].slice(i).replace(/\\\\\"\"\"/g, '\"\"\"');\n    }\n    return n;\n}\nfunction ignored() {\n    for(var e1 = 0 | n.charCodeAt(i++); 9 === e1 || 10 === e1 || 13 === e1 || 32 === e1 || 35 === e1 || 44 === e1 || 65279 === e1; e1 = 0 | n.charCodeAt(i++)){\n        if (35 === e1) {\n            while(10 !== (e1 = n.charCodeAt(i++)) && 13 !== e1){}\n        }\n    }\n    i--;\n}\nvar a = /[_A-Za-z]\\w*/y;\nvar l = new RegExp(\"(?:(null|true|false)|\\\\$(\" + a.source + ')|(-?\\\\d+)((?:\\\\.\\\\d+)?[eE][+-]?\\\\d+|\\\\.\\\\d+)?|(\"\"\"(?:\"\"\"|(?:[\\\\s\\\\S]*?[^\\\\\\\\])\"\"\"))|(\"(?:\"|[^\\\\r\\\\n]*?[^\\\\\\\\]\"))|(' + a.source + \"))\", \"y\");\nvar o = function(e1) {\n    e1[e1.Const = 1] = \"Const\";\n    e1[e1.Var = 2] = \"Var\";\n    e1[e1.Int = 3] = \"Int\";\n    e1[e1.Float = 4] = \"Float\";\n    e1[e1.BlockString = 5] = \"BlockString\";\n    e1[e1.String = 6] = \"String\";\n    e1[e1.Enum = 7] = \"Enum\";\n    return e1;\n}(o || {});\nvar u = /\\\\/;\nfunction value(e1) {\n    var r;\n    var t;\n    l.lastIndex = i;\n    if (91 === n.charCodeAt(i)) {\n        i++;\n        ignored();\n        var d = [];\n        while(93 !== n.charCodeAt(i)){\n            d.push(value(e1));\n        }\n        i++;\n        ignored();\n        return {\n            kind: \"ListValue\",\n            values: d\n        };\n    } else if (123 === n.charCodeAt(i)) {\n        i++;\n        ignored();\n        var s = [];\n        while(125 !== n.charCodeAt(i)){\n            if (null == (r = advance(a))) {\n                throw error(\"ObjectField\");\n            }\n            ignored();\n            if (58 !== n.charCodeAt(i++)) {\n                throw error(\"ObjectField\");\n            }\n            ignored();\n            s.push({\n                kind: \"ObjectField\",\n                name: {\n                    kind: \"Name\",\n                    value: r\n                },\n                value: value(e1)\n            });\n        }\n        i++;\n        ignored();\n        return {\n            kind: \"ObjectValue\",\n            fields: s\n        };\n    } else if (null != (t = l.exec(n))) {\n        i = l.lastIndex;\n        ignored();\n        if (null != (r = t[o.Const])) {\n            return \"null\" === r ? {\n                kind: \"NullValue\"\n            } : {\n                kind: \"BooleanValue\",\n                value: \"true\" === r\n            };\n        } else if (null != (r = t[o.Var])) {\n            if (e1) {\n                throw error(\"Variable\");\n            } else {\n                return {\n                    kind: \"Variable\",\n                    name: {\n                        kind: \"Name\",\n                        value: r\n                    }\n                };\n            }\n        } else if (null != (r = t[o.Int])) {\n            var v;\n            if (null != (v = t[o.Float])) {\n                return {\n                    kind: \"FloatValue\",\n                    value: r + v\n                };\n            } else {\n                return {\n                    kind: \"IntValue\",\n                    value: r\n                };\n            }\n        } else if (null != (r = t[o.BlockString])) {\n            return {\n                kind: \"StringValue\",\n                value: blockString(r.slice(3, -3)),\n                block: !0\n            };\n        } else if (null != (r = t[o.String])) {\n            return {\n                kind: \"StringValue\",\n                value: u.test(r) ? JSON.parse(r) : r.slice(1, -1),\n                block: !1\n            };\n        } else if (null != (r = t[o.Enum])) {\n            return {\n                kind: \"EnumValue\",\n                value: r\n            };\n        }\n    }\n    throw error(\"Value\");\n}\nfunction arguments_(e1) {\n    if (40 === n.charCodeAt(i)) {\n        var r = [];\n        i++;\n        ignored();\n        var t;\n        do {\n            if (null == (t = advance(a))) {\n                throw error(\"Argument\");\n            }\n            ignored();\n            if (58 !== n.charCodeAt(i++)) {\n                throw error(\"Argument\");\n            }\n            ignored();\n            r.push({\n                kind: \"Argument\",\n                name: {\n                    kind: \"Name\",\n                    value: t\n                },\n                value: value(e1)\n            });\n        }while (41 !== n.charCodeAt(i));\n        i++;\n        ignored();\n        return r;\n    }\n}\nfunction directives(e1) {\n    if (64 === n.charCodeAt(i)) {\n        var r = [];\n        var t;\n        do {\n            i++;\n            if (null == (t = advance(a))) {\n                throw error(\"Directive\");\n            }\n            ignored();\n            r.push({\n                kind: \"Directive\",\n                name: {\n                    kind: \"Name\",\n                    value: t\n                },\n                arguments: arguments_(e1)\n            });\n        }while (64 === n.charCodeAt(i));\n        return r;\n    }\n}\nfunction type() {\n    var e1;\n    var r = 0;\n    while(91 === n.charCodeAt(i)){\n        r++;\n        i++;\n        ignored();\n    }\n    if (null == (e1 = advance(a))) {\n        throw error(\"NamedType\");\n    }\n    ignored();\n    var t = {\n        kind: \"NamedType\",\n        name: {\n            kind: \"Name\",\n            value: e1\n        }\n    };\n    do {\n        if (33 === n.charCodeAt(i)) {\n            i++;\n            ignored();\n            t = {\n                kind: \"NonNullType\",\n                type: t\n            };\n        }\n        if (r) {\n            if (93 !== n.charCodeAt(i++)) {\n                throw error(\"NamedType\");\n            }\n            ignored();\n            t = {\n                kind: \"ListType\",\n                type: t\n            };\n        }\n    }while (r--);\n    return t;\n}\nvar d = new RegExp(\"(?:(\\\\.{3})|(\" + a.source + \"))\", \"y\");\nvar s = function(e1) {\n    e1[e1.Spread = 1] = \"Spread\";\n    e1[e1.Name = 2] = \"Name\";\n    return e1;\n}(s || {});\nfunction selectionSet() {\n    var e1 = [];\n    var r;\n    var t;\n    do {\n        d.lastIndex = i;\n        if (null != (t = d.exec(n))) {\n            i = d.lastIndex;\n            if (null != t[s.Spread]) {\n                ignored();\n                var l = advance(a);\n                if (null != l && \"on\" !== l) {\n                    ignored();\n                    e1.push({\n                        kind: \"FragmentSpread\",\n                        name: {\n                            kind: \"Name\",\n                            value: l\n                        },\n                        directives: directives(!1)\n                    });\n                } else {\n                    ignored();\n                    if (\"on\" === l) {\n                        if (null == (l = advance(a))) {\n                            throw error(\"NamedType\");\n                        }\n                        ignored();\n                    }\n                    var o = directives(!1);\n                    if (123 !== n.charCodeAt(i++)) {\n                        throw error(\"InlineFragment\");\n                    }\n                    ignored();\n                    e1.push({\n                        kind: \"InlineFragment\",\n                        typeCondition: l ? {\n                            kind: \"NamedType\",\n                            name: {\n                                kind: \"Name\",\n                                value: l\n                            }\n                        } : void 0,\n                        directives: o,\n                        selectionSet: selectionSet()\n                    });\n                }\n            } else if (null != (r = t[s.Name])) {\n                var u = void 0;\n                ignored();\n                if (58 === n.charCodeAt(i)) {\n                    i++;\n                    ignored();\n                    u = r;\n                    if (null == (r = advance(a))) {\n                        throw error(\"Field\");\n                    }\n                    ignored();\n                }\n                var v = arguments_(!1);\n                ignored();\n                var c = directives(!1);\n                var f = void 0;\n                if (123 === n.charCodeAt(i)) {\n                    i++;\n                    ignored();\n                    f = selectionSet();\n                }\n                e1.push({\n                    kind: \"Field\",\n                    alias: u ? {\n                        kind: \"Name\",\n                        value: u\n                    } : void 0,\n                    name: {\n                        kind: \"Name\",\n                        value: r\n                    },\n                    arguments: v,\n                    directives: c,\n                    selectionSet: f\n                });\n            }\n        } else {\n            throw error(\"SelectionSet\");\n        }\n    }while (125 !== n.charCodeAt(i));\n    i++;\n    ignored();\n    return {\n        kind: \"SelectionSet\",\n        selections: e1\n    };\n}\nfunction fragmentDefinition() {\n    var e1;\n    var r;\n    if (null == (e1 = advance(a))) {\n        throw error(\"FragmentDefinition\");\n    }\n    ignored();\n    if (\"on\" !== advance(a)) {\n        throw error(\"FragmentDefinition\");\n    }\n    ignored();\n    if (null == (r = advance(a))) {\n        throw error(\"FragmentDefinition\");\n    }\n    ignored();\n    var t = directives(!1);\n    if (123 !== n.charCodeAt(i++)) {\n        throw error(\"FragmentDefinition\");\n    }\n    ignored();\n    return {\n        kind: \"FragmentDefinition\",\n        name: {\n            kind: \"Name\",\n            value: e1\n        },\n        typeCondition: {\n            kind: \"NamedType\",\n            name: {\n                kind: \"Name\",\n                value: r\n            }\n        },\n        directives: t,\n        selectionSet: selectionSet()\n    };\n}\nvar v = /(?:query|mutation|subscription|fragment)/y;\nfunction operationDefinition(e1) {\n    var r;\n    var t;\n    var l;\n    if (e1) {\n        ignored();\n        r = advance(a);\n        t = function variableDefinitions() {\n            ignored();\n            if (40 === n.charCodeAt(i)) {\n                var e1 = [];\n                i++;\n                ignored();\n                var r;\n                do {\n                    if (36 !== n.charCodeAt(i++)) {\n                        throw error(\"Variable\");\n                    }\n                    if (null == (r = advance(a))) {\n                        throw error(\"Variable\");\n                    }\n                    ignored();\n                    if (58 !== n.charCodeAt(i++)) {\n                        throw error(\"VariableDefinition\");\n                    }\n                    ignored();\n                    var t = type();\n                    var l = void 0;\n                    if (61 === n.charCodeAt(i)) {\n                        i++;\n                        ignored();\n                        l = value(!0);\n                    }\n                    ignored();\n                    e1.push({\n                        kind: \"VariableDefinition\",\n                        variable: {\n                            kind: \"Variable\",\n                            name: {\n                                kind: \"Name\",\n                                value: r\n                            }\n                        },\n                        type: t,\n                        defaultValue: l,\n                        directives: directives(!0)\n                    });\n                }while (41 !== n.charCodeAt(i));\n                i++;\n                ignored();\n                return e1;\n            }\n        }();\n        l = directives(!1);\n    }\n    if (123 === n.charCodeAt(i)) {\n        i++;\n        ignored();\n        return {\n            kind: \"OperationDefinition\",\n            operation: e1 || \"query\",\n            name: r ? {\n                kind: \"Name\",\n                value: r\n            } : void 0,\n            variableDefinitions: t,\n            directives: l,\n            selectionSet: selectionSet()\n        };\n    }\n}\nfunction parse(e1, r) {\n    i = 0;\n    return function document(e1, r) {\n        var n;\n        var t;\n        ignored();\n        var a = [];\n        do {\n            if (\"fragment\" === (n = advance(v))) {\n                ignored();\n                a.push(fragmentDefinition());\n            } else if (null != (t = operationDefinition(n))) {\n                a.push(t);\n            } else {\n                throw error(\"Document\");\n            }\n        }while (i < e1.length);\n        if (!r) {\n            var l;\n            return {\n                kind: \"Document\",\n                definitions: a,\n                set loc (e){\n                    l = e;\n                },\n                get loc () {\n                    if (!l) {\n                        l = {\n                            start: 0,\n                            end: e1.length,\n                            startToken: void 0,\n                            endToken: void 0,\n                            source: {\n                                body: e1,\n                                name: \"graphql.web\",\n                                locationOffset: {\n                                    line: 1,\n                                    column: 1\n                                }\n                            }\n                        };\n                    }\n                    return l;\n                }\n            };\n        }\n        return {\n            kind: \"Document\",\n            definitions: a\n        };\n    }(n = \"string\" == typeof e1.body ? e1.body : e1, r && r.noLocation);\n}\nfunction parseValue(e1, r) {\n    n = \"string\" == typeof e1.body ? e1.body : e1;\n    i = 0;\n    ignored();\n    return value(!1);\n}\nfunction parseType(e1, r) {\n    n = \"string\" == typeof e1.body ? e1.body : e1;\n    i = 0;\n    return type();\n}\nvar c = {};\nfunction visit(e1, r) {\n    var n = [];\n    var i = [];\n    try {\n        var t = function traverse(e1, t, a) {\n            var l = !1;\n            var o = r[e1.kind] && r[e1.kind].enter || r[e1.kind] || r.enter;\n            var u = o && o.call(r, e1, t, a, i, n);\n            if (!1 === u) {\n                return e1;\n            } else if (null === u) {\n                return null;\n            } else if (u === c) {\n                throw c;\n            } else if (u && \"string\" == typeof u.kind) {\n                l = u !== e1;\n                e1 = u;\n            }\n            if (a) {\n                n.push(a);\n            }\n            var d;\n            var s = {\n                ...e1\n            };\n            for(var v in e1){\n                i.push(v);\n                var f = e1[v];\n                if (Array.isArray(f)) {\n                    var g = [];\n                    for(var m = 0; m < f.length; m++){\n                        if (null != f[m] && \"string\" == typeof f[m].kind) {\n                            n.push(e1);\n                            i.push(m);\n                            d = traverse(f[m], m, f);\n                            i.pop();\n                            n.pop();\n                            if (null == d) {\n                                l = !0;\n                            } else {\n                                l = l || d !== f[m];\n                                g.push(d);\n                            }\n                        }\n                    }\n                    f = g;\n                } else if (null != f && \"string\" == typeof f.kind) {\n                    if (void 0 !== (d = traverse(f, v, e1))) {\n                        l = l || f !== d;\n                        f = d;\n                    }\n                }\n                i.pop();\n                if (l) {\n                    s[v] = f;\n                }\n            }\n            if (a) {\n                n.pop();\n            }\n            var p = r[e1.kind] && r[e1.kind].leave || r.leave;\n            var h = p && p.call(r, e1, t, a, i, n);\n            if (h === c) {\n                throw c;\n            } else if (void 0 !== h) {\n                return h;\n            } else if (void 0 !== u) {\n                return l ? s : u;\n            } else {\n                return l ? s : e1;\n            }\n        }(e1);\n        return void 0 !== t && !1 !== t ? t : e1;\n    } catch (r) {\n        if (r !== c) {\n            throw r;\n        }\n        return e1;\n    }\n}\nfunction mapJoin(e1, r, n) {\n    var i = \"\";\n    for(var t = 0; t < e1.length; t++){\n        if (t) {\n            i += r;\n        }\n        i += n(e1[t]);\n    }\n    return i;\n}\nfunction printString(e1) {\n    return JSON.stringify(e1);\n}\nfunction printBlockString(e1) {\n    return '\"\"\"\\n' + e1.replace(/\"\"\"/g, '\\\\\"\"\"') + '\\n\"\"\"';\n}\nvar f = \"\\n\";\nvar g = {\n    OperationDefinition (e1) {\n        var r = e1.operation;\n        if (e1.name) {\n            r += \" \" + e1.name.value;\n        }\n        if (e1.variableDefinitions && e1.variableDefinitions.length) {\n            if (!e1.name) {\n                r += \" \";\n            }\n            r += \"(\" + mapJoin(e1.variableDefinitions, \", \", g.VariableDefinition) + \")\";\n        }\n        if (e1.directives && e1.directives.length) {\n            r += \" \" + mapJoin(e1.directives, \" \", g.Directive);\n        }\n        return \"query\" !== r ? r + \" \" + g.SelectionSet(e1.selectionSet) : g.SelectionSet(e1.selectionSet);\n    },\n    VariableDefinition (e1) {\n        var r = g.Variable(e1.variable) + \": \" + _print(e1.type);\n        if (e1.defaultValue) {\n            r += \" = \" + _print(e1.defaultValue);\n        }\n        if (e1.directives && e1.directives.length) {\n            r += \" \" + mapJoin(e1.directives, \" \", g.Directive);\n        }\n        return r;\n    },\n    Field (e1) {\n        var r = e1.alias ? e1.alias.value + \": \" + e1.name.value : e1.name.value;\n        if (e1.arguments && e1.arguments.length) {\n            var n = mapJoin(e1.arguments, \", \", g.Argument);\n            if (r.length + n.length + 2 > 80) {\n                r += \"(\" + (f += \"  \") + mapJoin(e1.arguments, f, g.Argument) + (f = f.slice(0, -2)) + \")\";\n            } else {\n                r += \"(\" + n + \")\";\n            }\n        }\n        if (e1.directives && e1.directives.length) {\n            r += \" \" + mapJoin(e1.directives, \" \", g.Directive);\n        }\n        if (e1.selectionSet && e1.selectionSet.selections.length) {\n            r += \" \" + g.SelectionSet(e1.selectionSet);\n        }\n        return r;\n    },\n    StringValue (e1) {\n        if (e1.block) {\n            return printBlockString(e1.value).replace(/\\n/g, f);\n        } else {\n            return printString(e1.value);\n        }\n    },\n    BooleanValue: (e1)=>\"\" + e1.value,\n    NullValue: (e1)=>\"null\",\n    IntValue: (e1)=>e1.value,\n    FloatValue: (e1)=>e1.value,\n    EnumValue: (e1)=>e1.value,\n    Name: (e1)=>e1.value,\n    Variable: (e1)=>\"$\" + e1.name.value,\n    ListValue: (e1)=>\"[\" + mapJoin(e1.values, \", \", _print) + \"]\",\n    ObjectValue: (e1)=>\"{\" + mapJoin(e1.fields, \", \", g.ObjectField) + \"}\",\n    ObjectField: (e1)=>e1.name.value + \": \" + _print(e1.value),\n    Document (e1) {\n        if (!e1.definitions || !e1.definitions.length) {\n            return \"\";\n        }\n        return mapJoin(e1.definitions, \"\\n\\n\", _print);\n    },\n    SelectionSet: (e1)=>\"{\" + (f += \"  \") + mapJoin(e1.selections, f, _print) + (f = f.slice(0, -2)) + \"}\",\n    Argument: (e1)=>e1.name.value + \": \" + _print(e1.value),\n    FragmentSpread (e1) {\n        var r = \"...\" + e1.name.value;\n        if (e1.directives && e1.directives.length) {\n            r += \" \" + mapJoin(e1.directives, \" \", g.Directive);\n        }\n        return r;\n    },\n    InlineFragment (e1) {\n        var r = \"...\";\n        if (e1.typeCondition) {\n            r += \" on \" + e1.typeCondition.name.value;\n        }\n        if (e1.directives && e1.directives.length) {\n            r += \" \" + mapJoin(e1.directives, \" \", g.Directive);\n        }\n        return r += \" \" + g.SelectionSet(e1.selectionSet);\n    },\n    FragmentDefinition (e1) {\n        var r = \"fragment \" + e1.name.value;\n        r += \" on \" + e1.typeCondition.name.value;\n        if (e1.directives && e1.directives.length) {\n            r += \" \" + mapJoin(e1.directives, \" \", g.Directive);\n        }\n        return r + \" \" + g.SelectionSet(e1.selectionSet);\n    },\n    Directive (e1) {\n        var r = \"@\" + e1.name.value;\n        if (e1.arguments && e1.arguments.length) {\n            r += \"(\" + mapJoin(e1.arguments, \", \", g.Argument) + \")\";\n        }\n        return r;\n    },\n    NamedType: (e1)=>e1.name.value,\n    ListType: (e1)=>\"[\" + _print(e1.type) + \"]\",\n    NonNullType: (e1)=>_print(e1.type) + \"!\"\n};\nvar _print = (e1)=>g[e1.kind](e1);\nfunction print(e1) {\n    f = \"\\n\";\n    return g[e1.kind] ? g[e1.kind](e1) : \"\";\n}\nfunction valueFromASTUntyped(e1, r) {\n    switch(e1.kind){\n        case \"NullValue\":\n            return null;\n        case \"IntValue\":\n            return parseInt(e1.value, 10);\n        case \"FloatValue\":\n            return parseFloat(e1.value);\n        case \"StringValue\":\n        case \"EnumValue\":\n        case \"BooleanValue\":\n            return e1.value;\n        case \"ListValue\":\n            var n = [];\n            for(var i = 0, t = e1.values.length; i < t; i++){\n                n.push(valueFromASTUntyped(e1.values[i], r));\n            }\n            return n;\n        case \"ObjectValue\":\n            var a = Object.create(null);\n            for(var l = 0, o = e1.fields.length; l < o; l++){\n                var u = e1.fields[l];\n                a[u.name.value] = valueFromASTUntyped(u.value, r);\n            }\n            return a;\n        case \"Variable\":\n            return r && r[e1.name.value];\n    }\n}\nfunction valueFromTypeNode(e1, r, n) {\n    if (\"Variable\" === e1.kind) {\n        return n ? valueFromTypeNode(n[e1.name.value], r, n) : void 0;\n    } else if (\"NonNullType\" === r.kind) {\n        return \"NullValue\" !== e1.kind ? valueFromTypeNode(e1, r, n) : void 0;\n    } else if (\"NullValue\" === e1.kind) {\n        return null;\n    } else if (\"ListType\" === r.kind) {\n        if (\"ListValue\" === e1.kind) {\n            var i = [];\n            for(var t = 0, a = e1.values.length; t < a; t++){\n                var l = valueFromTypeNode(e1.values[t], r.type, n);\n                if (void 0 === l) {\n                    return;\n                } else {\n                    i.push(l);\n                }\n            }\n            return i;\n        }\n    } else if (\"NamedType\" === r.kind) {\n        switch(r.name.value){\n            case \"Int\":\n            case \"Float\":\n            case \"String\":\n            case \"Bool\":\n                return r.name.value + \"Value\" === e1.kind ? valueFromASTUntyped(e1, n) : void 0;\n            default:\n                return valueFromASTUntyped(e1, n);\n        }\n    }\n}\nfunction isSelectionNode(e1) {\n    return \"Field\" === e1.kind || \"FragmentSpread\" === e1.kind || \"InlineFragment\" === e1.kind;\n}\nfunction Source(e1, r, n) {\n    return {\n        body: e1,\n        name: r,\n        locationOffset: n || {\n            line: 1,\n            column: 1\n        }\n    };\n}\n //# sourceMappingURL=graphql.web.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQDBuby1jby9ncmFwaHFsLndlYi9kaXN0L2dyYXBocWwud2ViLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxJQUFJQSxLQUFJO0lBQ05DLE1BQU07SUFDTkMsVUFBVTtJQUNWQyxzQkFBc0I7SUFDdEJDLHFCQUFxQjtJQUNyQkMsZUFBZTtJQUNmQyxPQUFPO0lBQ1BDLFVBQVU7SUFDVkMsaUJBQWlCO0lBQ2pCQyxpQkFBaUI7SUFDakJDLHFCQUFxQjtJQUNyQkMsVUFBVTtJQUNWQyxLQUFLO0lBQ0xDLE9BQU87SUFDUEMsUUFBUTtJQUNSQyxTQUFTO0lBQ1RDLE1BQU07SUFDTkMsTUFBTTtJQUNOQyxNQUFNO0lBQ05DLFFBQVE7SUFDUkMsY0FBYztJQUNkQyxXQUFXO0lBQ1hDLFlBQVk7SUFDWkMsV0FBVztJQUNYQyxlQUFlO0FBQ2pCO0FBRUEsSUFBSUMsSUFBSTtJQUNOQyxPQUFPO0lBQ1BDLFVBQVU7SUFDVkMsY0FBYztBQUNoQjtBQUVBLE1BQU1DLHFCQUFxQkM7SUFDekJDLFlBQVkvQixFQUFDLEVBQUV5QixDQUFDLEVBQUVPLENBQUMsRUFBRUMsQ0FBQyxFQUFFQyxDQUFDLEVBQUVDLENBQUMsRUFBRUMsQ0FBQyxDQUFFO1FBQy9CLEtBQUssQ0FBQ3BDO1FBQ04sSUFBSSxDQUFDcUMsSUFBSSxHQUFHO1FBQ1osSUFBSSxDQUFDQyxPQUFPLEdBQUd0QztRQUNmLElBQUlrQyxHQUFHO1lBQ0wsSUFBSSxDQUFDSyxJQUFJLEdBQUdMO1FBQ2Q7UUFDQSxJQUFJVCxHQUFHO1lBQ0wsSUFBSSxDQUFDZSxLQUFLLEdBQUdDLE1BQU1DLE9BQU8sQ0FBQ2pCLEtBQUtBLElBQUk7Z0JBQUVBO2FBQUc7UUFDM0M7UUFDQSxJQUFJTyxHQUFHO1lBQ0wsSUFBSSxDQUFDVyxNQUFNLEdBQUdYO1FBQ2hCO1FBQ0EsSUFBSUMsR0FBRztZQUNMLElBQUksQ0FBQ1csU0FBUyxHQUFHWDtRQUNuQjtRQUNBLElBQUlF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QUFPO29CQUNMSCxFQUFFeUMsSUFBSSxDQUFDdEM7Z0JBQ1Q7WUFDRjtZQUNBLE9BQU9IO1FBQ1Q7SUFDRixPQUFPLElBQUksZ0JBQWdCUixFQUFFa0QsSUFBSSxFQUFFO1FBQ2pDLE9BQVFsRCxFQUFFWSxJQUFJLENBQUNtQyxLQUFLO1lBQ25CLEtBQUs7WUFDTCxLQUFLO1lBQ0wsS0FBSztZQUNMLEtBQUs7Z0JBQ0osT0FBTy9DLEVBQUVZLElBQUksQ0FBQ21DLEtBQUssR0FBRyxZQUFZeEUsR0FBRTJFLElBQUksR0FBR2dGLG9CQUFvQjNKLElBQUdnQyxLQUFLLEtBQUs7WUFFN0U7Z0JBQ0MsT0FBTzJILG9CQUFvQjNKLElBQUdnQztRQUNoQztJQUNGO0FBQ0Y7QUFFQSxTQUFTaUksZ0JBQWdCakssRUFBQztJQUN4QixPQUFPLFlBQVlBLEdBQUUyRSxJQUFJLElBQUkscUJBQXFCM0UsR0FBRTJFLElBQUksSUFBSSxxQkFBcUIzRSxHQUFFMkUsSUFBSTtBQUN6RjtBQUVBLFNBQVN1RixPQUFPbEssRUFBQyxFQUFFeUIsQ0FBQyxFQUFFTyxDQUFDO0lBQ3JCLE9BQU87UUFDTDZFLE1BQU03RztRQUNOcUMsTUFBTVo7UUFDTnFGLGdCQUFnQjlFLEtBQUs7WUFDbkIrRSxNQUFNO1lBQ05DLFFBQVE7UUFDVjtJQUNGO0FBQ0Y7QUFFbU4sQ0FDbk4sd0NBQXdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWNlLWF0dG9ybmV5LXVpLy4vbm9kZV9tb2R1bGVzL0Awbm8tY28vZ3JhcGhxbC53ZWIvZGlzdC9ncmFwaHFsLndlYi5tanM/YzYxOCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZSA9IHtcbiAgTkFNRTogXCJOYW1lXCIsXG4gIERPQ1VNRU5UOiBcIkRvY3VtZW50XCIsXG4gIE9QRVJBVElPTl9ERUZJTklUSU9OOiBcIk9wZXJhdGlvbkRlZmluaXRpb25cIixcbiAgVkFSSUFCTEVfREVGSU5JVElPTjogXCJWYXJpYWJsZURlZmluaXRpb25cIixcbiAgU0VMRUNUSU9OX1NFVDogXCJTZWxlY3Rpb25TZXRcIixcbiAgRklFTEQ6IFwiRmllbGRcIixcbiAgQVJHVU1FTlQ6IFwiQXJndW1lbnRcIixcbiAgRlJBR01FTlRfU1BSRUFEOiBcIkZyYWdtZW50U3ByZWFkXCIsXG4gIElOTElORV9GUkFHTUVOVDogXCJJbmxpbmVGcmFnbWVudFwiLFxuICBGUkFHTUVOVF9ERUZJTklUSU9OOiBcIkZyYWdtZW50RGVmaW5pdGlvblwiLFxuICBWQVJJQUJMRTogXCJWYXJpYWJsZVwiLFxuICBJTlQ6IFwiSW50VmFsdWVcIixcbiAgRkxPQVQ6IFwiRmxvYXRWYWx1ZVwiLFxuICBTVFJJTkc6IFwiU3RyaW5nVmFsdWVcIixcbiAgQk9PTEVBTjogXCJCb29sZWFuVmFsdWVcIixcbiAgTlVMTDogXCJOdWxsVmFsdWVcIixcbiAgRU5VTTogXCJFbnVtVmFsdWVcIixcbiAgTElTVDogXCJMaXN0VmFsdWVcIixcbiAgT0JKRUNUOiBcIk9iamVjdFZhbHVlXCIsXG4gIE9CSkVDVF9GSUVMRDogXCJPYmplY3RGaWVsZFwiLFxuICBESVJFQ1RJVkU6IFwiRGlyZWN0aXZlXCIsXG4gIE5BTUVEX1RZUEU6IFwiTmFtZWRUeXBlXCIsXG4gIExJU1RfVFlQRTogXCJMaXN0VHlwZVwiLFxuICBOT05fTlVMTF9UWVBFOiBcIk5vbk51bGxUeXBlXCJcbn07XG5cbnZhciByID0ge1xuICBRVUVSWTogXCJxdWVyeVwiLFxuICBNVVRBVElPTjogXCJtdXRhdGlvblwiLFxuICBTVUJTQ1JJUFRJT046IFwic3Vic2NyaXB0aW9uXCJcbn07XG5cbmNsYXNzIEdyYXBoUUxFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgY29uc3RydWN0b3IoZSwgciwgbiwgaSwgdCwgYSwgbCkge1xuICAgIHN1cGVyKGUpO1xuICAgIHRoaXMubmFtZSA9IFwiR3JhcGhRTEVycm9yXCI7XG4gICAgdGhpcy5tZXNzYWdlID0gZTtcbiAgICBpZiAodCkge1xuICAgICAgdGhpcy5wYXRoID0gdDtcbiAgICB9XG4gICAgaWYgKHIpIHtcbiAgICAgIHRoaXMubm9kZXMgPSBBcnJheS5pc0FycmF5KHIpID8gciA6IFsgciBdO1xuICAgIH1cbiAgICBpZiAobikge1xuICAgICAgdGhpcy5zb3VyY2UgPSBuO1xuICAgIH1cbiAgICBpZiAoaSkge1xuICAgICAgdGhpcy5wb3NpdGlvbnMgPSBpO1xuICAgIH1cbiAgICBpZiAoYSkge1xuICAgICAgdGhpcy5vcmlnaW5hbEVycm9yID0gYTtcbiAgICB9XG4gICAgdmFyIG8gPSBsO1xuICAgIGlmICghbyAmJiBhKSB7XG4gICAgICB2YXIgdSA9IGEuZXh0ZW5zaW9ucztcbiAgICAgIGlmICh1ICYmIFwib2JqZWN0XCIgPT0gdHlwZW9mIHUpIHtcbiAgICAgICAgbyA9IHU7XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMuZXh0ZW5zaW9ucyA9IG8gfHwge307XG4gIH1cbiAgdG9KU09OKCkge1xuICAgIHJldHVybiB7XG4gICAgICAuLi50aGlzLFxuICAgICAgbWVzc2FnZTogdGhpcy5tZXNzYWdlXG4gICAgfTtcbiAgfVxuICB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5tZXNzYWdlO1xuICB9XG4gIGdldCBbU3ltYm9sLnRvU3RyaW5nVGFnXSgpIHtcbiAgICByZXR1cm4gXCJHcmFwaFFMRXJyb3JcIjtcbiAgfVxufVxuXG52YXIgbjtcblxudmFyIGk7XG5cbmZ1bmN0aW9uIGVycm9yKGUpIHtcbiAgcmV0dXJuIG5ldyBHcmFwaFFMRXJyb3IoYFN5bnRheCBFcnJvcjogVW5leHBlY3RlZCB0b2tlbiBhdCAke2l9IGluICR7ZX1gKTtcbn1cblxuZnVuY3Rpb24gYWR2YW5jZShlKSB7XG4gIGUubGFzdEluZGV4ID0gaTtcbiAgaWYgKGUudGVzdChuKSkge1xuICAgIHJldHVybiBuLnNsaWNlKGksIGkgPSBlLmxhc3RJbmRleCk7XG4gIH1cbn1cblxudmFyIHQgPSAvICsoPz1bXlxcc10pL3k7XG5cbmZ1bmN0aW9uIGJsb2NrU3RyaW5nKGUpIHtcbiAgdmFyIHIgPSBlLnNwbGl0KFwiXFxuXCIpO1xuICB2YXIgbiA9IFwiXCI7XG4gIHZhciBpID0gMDtcbiAgdmFyIGEgPSAwO1xuICB2YXIgbCA9IHIubGVuZ3RoIC0gMTtcbiAgZm9yICh2YXIgbyA9IDA7IG8gPCByLmxlbmd0aDsgbysrKSB7XG4gICAgdC5sYXN0SW5kZXggPSAwO1xuICAgIGlmICh0LnRlc3QocltvXSkpIHtcbiAgICAgIGlmIChvICYmICghaSB8fCB0Lmxhc3RJbmRleCA8IGkpKSB7XG4gICAgICAgIGkgPSB0Lmxhc3RJbmRleDtcbiAgICAgIH1cbiAgICAgIGEgPSBhIHx8IG87XG4gICAgICBsID0gbztcbiAgICB9XG4gIH1cbiAgZm9yICh2YXIgdSA9IGE7IHUgPD0gbDsgdSsrKSB7XG4gICAgaWYgKHUgIT09IGEpIHtcbiAgICAgIG4gKz0gXCJcXG5cIjtcbiAgICB9XG4gICAgbiArPSByW3VdLnNsaWNlKGkpLnJlcGxhY2UoL1xcXFxcIlwiXCIvZywgJ1wiXCJcIicpO1xuICB9XG4gIHJldHVybiBuO1xufVxuXG5mdW5jdGlvbiBpZ25vcmVkKCkge1xuICBmb3IgKHZhciBlID0gMCB8IG4uY2hhckNvZGVBdChpKyspOyA5ID09PSBlIHx8IDEwID09PSBlIHx8IDEzID09PSBlIHx8IDMyID09PSBlIHx8IDM1ID09PSBlIHx8IDQ0ID09PSBlIHx8IDY1Mjc5ID09PSBlOyBlID0gMCB8IG4uY2hhckNvZGVBdChpKyspKSB7XG4gICAgaWYgKDM1ID09PSBlKSB7XG4gICAgICB3aGlsZSAoMTAgIT09IChlID0gbi5jaGFyQ29kZUF0KGkrKykpICYmIDEzICE9PSBlKSB7fVxuICAgIH1cbiAgfVxuICBpLS07XG59XG5cbnZhciBhID0gL1tfQS1aYS16XVxcdyoveTtcblxudmFyIGwgPSBuZXcgUmVnRXhwKFwiKD86KG51bGx8dHJ1ZXxmYWxzZSl8XFxcXCQoXCIgKyBhLnNvdXJjZSArICcpfCgtP1xcXFxkKykoKD86XFxcXC5cXFxcZCspP1tlRV1bKy1dP1xcXFxkK3xcXFxcLlxcXFxkKyk/fChcIlwiXCIoPzpcIlwiXCJ8KD86W1xcXFxzXFxcXFNdKj9bXlxcXFxcXFxcXSlcIlwiXCIpKXwoXCIoPzpcInxbXlxcXFxyXFxcXG5dKj9bXlxcXFxcXFxcXVwiKSl8KCcgKyBhLnNvdXJjZSArIFwiKSlcIiwgXCJ5XCIpO1xuXG52YXIgbyA9IGZ1bmN0aW9uKGUpIHtcbiAgZVtlLkNvbnN0ID0gMV0gPSBcIkNvbnN0XCI7XG4gIGVbZS5WYXIgPSAyXSA9IFwiVmFyXCI7XG4gIGVbZS5JbnQgPSAzXSA9IFwiSW50XCI7XG4gIGVbZS5GbG9hdCA9IDRdID0gXCJGbG9hdFwiO1xuICBlW2UuQmxvY2tTdHJpbmcgPSA1XSA9IFwiQmxvY2tTdHJpbmdcIjtcbiAgZVtlLlN0cmluZyA9IDZdID0gXCJTdHJpbmdcIjtcbiAgZVtlLkVudW0gPSA3XSA9IFwiRW51bVwiO1xuICByZXR1cm4gZTtcbn0obyB8fCB7fSk7XG5cbnZhciB1ID0gL1xcXFwvO1xuXG5mdW5jdGlvbiB2YWx1ZShlKSB7XG4gIHZhciByO1xuICB2YXIgdDtcbiAgbC5sYXN0SW5kZXggPSBpO1xuICBpZiAoOTEgPT09IG4uY2hhckNvZGVBdChpKSkge1xuICAgIGkrKztcbiAgICBpZ25vcmVkKCk7XG4gICAgdmFyIGQgPSBbXTtcbiAgICB3aGlsZSAoOTMgIT09IG4uY2hhckNvZGVBdChpKSkge1xuICAgICAgZC5wdXNoKHZhbHVlKGUpKTtcbiAgICB9XG4gICAgaSsrO1xuICAgIGlnbm9yZWQoKTtcbiAgICByZXR1cm4ge1xuICAgICAga2luZDogXCJMaXN0VmFsdWVcIixcbiAgICAgIHZhbHVlczogZFxuICAgIH07XG4gIH0gZWxzZSBpZiAoMTIzID09PSBuLmNoYXJDb2RlQXQoaSkpIHtcbiAgICBpKys7XG4gICAgaWdub3JlZCgpO1xuICAgIHZhciBzID0gW107XG4gICAgd2hpbGUgKDEyNSAhPT0gbi5jaGFyQ29kZUF0KGkpKSB7XG4gICAgICBpZiAobnVsbCA9PSAociA9IGFkdmFuY2UoYSkpKSB7XG4gICAgICAgIHRocm93IGVycm9yKFwiT2JqZWN0RmllbGRcIik7XG4gICAgICB9XG4gICAgICBpZ25vcmVkKCk7XG4gICAgICBpZiAoNTggIT09IG4uY2hhckNvZGVBdChpKyspKSB7XG4gICAgICAgIHRocm93IGVycm9yKFwiT2JqZWN0RmllbGRcIik7XG4gICAgICB9XG4gICAgICBpZ25vcmVkKCk7XG4gICAgICBzLnB1c2goe1xuICAgICAgICBraW5kOiBcIk9iamVjdEZpZWxkXCIsXG4gICAgICAgIG5hbWU6IHtcbiAgICAgICAgICBraW5kOiBcIk5hbWVcIixcbiAgICAgICAgICB2YWx1ZTogclxuICAgICAgICB9LFxuICAgICAgICB2YWx1ZTogdmFsdWUoZSlcbiAgICAgIH0pO1xuICAgIH1cbiAgICBpKys7XG4gICAgaWdub3JlZCgpO1xuICAgIHJldHVybiB7XG4gICAgICBraW5kOiBcIk9iamVjdFZhbHVlXCIsXG4gICAgICBmaWVsZHM6IHNcbiAgICB9O1xuICB9IGVsc2UgaWYgKG51bGwgIT0gKHQgPSBsLmV4ZWMobikpKSB7XG4gICAgaSA9IGwubGFzdEluZGV4O1xuICAgIGlnbm9yZWQoKTtcbiAgICBpZiAobnVsbCAhPSAociA9IHRbby5Db25zdF0pKSB7XG4gICAgICByZXR1cm4gXCJudWxsXCIgPT09IHIgPyB7XG4gICAgICAgIGtpbmQ6IFwiTnVsbFZhbHVlXCJcbiAgICAgIH0gOiB7XG4gICAgICAgIGtpbmQ6IFwiQm9vbGVhblZhbHVlXCIsXG4gICAgICAgIHZhbHVlOiBcInRydWVcIiA9PT0gclxuICAgICAgfTtcbiAgICB9IGVsc2UgaWYgKG51bGwgIT0gKHIgPSB0W28uVmFyXSkpIHtcbiAgICAgIGlmIChlKSB7XG4gICAgICAgIHRocm93IGVycm9yKFwiVmFyaWFibGVcIik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGtpbmQ6IFwiVmFyaWFibGVcIixcbiAgICAgICAgICBuYW1lOiB7XG4gICAgICAgICAgICBraW5kOiBcIk5hbWVcIixcbiAgICAgICAgICAgIHZhbHVlOiByXG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAobnVsbCAhPSAociA9IHRbby5JbnRdKSkge1xuICAgICAgdmFyIHY7XG4gICAgICBpZiAobnVsbCAhPSAodiA9IHRbby5GbG9hdF0pKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAga2luZDogXCJGbG9hdFZhbHVlXCIsXG4gICAgICAgICAgdmFsdWU6IHIgKyB2XG4gICAgICAgIH07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGtpbmQ6IFwiSW50VmFsdWVcIixcbiAgICAgICAgICB2YWx1ZTogclxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAobnVsbCAhPSAociA9IHRbby5CbG9ja1N0cmluZ10pKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBraW5kOiBcIlN0cmluZ1ZhbHVlXCIsXG4gICAgICAgIHZhbHVlOiBibG9ja1N0cmluZyhyLnNsaWNlKDMsIC0zKSksXG4gICAgICAgIGJsb2NrOiAhMFxuICAgICAgfTtcbiAgICB9IGVsc2UgaWYgKG51bGwgIT0gKHIgPSB0W28uU3RyaW5nXSkpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGtpbmQ6IFwiU3RyaW5nVmFsdWVcIixcbiAgICAgICAgdmFsdWU6IHUudGVzdChyKSA/IEpTT04ucGFyc2UocikgOiByLnNsaWNlKDEsIC0xKSxcbiAgICAgICAgYmxvY2s6ICExXG4gICAgICB9O1xuICAgIH0gZWxzZSBpZiAobnVsbCAhPSAociA9IHRbby5FbnVtXSkpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGtpbmQ6IFwiRW51bVZhbHVlXCIsXG4gICAgICAgIHZhbHVlOiByXG4gICAgICB9O1xuICAgIH1cbiAgfVxuICB0aHJvdyBlcnJvcihcIlZhbHVlXCIpO1xufVxuXG5mdW5jdGlvbiBhcmd1bWVudHNfKGUpIHtcbiAgaWYgKDQwID09PSBuLmNoYXJDb2RlQXQoaSkpIHtcbiAgICB2YXIgciA9IFtdO1xuICAgIGkrKztcbiAgICBpZ25vcmVkKCk7XG4gICAgdmFyIHQ7XG4gICAgZG8ge1xuICAgICAgaWYgKG51bGwgPT0gKHQgPSBhZHZhbmNlKGEpKSkge1xuICAgICAgICB0aHJvdyBlcnJvcihcIkFyZ3VtZW50XCIpO1xuICAgICAgfVxuICAgICAgaWdub3JlZCgpO1xuICAgICAgaWYgKDU4ICE9PSBuLmNoYXJDb2RlQXQoaSsrKSkge1xuICAgICAgICB0aHJvdyBlcnJvcihcIkFyZ3VtZW50XCIpO1xuICAgICAgfVxuICAgICAgaWdub3JlZCgpO1xuICAgICAgci5wdXNoKHtcbiAgICAgICAga2luZDogXCJBcmd1bWVudFwiLFxuICAgICAgICBuYW1lOiB7XG4gICAgICAgICAga2luZDogXCJOYW1lXCIsXG4gICAgICAgICAgdmFsdWU6IHRcbiAgICAgICAgfSxcbiAgICAgICAgdmFsdWU6IHZhbHVlKGUpXG4gICAgICB9KTtcbiAgICB9IHdoaWxlICg0MSAhPT0gbi5jaGFyQ29kZUF0KGkpKTtcbiAgICBpKys7XG4gICAgaWdub3JlZCgpO1xuICAgIHJldHVybiByO1xuICB9XG59XG5cbmZ1bmN0aW9uIGRpcmVjdGl2ZXMoZSkge1xuICBpZiAoNjQgPT09IG4uY2hhckNvZGVBdChpKSkge1xuICAgIHZhciByID0gW107XG4gICAgdmFyIHQ7XG4gICAgZG8ge1xuICAgICAgaSsrO1xuICAgICAgaWYgKG51bGwgPT0gKHQgPSBhZHZhbmNlKGEpKSkge1xuICAgICAgICB0aHJvdyBlcnJvcihcIkRpcmVjdGl2ZVwiKTtcbiAgICAgIH1cbiAgICAgIGlnbm9yZWQoKTtcbiAgICAgIHIucHVzaCh7XG4gICAgICAgIGtpbmQ6IFwiRGlyZWN0aXZlXCIsXG4gICAgICAgIG5hbWU6IHtcbiAgICAgICAgICBraW5kOiBcIk5hbWVcIixcbiAgICAgICAgICB2YWx1ZTogdFxuICAgICAgICB9LFxuICAgICAgICBhcmd1bWVudHM6IGFyZ3VtZW50c18oZSlcbiAgICAgIH0pO1xuICAgIH0gd2hpbGUgKDY0ID09PSBuLmNoYXJDb2RlQXQoaSkpO1xuICAgIHJldHVybiByO1xuICB9XG59XG5cbmZ1bmN0aW9uIHR5cGUoKSB7XG4gIHZhciBlO1xuICB2YXIgciA9IDA7XG4gIHdoaWxlICg5MSA9PT0gbi5jaGFyQ29kZUF0KGkpKSB7XG4gICAgcisrO1xuICAgIGkrKztcbiAgICBpZ25vcmVkKCk7XG4gIH1cbiAgaWYgKG51bGwgPT0gKGUgPSBhZHZhbmNlKGEpKSkge1xuICAgIHRocm93IGVycm9yKFwiTmFtZWRUeXBlXCIpO1xuICB9XG4gIGlnbm9yZWQoKTtcbiAgdmFyIHQgPSB7XG4gICAga2luZDogXCJOYW1lZFR5cGVcIixcbiAgICBuYW1lOiB7XG4gICAgICBraW5kOiBcIk5hbWVcIixcbiAgICAgIHZhbHVlOiBlXG4gICAgfVxuICB9O1xuICBkbyB7XG4gICAgaWYgKDMzID09PSBuLmNoYXJDb2RlQXQoaSkpIHtcbiAgICAgIGkrKztcbiAgICAgIGlnbm9yZWQoKTtcbiAgICAgIHQgPSB7XG4gICAgICAgIGtpbmQ6IFwiTm9uTnVsbFR5cGVcIixcbiAgICAgICAgdHlwZTogdFxuICAgICAgfTtcbiAgICB9XG4gICAgaWYgKHIpIHtcbiAgICAgIGlmICg5MyAhPT0gbi5jaGFyQ29kZUF0KGkrKykpIHtcbiAgICAgICAgdGhyb3cgZXJyb3IoXCJOYW1lZFR5cGVcIik7XG4gICAgICB9XG4gICAgICBpZ25vcmVkKCk7XG4gICAgICB0ID0ge1xuICAgICAgICBraW5kOiBcIkxpc3RUeXBlXCIsXG4gICAgICAgIHR5cGU6IHRcbiAgICAgIH07XG4gICAgfVxuICB9IHdoaWxlIChyLS0pO1xuICByZXR1cm4gdDtcbn1cblxudmFyIGQgPSBuZXcgUmVnRXhwKFwiKD86KFxcXFwuezN9KXwoXCIgKyBhLnNvdXJjZSArIFwiKSlcIiwgXCJ5XCIpO1xuXG52YXIgcyA9IGZ1bmN0aW9uKGUpIHtcbiAgZVtlLlNwcmVhZCA9IDFdID0gXCJTcHJlYWRcIjtcbiAgZVtlLk5hbWUgPSAyXSA9IFwiTmFtZVwiO1xuICByZXR1cm4gZTtcbn0ocyB8fCB7fSk7XG5cbmZ1bmN0aW9uIHNlbGVjdGlvblNldCgpIHtcbiAgdmFyIGUgPSBbXTtcbiAgdmFyIHI7XG4gIHZhciB0O1xuICBkbyB7XG4gICAgZC5sYXN0SW5kZXggPSBpO1xuICAgIGlmIChudWxsICE9ICh0ID0gZC5leGVjKG4pKSkge1xuICAgICAgaSA9IGQubGFzdEluZGV4O1xuICAgICAgaWYgKG51bGwgIT0gdFtzLlNwcmVhZF0pIHtcbiAgICAgICAgaWdub3JlZCgpO1xuICAgICAgICB2YXIgbCA9IGFkdmFuY2UoYSk7XG4gICAgICAgIGlmIChudWxsICE9IGwgJiYgXCJvblwiICE9PSBsKSB7XG4gICAgICAgICAgaWdub3JlZCgpO1xuICAgICAgICAgIGUucHVzaCh7XG4gICAgICAgICAgICBraW5kOiBcIkZyYWdtZW50U3ByZWFkXCIsXG4gICAgICAgICAgICBuYW1lOiB7XG4gICAgICAgICAgICAgIGtpbmQ6IFwiTmFtZVwiLFxuICAgICAgICAgICAgICB2YWx1ZTogbFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRpcmVjdGl2ZXM6IGRpcmVjdGl2ZXMoITEpXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWdub3JlZCgpO1xuICAgICAgICAgIGlmIChcIm9uXCIgPT09IGwpIHtcbiAgICAgICAgICAgIGlmIChudWxsID09IChsID0gYWR2YW5jZShhKSkpIHtcbiAgICAgICAgICAgICAgdGhyb3cgZXJyb3IoXCJOYW1lZFR5cGVcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZ25vcmVkKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBvID0gZGlyZWN0aXZlcyghMSk7XG4gICAgICAgICAgaWYgKDEyMyAhPT0gbi5jaGFyQ29kZUF0KGkrKykpIHtcbiAgICAgICAgICAgIHRocm93IGVycm9yKFwiSW5saW5lRnJhZ21lbnRcIik7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlnbm9yZWQoKTtcbiAgICAgICAgICBlLnB1c2goe1xuICAgICAgICAgICAga2luZDogXCJJbmxpbmVGcmFnbWVudFwiLFxuICAgICAgICAgICAgdHlwZUNvbmRpdGlvbjogbCA/IHtcbiAgICAgICAgICAgICAga2luZDogXCJOYW1lZFR5cGVcIixcbiAgICAgICAgICAgICAgbmFtZToge1xuICAgICAgICAgICAgICAgIGtpbmQ6IFwiTmFtZVwiLFxuICAgICAgICAgICAgICAgIHZhbHVlOiBsXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gOiB2b2lkIDAsXG4gICAgICAgICAgICBkaXJlY3RpdmVzOiBvLFxuICAgICAgICAgICAgc2VsZWN0aW9uU2V0OiBzZWxlY3Rpb25TZXQoKVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKG51bGwgIT0gKHIgPSB0W3MuTmFtZV0pKSB7XG4gICAgICAgIHZhciB1ID0gdm9pZCAwO1xuICAgICAgICBpZ25vcmVkKCk7XG4gICAgICAgIGlmICg1OCA9PT0gbi5jaGFyQ29kZUF0KGkpKSB7XG4gICAgICAgICAgaSsrO1xuICAgICAgICAgIGlnbm9yZWQoKTtcbiAgICAgICAgICB1ID0gcjtcbiAgICAgICAgICBpZiAobnVsbCA9PSAociA9IGFkdmFuY2UoYSkpKSB7XG4gICAgICAgICAgICB0aHJvdyBlcnJvcihcIkZpZWxkXCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZ25vcmVkKCk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHYgPSBhcmd1bWVudHNfKCExKTtcbiAgICAgICAgaWdub3JlZCgpO1xuICAgICAgICB2YXIgYyA9IGRpcmVjdGl2ZXMoITEpO1xuICAgICAgICB2YXIgZiA9IHZvaWQgMDtcbiAgICAgICAgaWYgKDEyMyA9PT0gbi5jaGFyQ29kZUF0KGkpKSB7XG4gICAgICAgICAgaSsrO1xuICAgICAgICAgIGlnbm9yZWQoKTtcbiAgICAgICAgICBmID0gc2VsZWN0aW9uU2V0KCk7XG4gICAgICAgIH1cbiAgICAgICAgZS5wdXNoKHtcbiAgICAgICAgICBraW5kOiBcIkZpZWxkXCIsXG4gICAgICAgICAgYWxpYXM6IHUgPyB7XG4gICAgICAgICAgICBraW5kOiBcIk5hbWVcIixcbiAgICAgICAgICAgIHZhbHVlOiB1XG4gICAgICAgICAgfSA6IHZvaWQgMCxcbiAgICAgICAgICBuYW1lOiB7XG4gICAgICAgICAgICBraW5kOiBcIk5hbWVcIixcbiAgICAgICAgICAgIHZhbHVlOiByXG4gICAgICAgICAgfSxcbiAgICAgICAgICBhcmd1bWVudHM6IHYsXG4gICAgICAgICAgZGlyZWN0aXZlczogYyxcbiAgICAgICAgICBzZWxlY3Rpb25TZXQ6IGZcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IGVycm9yKFwiU2VsZWN0aW9uU2V0XCIpO1xuICAgIH1cbiAgfSB3aGlsZSAoMTI1ICE9PSBuLmNoYXJDb2RlQXQoaSkpO1xuICBpKys7XG4gIGlnbm9yZWQoKTtcbiAgcmV0dXJuIHtcbiAgICBraW5kOiBcIlNlbGVjdGlvblNldFwiLFxuICAgIHNlbGVjdGlvbnM6IGVcbiAgfTtcbn1cblxuZnVuY3Rpb24gZnJhZ21lbnREZWZpbml0aW9uKCkge1xuICB2YXIgZTtcbiAgdmFyIHI7XG4gIGlmIChudWxsID09IChlID0gYWR2YW5jZShhKSkpIHtcbiAgICB0aHJvdyBlcnJvcihcIkZyYWdtZW50RGVmaW5pdGlvblwiKTtcbiAgfVxuICBpZ25vcmVkKCk7XG4gIGlmIChcIm9uXCIgIT09IGFkdmFuY2UoYSkpIHtcbiAgICB0aHJvdyBlcnJvcihcIkZyYWdtZW50RGVmaW5pdGlvblwiKTtcbiAgfVxuICBpZ25vcmVkKCk7XG4gIGlmIChudWxsID09IChyID0gYWR2YW5jZShhKSkpIHtcbiAgICB0aHJvdyBlcnJvcihcIkZyYWdtZW50RGVmaW5pdGlvblwiKTtcbiAgfVxuICBpZ25vcmVkKCk7XG4gIHZhciB0ID0gZGlyZWN0aXZlcyghMSk7XG4gIGlmICgxMjMgIT09IG4uY2hhckNvZGVBdChpKyspKSB7XG4gICAgdGhyb3cgZXJyb3IoXCJGcmFnbWVudERlZmluaXRpb25cIik7XG4gIH1cbiAgaWdub3JlZCgpO1xuICByZXR1cm4ge1xuICAgIGtpbmQ6IFwiRnJhZ21lbnREZWZpbml0aW9uXCIsXG4gICAgbmFtZToge1xuICAgICAga2luZDogXCJOYW1lXCIsXG4gICAgICB2YWx1ZTogZVxuICAgIH0sXG4gICAgdHlwZUNvbmRpdGlvbjoge1xuICAgICAga2luZDogXCJOYW1lZFR5cGVcIixcbiAgICAgIG5hbWU6IHtcbiAgICAgICAga2luZDogXCJOYW1lXCIsXG4gICAgICAgIHZhbHVlOiByXG4gICAgICB9XG4gICAgfSxcbiAgICBkaXJlY3RpdmVzOiB0LFxuICAgIHNlbGVjdGlvblNldDogc2VsZWN0aW9uU2V0KClcbiAgfTtcbn1cblxudmFyIHYgPSAvKD86cXVlcnl8bXV0YXRpb258c3Vic2NyaXB0aW9ufGZyYWdtZW50KS95O1xuXG5mdW5jdGlvbiBvcGVyYXRpb25EZWZpbml0aW9uKGUpIHtcbiAgdmFyIHI7XG4gIHZhciB0O1xuICB2YXIgbDtcbiAgaWYgKGUpIHtcbiAgICBpZ25vcmVkKCk7XG4gICAgciA9IGFkdmFuY2UoYSk7XG4gICAgdCA9IGZ1bmN0aW9uIHZhcmlhYmxlRGVmaW5pdGlvbnMoKSB7XG4gICAgICBpZ25vcmVkKCk7XG4gICAgICBpZiAoNDAgPT09IG4uY2hhckNvZGVBdChpKSkge1xuICAgICAgICB2YXIgZSA9IFtdO1xuICAgICAgICBpKys7XG4gICAgICAgIGlnbm9yZWQoKTtcbiAgICAgICAgdmFyIHI7XG4gICAgICAgIGRvIHtcbiAgICAgICAgICBpZiAoMzYgIT09IG4uY2hhckNvZGVBdChpKyspKSB7XG4gICAgICAgICAgICB0aHJvdyBlcnJvcihcIlZhcmlhYmxlXCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAobnVsbCA9PSAociA9IGFkdmFuY2UoYSkpKSB7XG4gICAgICAgICAgICB0aHJvdyBlcnJvcihcIlZhcmlhYmxlXCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZ25vcmVkKCk7XG4gICAgICAgICAgaWYgKDU4ICE9PSBuLmNoYXJDb2RlQXQoaSsrKSkge1xuICAgICAgICAgICAgdGhyb3cgZXJyb3IoXCJWYXJpYWJsZURlZmluaXRpb25cIik7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlnbm9yZWQoKTtcbiAgICAgICAgICB2YXIgdCA9IHR5cGUoKTtcbiAgICAgICAgICB2YXIgbCA9IHZvaWQgMDtcbiAgICAgICAgICBpZiAoNjEgPT09IG4uY2hhckNvZGVBdChpKSkge1xuICAgICAgICAgICAgaSsrO1xuICAgICAgICAgICAgaWdub3JlZCgpO1xuICAgICAgICAgICAgbCA9IHZhbHVlKCEwKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWdub3JlZCgpO1xuICAgICAgICAgIGUucHVzaCh7XG4gICAgICAgICAgICBraW5kOiBcIlZhcmlhYmxlRGVmaW5pdGlvblwiLFxuICAgICAgICAgICAgdmFyaWFibGU6IHtcbiAgICAgICAgICAgICAga2luZDogXCJWYXJpYWJsZVwiLFxuICAgICAgICAgICAgICBuYW1lOiB7XG4gICAgICAgICAgICAgICAga2luZDogXCJOYW1lXCIsXG4gICAgICAgICAgICAgICAgdmFsdWU6IHJcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHR5cGU6IHQsXG4gICAgICAgICAgICBkZWZhdWx0VmFsdWU6IGwsXG4gICAgICAgICAgICBkaXJlY3RpdmVzOiBkaXJlY3RpdmVzKCEwKVxuICAgICAgICAgIH0pO1xuICAgICAgICB9IHdoaWxlICg0MSAhPT0gbi5jaGFyQ29kZUF0KGkpKTtcbiAgICAgICAgaSsrO1xuICAgICAgICBpZ25vcmVkKCk7XG4gICAgICAgIHJldHVybiBlO1xuICAgICAgfVxuICAgIH0oKTtcbiAgICBsID0gZGlyZWN0aXZlcyghMSk7XG4gIH1cbiAgaWYgKDEyMyA9PT0gbi5jaGFyQ29kZUF0KGkpKSB7XG4gICAgaSsrO1xuICAgIGlnbm9yZWQoKTtcbiAgICByZXR1cm4ge1xuICAgICAga2luZDogXCJPcGVyYXRpb25EZWZpbml0aW9uXCIsXG4gICAgICBvcGVyYXRpb246IGUgfHwgXCJxdWVyeVwiLFxuICAgICAgbmFtZTogciA/IHtcbiAgICAgICAga2luZDogXCJOYW1lXCIsXG4gICAgICAgIHZhbHVlOiByXG4gICAgICB9IDogdm9pZCAwLFxuICAgICAgdmFyaWFibGVEZWZpbml0aW9uczogdCxcbiAgICAgIGRpcmVjdGl2ZXM6IGwsXG4gICAgICBzZWxlY3Rpb25TZXQ6IHNlbGVjdGlvblNldCgpXG4gICAgfTtcbiAgfVxufVxuXG5mdW5jdGlvbiBwYXJzZShlLCByKSB7XG4gIGkgPSAwO1xuICByZXR1cm4gZnVuY3Rpb24gZG9jdW1lbnQoZSwgcikge1xuICAgIHZhciBuO1xuICAgIHZhciB0O1xuICAgIGlnbm9yZWQoKTtcbiAgICB2YXIgYSA9IFtdO1xuICAgIGRvIHtcbiAgICAgIGlmIChcImZyYWdtZW50XCIgPT09IChuID0gYWR2YW5jZSh2KSkpIHtcbiAgICAgICAgaWdub3JlZCgpO1xuICAgICAgICBhLnB1c2goZnJhZ21lbnREZWZpbml0aW9uKCkpO1xuICAgICAgfSBlbHNlIGlmIChudWxsICE9ICh0ID0gb3BlcmF0aW9uRGVmaW5pdGlvbihuKSkpIHtcbiAgICAgICAgYS5wdXNoKHQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgZXJyb3IoXCJEb2N1bWVudFwiKTtcbiAgICAgIH1cbiAgICB9IHdoaWxlIChpIDwgZS5sZW5ndGgpO1xuICAgIGlmICghcikge1xuICAgICAgdmFyIGw7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBraW5kOiBcIkRvY3VtZW50XCIsXG4gICAgICAgIGRlZmluaXRpb25zOiBhLFxuICAgICAgICBzZXQgbG9jKGUpIHtcbiAgICAgICAgICBsID0gZTtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0IGxvYygpIHtcbiAgICAgICAgICBpZiAoIWwpIHtcbiAgICAgICAgICAgIGwgPSB7XG4gICAgICAgICAgICAgIHN0YXJ0OiAwLFxuICAgICAgICAgICAgICBlbmQ6IGUubGVuZ3RoLFxuICAgICAgICAgICAgICBzdGFydFRva2VuOiB2b2lkIDAsXG4gICAgICAgICAgICAgIGVuZFRva2VuOiB2b2lkIDAsXG4gICAgICAgICAgICAgIHNvdXJjZToge1xuICAgICAgICAgICAgICAgIGJvZHk6IGUsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJncmFwaHFsLndlYlwiLFxuICAgICAgICAgICAgICAgIGxvY2F0aW9uT2Zmc2V0OiB7XG4gICAgICAgICAgICAgICAgICBsaW5lOiAxLFxuICAgICAgICAgICAgICAgICAgY29sdW1uOiAxXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gbDtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgIGtpbmQ6IFwiRG9jdW1lbnRcIixcbiAgICAgIGRlZmluaXRpb25zOiBhXG4gICAgfTtcbiAgfShuID0gXCJzdHJpbmdcIiA9PSB0eXBlb2YgZS5ib2R5ID8gZS5ib2R5IDogZSwgciAmJiByLm5vTG9jYXRpb24pO1xufVxuXG5mdW5jdGlvbiBwYXJzZVZhbHVlKGUsIHIpIHtcbiAgbiA9IFwic3RyaW5nXCIgPT0gdHlwZW9mIGUuYm9keSA/IGUuYm9keSA6IGU7XG4gIGkgPSAwO1xuICBpZ25vcmVkKCk7XG4gIHJldHVybiB2YWx1ZSghMSk7XG59XG5cbmZ1bmN0aW9uIHBhcnNlVHlwZShlLCByKSB7XG4gIG4gPSBcInN0cmluZ1wiID09IHR5cGVvZiBlLmJvZHkgPyBlLmJvZHkgOiBlO1xuICBpID0gMDtcbiAgcmV0dXJuIHR5cGUoKTtcbn1cblxudmFyIGMgPSB7fTtcblxuZnVuY3Rpb24gdmlzaXQoZSwgcikge1xuICB2YXIgbiA9IFtdO1xuICB2YXIgaSA9IFtdO1xuICB0cnkge1xuICAgIHZhciB0ID0gZnVuY3Rpb24gdHJhdmVyc2UoZSwgdCwgYSkge1xuICAgICAgdmFyIGwgPSAhMTtcbiAgICAgIHZhciBvID0gcltlLmtpbmRdICYmIHJbZS5raW5kXS5lbnRlciB8fCByW2Uua2luZF0gfHwgci5lbnRlcjtcbiAgICAgIHZhciB1ID0gbyAmJiBvLmNhbGwociwgZSwgdCwgYSwgaSwgbik7XG4gICAgICBpZiAoITEgPT09IHUpIHtcbiAgICAgICAgcmV0dXJuIGU7XG4gICAgICB9IGVsc2UgaWYgKG51bGwgPT09IHUpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9IGVsc2UgaWYgKHUgPT09IGMpIHtcbiAgICAgICAgdGhyb3cgYztcbiAgICAgIH0gZWxzZSBpZiAodSAmJiBcInN0cmluZ1wiID09IHR5cGVvZiB1LmtpbmQpIHtcbiAgICAgICAgbCA9IHUgIT09IGU7XG4gICAgICAgIGUgPSB1O1xuICAgICAgfVxuICAgICAgaWYgKGEpIHtcbiAgICAgICAgbi5wdXNoKGEpO1xuICAgICAgfVxuICAgICAgdmFyIGQ7XG4gICAgICB2YXIgcyA9IHtcbiAgICAgICAgLi4uZVxuICAgICAgfTtcbiAgICAgIGZvciAodmFyIHYgaW4gZSkge1xuICAgICAgICBpLnB1c2godik7XG4gICAgICAgIHZhciBmID0gZVt2XTtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoZikpIHtcbiAgICAgICAgICB2YXIgZyA9IFtdO1xuICAgICAgICAgIGZvciAodmFyIG0gPSAwOyBtIDwgZi5sZW5ndGg7IG0rKykge1xuICAgICAgICAgICAgaWYgKG51bGwgIT0gZlttXSAmJiBcInN0cmluZ1wiID09IHR5cGVvZiBmW21dLmtpbmQpIHtcbiAgICAgICAgICAgICAgbi5wdXNoKGUpO1xuICAgICAgICAgICAgICBpLnB1c2gobSk7XG4gICAgICAgICAgICAgIGQgPSB0cmF2ZXJzZShmW21dLCBtLCBmKTtcbiAgICAgICAgICAgICAgaS5wb3AoKTtcbiAgICAgICAgICAgICAgbi5wb3AoKTtcbiAgICAgICAgICAgICAgaWYgKG51bGwgPT0gZCkge1xuICAgICAgICAgICAgICAgIGwgPSAhMDtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBsID0gbCB8fCBkICE9PSBmW21dO1xuICAgICAgICAgICAgICAgIGcucHVzaChkKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBmID0gZztcbiAgICAgICAgfSBlbHNlIGlmIChudWxsICE9IGYgJiYgXCJzdHJpbmdcIiA9PSB0eXBlb2YgZi5raW5kKSB7XG4gICAgICAgICAgaWYgKHZvaWQgMCAhPT0gKGQgPSB0cmF2ZXJzZShmLCB2LCBlKSkpIHtcbiAgICAgICAgICAgIGwgPSBsIHx8IGYgIT09IGQ7XG4gICAgICAgICAgICBmID0gZDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaS5wb3AoKTtcbiAgICAgICAgaWYgKGwpIHtcbiAgICAgICAgICBzW3ZdID0gZjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGEpIHtcbiAgICAgICAgbi5wb3AoKTtcbiAgICAgIH1cbiAgICAgIHZhciBwID0gcltlLmtpbmRdICYmIHJbZS5raW5kXS5sZWF2ZSB8fCByLmxlYXZlO1xuICAgICAgdmFyIGggPSBwICYmIHAuY2FsbChyLCBlLCB0LCBhLCBpLCBuKTtcbiAgICAgIGlmIChoID09PSBjKSB7XG4gICAgICAgIHRocm93IGM7XG4gICAgICB9IGVsc2UgaWYgKHZvaWQgMCAhPT0gaCkge1xuICAgICAgICByZXR1cm4gaDtcbiAgICAgIH0gZWxzZSBpZiAodm9pZCAwICE9PSB1KSB7XG4gICAgICAgIHJldHVybiBsID8gcyA6IHU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gbCA/IHMgOiBlO1xuICAgICAgfVxuICAgIH0oZSk7XG4gICAgcmV0dXJuIHZvaWQgMCAhPT0gdCAmJiAhMSAhPT0gdCA/IHQgOiBlO1xuICB9IGNhdGNoIChyKSB7XG4gICAgaWYgKHIgIT09IGMpIHtcbiAgICAgIHRocm93IHI7XG4gICAgfVxuICAgIHJldHVybiBlO1xuICB9XG59XG5cbmZ1bmN0aW9uIG1hcEpvaW4oZSwgciwgbikge1xuICB2YXIgaSA9IFwiXCI7XG4gIGZvciAodmFyIHQgPSAwOyB0IDwgZS5sZW5ndGg7IHQrKykge1xuICAgIGlmICh0KSB7XG4gICAgICBpICs9IHI7XG4gICAgfVxuICAgIGkgKz0gbihlW3RdKTtcbiAgfVxuICByZXR1cm4gaTtcbn1cblxuZnVuY3Rpb24gcHJpbnRTdHJpbmcoZSkge1xuICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoZSk7XG59XG5cbmZ1bmN0aW9uIHByaW50QmxvY2tTdHJpbmcoZSkge1xuICByZXR1cm4gJ1wiXCJcIlxcbicgKyBlLnJlcGxhY2UoL1wiXCJcIi9nLCAnXFxcXFwiXCJcIicpICsgJ1xcblwiXCJcIic7XG59XG5cbnZhciBmID0gXCJcXG5cIjtcblxudmFyIGcgPSB7XG4gIE9wZXJhdGlvbkRlZmluaXRpb24oZSkge1xuICAgIHZhciByID0gZS5vcGVyYXRpb247XG4gICAgaWYgKGUubmFtZSkge1xuICAgICAgciArPSBcIiBcIiArIGUubmFtZS52YWx1ZTtcbiAgICB9XG4gICAgaWYgKGUudmFyaWFibGVEZWZpbml0aW9ucyAmJiBlLnZhcmlhYmxlRGVmaW5pdGlvbnMubGVuZ3RoKSB7XG4gICAgICBpZiAoIWUubmFtZSkge1xuICAgICAgICByICs9IFwiIFwiO1xuICAgICAgfVxuICAgICAgciArPSBcIihcIiArIG1hcEpvaW4oZS52YXJpYWJsZURlZmluaXRpb25zLCBcIiwgXCIsIGcuVmFyaWFibGVEZWZpbml0aW9uKSArIFwiKVwiO1xuICAgIH1cbiAgICBpZiAoZS5kaXJlY3RpdmVzICYmIGUuZGlyZWN0aXZlcy5sZW5ndGgpIHtcbiAgICAgIHIgKz0gXCIgXCIgKyBtYXBKb2luKGUuZGlyZWN0aXZlcywgXCIgXCIsIGcuRGlyZWN0aXZlKTtcbiAgICB9XG4gICAgcmV0dXJuIFwicXVlcnlcIiAhPT0gciA/IHIgKyBcIiBcIiArIGcuU2VsZWN0aW9uU2V0KGUuc2VsZWN0aW9uU2V0KSA6IGcuU2VsZWN0aW9uU2V0KGUuc2VsZWN0aW9uU2V0KTtcbiAgfSxcbiAgVmFyaWFibGVEZWZpbml0aW9uKGUpIHtcbiAgICB2YXIgciA9IGcuVmFyaWFibGUoZS52YXJpYWJsZSkgKyBcIjogXCIgKyBfcHJpbnQoZS50eXBlKTtcbiAgICBpZiAoZS5kZWZhdWx0VmFsdWUpIHtcbiAgICAgIHIgKz0gXCIgPSBcIiArIF9wcmludChlLmRlZmF1bHRWYWx1ZSk7XG4gICAgfVxuICAgIGlmIChlLmRpcmVjdGl2ZXMgJiYgZS5kaXJlY3RpdmVzLmxlbmd0aCkge1xuICAgICAgciArPSBcIiBcIiArIG1hcEpvaW4oZS5kaXJlY3RpdmVzLCBcIiBcIiwgZy5EaXJlY3RpdmUpO1xuICAgIH1cbiAgICByZXR1cm4gcjtcbiAgfSxcbiAgRmllbGQoZSkge1xuICAgIHZhciByID0gZS5hbGlhcyA/IGUuYWxpYXMudmFsdWUgKyBcIjogXCIgKyBlLm5hbWUudmFsdWUgOiBlLm5hbWUudmFsdWU7XG4gICAgaWYgKGUuYXJndW1lbnRzICYmIGUuYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgdmFyIG4gPSBtYXBKb2luKGUuYXJndW1lbnRzLCBcIiwgXCIsIGcuQXJndW1lbnQpO1xuICAgICAgaWYgKHIubGVuZ3RoICsgbi5sZW5ndGggKyAyID4gODApIHtcbiAgICAgICAgciArPSBcIihcIiArIChmICs9IFwiICBcIikgKyBtYXBKb2luKGUuYXJndW1lbnRzLCBmLCBnLkFyZ3VtZW50KSArIChmID0gZi5zbGljZSgwLCAtMikpICsgXCIpXCI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByICs9IFwiKFwiICsgbiArIFwiKVwiO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZS5kaXJlY3RpdmVzICYmIGUuZGlyZWN0aXZlcy5sZW5ndGgpIHtcbiAgICAgIHIgKz0gXCIgXCIgKyBtYXBKb2luKGUuZGlyZWN0aXZlcywgXCIgXCIsIGcuRGlyZWN0aXZlKTtcbiAgICB9XG4gICAgaWYgKGUuc2VsZWN0aW9uU2V0ICYmIGUuc2VsZWN0aW9uU2V0LnNlbGVjdGlvbnMubGVuZ3RoKSB7XG4gICAgICByICs9IFwiIFwiICsgZy5TZWxlY3Rpb25TZXQoZS5zZWxlY3Rpb25TZXQpO1xuICAgIH1cbiAgICByZXR1cm4gcjtcbiAgfSxcbiAgU3RyaW5nVmFsdWUoZSkge1xuICAgIGlmIChlLmJsb2NrKSB7XG4gICAgICByZXR1cm4gcHJpbnRCbG9ja1N0cmluZyhlLnZhbHVlKS5yZXBsYWNlKC9cXG4vZywgZik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBwcmludFN0cmluZyhlLnZhbHVlKTtcbiAgICB9XG4gIH0sXG4gIEJvb2xlYW5WYWx1ZTogZSA9PiBcIlwiICsgZS52YWx1ZSxcbiAgTnVsbFZhbHVlOiBlID0+IFwibnVsbFwiLFxuICBJbnRWYWx1ZTogZSA9PiBlLnZhbHVlLFxuICBGbG9hdFZhbHVlOiBlID0+IGUudmFsdWUsXG4gIEVudW1WYWx1ZTogZSA9PiBlLnZhbHVlLFxuICBOYW1lOiBlID0+IGUudmFsdWUsXG4gIFZhcmlhYmxlOiBlID0+IFwiJFwiICsgZS5uYW1lLnZhbHVlLFxuICBMaXN0VmFsdWU6IGUgPT4gXCJbXCIgKyBtYXBKb2luKGUudmFsdWVzLCBcIiwgXCIsIF9wcmludCkgKyBcIl1cIixcbiAgT2JqZWN0VmFsdWU6IGUgPT4gXCJ7XCIgKyBtYXBKb2luKGUuZmllbGRzLCBcIiwgXCIsIGcuT2JqZWN0RmllbGQpICsgXCJ9XCIsXG4gIE9iamVjdEZpZWxkOiBlID0+IGUubmFtZS52YWx1ZSArIFwiOiBcIiArIF9wcmludChlLnZhbHVlKSxcbiAgRG9jdW1lbnQoZSkge1xuICAgIGlmICghZS5kZWZpbml0aW9ucyB8fCAhZS5kZWZpbml0aW9ucy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBcIlwiO1xuICAgIH1cbiAgICByZXR1cm4gbWFwSm9pbihlLmRlZmluaXRpb25zLCBcIlxcblxcblwiLCBfcHJpbnQpO1xuICB9LFxuICBTZWxlY3Rpb25TZXQ6IGUgPT4gXCJ7XCIgKyAoZiArPSBcIiAgXCIpICsgbWFwSm9pbihlLnNlbGVjdGlvbnMsIGYsIF9wcmludCkgKyAoZiA9IGYuc2xpY2UoMCwgLTIpKSArIFwifVwiLFxuICBBcmd1bWVudDogZSA9PiBlLm5hbWUudmFsdWUgKyBcIjogXCIgKyBfcHJpbnQoZS52YWx1ZSksXG4gIEZyYWdtZW50U3ByZWFkKGUpIHtcbiAgICB2YXIgciA9IFwiLi4uXCIgKyBlLm5hbWUudmFsdWU7XG4gICAgaWYgKGUuZGlyZWN0aXZlcyAmJiBlLmRpcmVjdGl2ZXMubGVuZ3RoKSB7XG4gICAgICByICs9IFwiIFwiICsgbWFwSm9pbihlLmRpcmVjdGl2ZXMsIFwiIFwiLCBnLkRpcmVjdGl2ZSk7XG4gICAgfVxuICAgIHJldHVybiByO1xuICB9LFxuICBJbmxpbmVGcmFnbWVudChlKSB7XG4gICAgdmFyIHIgPSBcIi4uLlwiO1xuICAgIGlmIChlLnR5cGVDb25kaXRpb24pIHtcbiAgICAgIHIgKz0gXCIgb24gXCIgKyBlLnR5cGVDb25kaXRpb24ubmFtZS52YWx1ZTtcbiAgICB9XG4gICAgaWYgKGUuZGlyZWN0aXZlcyAmJiBlLmRpcmVjdGl2ZXMubGVuZ3RoKSB7XG4gICAgICByICs9IFwiIFwiICsgbWFwSm9pbihlLmRpcmVjdGl2ZXMsIFwiIFwiLCBnLkRpcmVjdGl2ZSk7XG4gICAgfVxuICAgIHJldHVybiByICs9IFwiIFwiICsgZy5TZWxlY3Rpb25TZXQoZS5zZWxlY3Rpb25TZXQpO1xuICB9LFxuICBGcmFnbWVudERlZmluaXRpb24oZSkge1xuICAgIHZhciByID0gXCJmcmFnbWVudCBcIiArIGUubmFtZS52YWx1ZTtcbiAgICByICs9IFwiIG9uIFwiICsgZS50eXBlQ29uZGl0aW9uLm5hbWUudmFsdWU7XG4gICAgaWYgKGUuZGlyZWN0aXZlcyAmJiBlLmRpcmVjdGl2ZXMubGVuZ3RoKSB7XG4gICAgICByICs9IFwiIFwiICsgbWFwSm9pbihlLmRpcmVjdGl2ZXMsIFwiIFwiLCBnLkRpcmVjdGl2ZSk7XG4gICAgfVxuICAgIHJldHVybiByICsgXCIgXCIgKyBnLlNlbGVjdGlvblNldChlLnNlbGVjdGlvblNldCk7XG4gIH0sXG4gIERpcmVjdGl2ZShlKSB7XG4gICAgdmFyIHIgPSBcIkBcIiArIGUubmFtZS52YWx1ZTtcbiAgICBpZiAoZS5hcmd1bWVudHMgJiYgZS5hcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICByICs9IFwiKFwiICsgbWFwSm9pbihlLmFyZ3VtZW50cywgXCIsIFwiLCBnLkFyZ3VtZW50KSArIFwiKVwiO1xuICAgIH1cbiAgICByZXR1cm4gcjtcbiAgfSxcbiAgTmFtZWRUeXBlOiBlID0+IGUubmFtZS52YWx1ZSxcbiAgTGlzdFR5cGU6IGUgPT4gXCJbXCIgKyBfcHJpbnQoZS50eXBlKSArIFwiXVwiLFxuICBOb25OdWxsVHlwZTogZSA9PiBfcHJpbnQoZS50eXBlKSArIFwiIVwiXG59O1xuXG52YXIgX3ByaW50ID0gZSA9PiBnW2Uua2luZF0oZSk7XG5cbmZ1bmN0aW9uIHByaW50KGUpIHtcbiAgZiA9IFwiXFxuXCI7XG4gIHJldHVybiBnW2Uua2luZF0gPyBnW2Uua2luZF0oZSkgOiBcIlwiO1xufVxuXG5mdW5jdGlvbiB2YWx1ZUZyb21BU1RVbnR5cGVkKGUsIHIpIHtcbiAgc3dpdGNoIChlLmtpbmQpIHtcbiAgIGNhc2UgXCJOdWxsVmFsdWVcIjpcbiAgICByZXR1cm4gbnVsbDtcblxuICAgY2FzZSBcIkludFZhbHVlXCI6XG4gICAgcmV0dXJuIHBhcnNlSW50KGUudmFsdWUsIDEwKTtcblxuICAgY2FzZSBcIkZsb2F0VmFsdWVcIjpcbiAgICByZXR1cm4gcGFyc2VGbG9hdChlLnZhbHVlKTtcblxuICAgY2FzZSBcIlN0cmluZ1ZhbHVlXCI6XG4gICBjYXNlIFwiRW51bVZhbHVlXCI6XG4gICBjYXNlIFwiQm9vbGVhblZhbHVlXCI6XG4gICAgcmV0dXJuIGUudmFsdWU7XG5cbiAgIGNhc2UgXCJMaXN0VmFsdWVcIjpcbiAgICB2YXIgbiA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwLCB0ID0gZS52YWx1ZXMubGVuZ3RoOyBpIDwgdDsgaSsrKSB7XG4gICAgICBuLnB1c2godmFsdWVGcm9tQVNUVW50eXBlZChlLnZhbHVlc1tpXSwgcikpO1xuICAgIH1cbiAgICByZXR1cm4gbjtcblxuICAgY2FzZSBcIk9iamVjdFZhbHVlXCI6XG4gICAgdmFyIGEgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIGZvciAodmFyIGwgPSAwLCBvID0gZS5maWVsZHMubGVuZ3RoOyBsIDwgbzsgbCsrKSB7XG4gICAgICB2YXIgdSA9IGUuZmllbGRzW2xdO1xuICAgICAgYVt1Lm5hbWUudmFsdWVdID0gdmFsdWVGcm9tQVNUVW50eXBlZCh1LnZhbHVlLCByKTtcbiAgICB9XG4gICAgcmV0dXJuIGE7XG5cbiAgIGNhc2UgXCJWYXJpYWJsZVwiOlxuICAgIHJldHVybiByICYmIHJbZS5uYW1lLnZhbHVlXTtcbiAgfVxufVxuXG5mdW5jdGlvbiB2YWx1ZUZyb21UeXBlTm9kZShlLCByLCBuKSB7XG4gIGlmIChcIlZhcmlhYmxlXCIgPT09IGUua2luZCkge1xuICAgIHJldHVybiBuID8gdmFsdWVGcm9tVHlwZU5vZGUobltlLm5hbWUudmFsdWVdLCByLCBuKSA6IHZvaWQgMDtcbiAgfSBlbHNlIGlmIChcIk5vbk51bGxUeXBlXCIgPT09IHIua2luZCkge1xuICAgIHJldHVybiBcIk51bGxWYWx1ZVwiICE9PSBlLmtpbmQgPyB2YWx1ZUZyb21UeXBlTm9kZShlLCByLCBuKSA6IHZvaWQgMDtcbiAgfSBlbHNlIGlmIChcIk51bGxWYWx1ZVwiID09PSBlLmtpbmQpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfSBlbHNlIGlmIChcIkxpc3RUeXBlXCIgPT09IHIua2luZCkge1xuICAgIGlmIChcIkxpc3RWYWx1ZVwiID09PSBlLmtpbmQpIHtcbiAgICAgIHZhciBpID0gW107XG4gICAgICBmb3IgKHZhciB0ID0gMCwgYSA9IGUudmFsdWVzLmxlbmd0aDsgdCA8IGE7IHQrKykge1xuICAgICAgICB2YXIgbCA9IHZhbHVlRnJvbVR5cGVOb2RlKGUudmFsdWVzW3RdLCByLnR5cGUsIG4pO1xuICAgICAgICBpZiAodm9pZCAwID09PSBsKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGkucHVzaChsKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGk7XG4gICAgfVxuICB9IGVsc2UgaWYgKFwiTmFtZWRUeXBlXCIgPT09IHIua2luZCkge1xuICAgIHN3aXRjaCAoci5uYW1lLnZhbHVlKSB7XG4gICAgIGNhc2UgXCJJbnRcIjpcbiAgICAgY2FzZSBcIkZsb2F0XCI6XG4gICAgIGNhc2UgXCJTdHJpbmdcIjpcbiAgICAgY2FzZSBcIkJvb2xcIjpcbiAgICAgIHJldHVybiByLm5hbWUudmFsdWUgKyBcIlZhbHVlXCIgPT09IGUua2luZCA/IHZhbHVlRnJvbUFTVFVudHlwZWQoZSwgbikgOiB2b2lkIDA7XG5cbiAgICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiB2YWx1ZUZyb21BU1RVbnR5cGVkKGUsIG4pO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBpc1NlbGVjdGlvbk5vZGUoZSkge1xuICByZXR1cm4gXCJGaWVsZFwiID09PSBlLmtpbmQgfHwgXCJGcmFnbWVudFNwcmVhZFwiID09PSBlLmtpbmQgfHwgXCJJbmxpbmVGcmFnbWVudFwiID09PSBlLmtpbmQ7XG59XG5cbmZ1bmN0aW9uIFNvdXJjZShlLCByLCBuKSB7XG4gIHJldHVybiB7XG4gICAgYm9keTogZSxcbiAgICBuYW1lOiByLFxuICAgIGxvY2F0aW9uT2Zmc2V0OiBuIHx8IHtcbiAgICAgIGxpbmU6IDEsXG4gICAgICBjb2x1bW46IDFcbiAgICB9XG4gIH07XG59XG5cbmV4cG9ydCB7IGMgYXMgQlJFQUssIEdyYXBoUUxFcnJvciwgZSBhcyBLaW5kLCByIGFzIE9wZXJhdGlvblR5cGVOb2RlLCBTb3VyY2UsIGlzU2VsZWN0aW9uTm9kZSwgcGFyc2UsIHBhcnNlVHlwZSwgcGFyc2VWYWx1ZSwgcHJpbnQsIHByaW50QmxvY2tTdHJpbmcsIHByaW50U3RyaW5nLCB2YWx1ZUZyb21BU1RVbnR5cGVkLCB2YWx1ZUZyb21UeXBlTm9kZSwgdmlzaXQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdyYXBocWwud2ViLm1qcy5tYXBcbiJdLCJuYW1lcyI6WyJlIiwiTkFNRSIsIkRPQ1VNRU5UIiwiT1BFUkFUSU9OX0RFRklOSVRJT04iLCJWQVJJQUJMRV9ERUZJTklUSU9OIiwiU0VMRUNUSU9OX1NFVCIsIkZJRUxEIiwiQVJHVU1FTlQiLCJGUkFHTUVOVF9TUFJFQUQiLCJJTkxJTkVfRlJBR01FTlQiLCJGUkFHTUVOVF9ERUZJTklUSU9OIiwiVkFSSUFCTEUiLCJJTlQiLCJGTE9BVCIsIlNUUklORyIsIkJPT0xFQU4iLCJOVUxMIiwiRU5VTSIsIkxJU1QiLCJPQkpFQ1QiLCJPQkpFQ1RfRklFTEQiLCJESVJFQ1RJVkUiLCJOQU1FRF9UWVBFIiwiTElTVF9UWVBFIiwiTk9OX05VTExfVFlQRSIsInIiLCJRVUVSWSIsIk1VVEFUSU9OIiwiU1VCU0NSSVBUSU9OIiwiR3JhcGhRTEVycm9yIiwiRXJyb3IiLCJjb25zdHJ1Y3RvciIsIm4iLCJpIiwidCIsImEiLCJsIiwibmFtZSIsIm1lc3NhZ2UiLCJwYXRoIiwibm9kZXMiLCJBcnJheSIsImlzQXJyYXkiLCJzb3VyY2UiLCJwb3NpdGlvbnMiLCJvcmlnaW5hbEVycm9yIiwibyIsInUiLCJleHRlbnNpb25zIiwidG9KU09OIiwidG9TdHJpbmciLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsImVycm9yIiwiYWR2YW5jZSIsImxhc3RJbmRleCIsInRlc3QiLCJzbGljZSIsImJsb2NrU3RyaW5nIiwic3BsaXQiLCJsZW5ndGgiLCJyZXBsYWNlIiwiaWdub3JlZCIsImNoYXJDb2RlQXQiLCJSZWdFeHAiLCJDb25zdCIsIlZhciIsIkludCIsIkZsb2F0IiwiQmxvY2tTdHJpbmciLCJTdHJpbmciLCJFbnVtIiwidmFsdWUiLCJkIiwicHVzaCIsImtpbmQiLCJ2YWx1ZXMiLCJzIiwiZmllbGRzIiwiZXhlYyIsInYiLCJibG9jayIsIkpTT04iLCJwYXJzZSIsImFyZ3VtZW50c18iLCJkaXJlY3RpdmVzIiwiYXJndW1lbnRzIiwidHlwZSIsIlNwcmVhZCIsIk5hbWUiLCJzZWxlY3Rpb25TZXQiLCJ0eXBlQ29uZGl0aW9uIiwiYyIsImYiLCJhbGlhcyIsInNlbGVjdGlvbnMiLCJmcmFnbWVudERlZmluaXRpb24iLCJvcGVyYXRpb25EZWZpbml0aW9uIiwidmFyaWFibGVEZWZpbml0aW9ucyIsInZhcmlhYmxlIiwiZGVmYXVsdFZhbHVlIiwib3BlcmF0aW9uIiwiZG9jdW1lbnQiLCJkZWZpbml0aW9ucyIsImxvYyIsInN0YXJ0IiwiZW5kIiwic3RhcnRUb2tlbiIsImVuZFRva2VuIiwiYm9keSIsImxvY2F0aW9uT2Zmc2V0IiwibGluZSIsImNvbHVtbiIsIm5vTG9jYXRpb24iLCJwYXJzZVZhbHVlIiwicGFyc2VUeXBlIiwidmlzaXQiLCJ0cmF2ZXJzZSIsImVudGVyIiwiY2FsbCIsImciLCJtIiwicG9wIiwicCIsImxlYXZlIiwiaCIsIm1hcEpvaW4iLCJwcmludFN0cmluZyIsInN0cmluZ2lmeSIsInByaW50QmxvY2tTdHJpbmciLCJPcGVyYXRpb25EZWZpbml0aW9uIiwiVmFyaWFibGVEZWZpbml0aW9uIiwiRGlyZWN0aXZlIiwiU2VsZWN0aW9uU2V0IiwiVmFyaWFibGUiLCJfcHJpbnQiLCJGaWVsZCIsIkFyZ3VtZW50IiwiU3RyaW5nVmFsdWUiLCJCb29sZWFuVmFsdWUiLCJOdWxsVmFsdWUiLCJJbnRWYWx1ZSIsIkZsb2F0VmFsdWUiLCJFbnVtVmFsdWUiLCJMaXN0VmFsdWUiLCJPYmplY3RWYWx1ZSIsIk9iamVjdEZpZWxkIiwiRG9jdW1lbnQiLCJGcmFnbWVudFNwcmVhZCIsIklubGluZUZyYWdtZW50IiwiRnJhZ21lbnREZWZpbml0aW9uIiwiTmFtZWRUeXBlIiwiTGlzdFR5cGUiLCJOb25OdWxsVHlwZSIsInByaW50IiwidmFsdWVGcm9tQVNUVW50eXBlZCIsInBhcnNlSW50IiwicGFyc2VGbG9hdCIsIk9iamVjdCIsImNyZWF0ZSIsInZhbHVlRnJvbVR5cGVOb2RlIiwiaXNTZWxlY3Rpb25Ob2RlIiwiU291cmNlIiwiQlJFQUsiLCJLaW5kIiwiT3BlcmF0aW9uVHlwZU5vZGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@0no-co/graphql.web/dist/graphql.web.mjs\n");

/***/ })

};
;