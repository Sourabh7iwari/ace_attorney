"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@urql";
exports.ids = ["vendor-chunks/@urql"];
exports.modules = {

/***/ "(ssr)/./node_modules/@urql/core/dist/urql-core-chunk.mjs":
/*!**********************************************************!*\
  !*** ./node_modules/@urql/core/dist/urql-core-chunk.mjs ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   C: () => (/* binding */ CombinedError),\n/* harmony export */   a: () => (/* binding */ makeFetchBody),\n/* harmony export */   b: () => (/* binding */ makeErrorResult),\n/* harmony export */   c: () => (/* binding */ mergeResultPatch),\n/* harmony export */   d: () => (/* binding */ makeFetchURL),\n/* harmony export */   e: () => (/* binding */ makeFetchOptions),\n/* harmony export */   f: () => (/* binding */ makeFetchSource),\n/* harmony export */   g: () => (/* binding */ getOperationType),\n/* harmony export */   h: () => (/* binding */ createRequest),\n/* harmony export */   i: () => (/* binding */ stringifyVariables),\n/* harmony export */   k: () => (/* binding */ keyDocument),\n/* harmony export */   m: () => (/* binding */ makeResult),\n/* harmony export */   s: () => (/* binding */ stringifyDocument)\n/* harmony export */ });\n/* harmony import */ var _0no_co_graphql_web__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @0no-co/graphql.web */ \"(ssr)/./node_modules/@0no-co/graphql.web/dist/graphql.web.mjs\");\n/* harmony import */ var wonka__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! wonka */ \"(ssr)/./node_modules/wonka/dist/wonka.mjs\");\n\n\nvar rehydrateGraphQlError = (r)=>{\n    if (r && \"string\" == typeof r.message && (r.extensions || \"GraphQLError\" === r.name)) {\n        return r;\n    } else if (\"object\" == typeof r && \"string\" == typeof r.message) {\n        return new _0no_co_graphql_web__WEBPACK_IMPORTED_MODULE_0__.GraphQLError(r.message, r.nodes, r.source, r.positions, r.path, r, r.extensions || {});\n    } else {\n        return new _0no_co_graphql_web__WEBPACK_IMPORTED_MODULE_0__.GraphQLError(r);\n    }\n};\nclass CombinedError extends Error {\n    constructor(e){\n        var r = (e.graphQLErrors || []).map(rehydrateGraphQlError);\n        var t = ((e, r)=>{\n            var t = \"\";\n            if (e) {\n                return `[Network] ${e.message}`;\n            }\n            if (r) {\n                for(var a = 0, n = r.length; a < n; a++){\n                    if (t) {\n                        t += \"\\n\";\n                    }\n                    t += `[GraphQL] ${r[a].message}`;\n                }\n            }\n            return t;\n        })(e.networkError, r);\n        super(t);\n        this.name = \"CombinedError\";\n        this.message = t;\n        this.graphQLErrors = r;\n        this.networkError = e.networkError;\n        this.response = e.response;\n    }\n    toString() {\n        return this.message;\n    }\n}\nvar phash = (e, r)=>{\n    var t = 0 | (r || 5381);\n    for(var a = 0, n = 0 | e.length; a < n; a++){\n        t = (t << 5) + t + e.charCodeAt(a);\n    }\n    return t;\n};\nvar s = new Set;\nvar f = new WeakMap;\nvar stringify = (e, r)=>{\n    if (null === e || s.has(e)) {\n        return \"null\";\n    } else if (\"object\" != typeof e) {\n        return JSON.stringify(e) || \"\";\n    } else if (e.toJSON) {\n        return stringify(e.toJSON(), r);\n    } else if (Array.isArray(e)) {\n        var t = \"[\";\n        for(var a = 0, n = e.length; a < n; a++){\n            if (t.length > 1) {\n                t += \",\";\n            }\n            t += stringify(e[a], r) || \"null\";\n        }\n        return t += \"]\";\n    } else if (!r && (l !== NoopConstructor && e instanceof l || d !== NoopConstructor && e instanceof d)) {\n        return \"null\";\n    }\n    var o = Object.keys(e).sort();\n    if (!o.length && e.constructor && Object.getPrototypeOf(e).constructor !== Object.prototype.constructor) {\n        var i = f.get(e) || Math.random().toString(36).slice(2);\n        f.set(e, i);\n        return stringify({\n            __key: i\n        }, r);\n    }\n    s.add(e);\n    var c = \"{\";\n    for(var v = 0, p = o.length; v < p; v++){\n        var u = stringify(e[o[v]], r);\n        if (u) {\n            if (c.length > 1) {\n                c += \",\";\n            }\n            c += stringify(o[v], r) + \":\" + u;\n        }\n    }\n    s.delete(e);\n    return c += \"}\";\n};\nvar extract = (e, r, t)=>{\n    if (null == t || \"object\" != typeof t || t.toJSON || s.has(t)) {} else if (Array.isArray(t)) {\n        for(var a = 0, n = t.length; a < n; a++){\n            extract(e, `${r}.${a}`, t[a]);\n        }\n    } else if (t instanceof l || t instanceof d) {\n        e.set(r, t);\n    } else {\n        s.add(t);\n        for(var o in t){\n            extract(e, `${r}.${o}`, t[o]);\n        }\n    }\n};\nvar stringifyVariables = (e, r)=>{\n    s.clear();\n    return stringify(e, r || !1);\n};\nclass NoopConstructor {\n}\nvar l = \"undefined\" != typeof File ? File : NoopConstructor;\nvar d = \"undefined\" != typeof Blob ? Blob : NoopConstructor;\nvar c = /(\"{3}[\\s\\S]*\"{3}|\"(?:\\\\.|[^\"])*\")/g;\nvar v = /(?:#[^\\n\\r]+)?(?:[\\r\\n]+|$)/g;\nvar replaceOutsideStrings = (e, r)=>r % 2 == 0 ? e.replace(v, \"\\n\") : e;\nvar sanitizeDocument = (e)=>e.split(c).map(replaceOutsideStrings).join(\"\").trim();\nvar p = new Map;\nvar u = new Map;\nvar stringifyDocument = (e)=>{\n    var t;\n    if (\"string\" == typeof e) {\n        t = sanitizeDocument(e);\n    } else if (e.loc && u.get(e.__key) === e) {\n        t = e.loc.source.body;\n    } else {\n        t = p.get(e) || sanitizeDocument((0,_0no_co_graphql_web__WEBPACK_IMPORTED_MODULE_0__.print)(e));\n        p.set(e, t);\n    }\n    if (\"string\" != typeof e && !e.loc) {\n        e.loc = {\n            start: 0,\n            end: t.length,\n            source: {\n                body: t,\n                name: \"gql\",\n                locationOffset: {\n                    line: 1,\n                    column: 1\n                }\n            }\n        };\n    }\n    return t;\n};\nvar hashDocument = (e)=>{\n    var r;\n    if (e.documentId) {\n        r = phash(e.documentId);\n    } else {\n        r = phash(stringifyDocument(e));\n        if (e.definitions) {\n            var t = getOperationName(e);\n            if (t) {\n                r = phash(`\\n# ${t}`, r);\n            }\n        }\n    }\n    return r;\n};\nvar keyDocument = (e)=>{\n    var r;\n    var a;\n    if (\"string\" == typeof e) {\n        r = hashDocument(e);\n        a = u.get(r) || (0,_0no_co_graphql_web__WEBPACK_IMPORTED_MODULE_0__.parse)(e, {\n            noLocation: !0\n        });\n    } else {\n        r = e.__key || hashDocument(e);\n        a = u.get(r) || e;\n    }\n    if (!a.loc) {\n        stringifyDocument(a);\n    }\n    a.__key = r;\n    u.set(r, a);\n    return a;\n};\nvar createRequest = (e, r, t)=>{\n    var a = r || {};\n    var n = keyDocument(e);\n    var o = stringifyVariables(a, !0);\n    var i = n.__key;\n    if (\"{}\" !== o) {\n        i = phash(o, i);\n    }\n    return {\n        key: i,\n        query: n,\n        variables: a,\n        extensions: t\n    };\n};\nvar getOperationName = (e)=>{\n    for(var r = 0, t = e.definitions.length; r < t; r++){\n        var n = e.definitions[r];\n        if (n.kind === _0no_co_graphql_web__WEBPACK_IMPORTED_MODULE_0__.Kind.OPERATION_DEFINITION) {\n            return n.name ? n.name.value : void 0;\n        }\n    }\n};\nvar getOperationType = (e)=>{\n    for(var r = 0, t = e.definitions.length; r < t; r++){\n        var n = e.definitions[r];\n        if (n.kind === _0no_co_graphql_web__WEBPACK_IMPORTED_MODULE_0__.Kind.OPERATION_DEFINITION) {\n            return n.operation;\n        }\n    }\n};\nvar makeResult = (e, r, t)=>{\n    if (!(\"data\" in r || \"errors\" in r && Array.isArray(r.errors))) {\n        throw new Error(\"No Content\");\n    }\n    var a = \"subscription\" === e.kind;\n    return {\n        operation: e,\n        data: r.data,\n        error: Array.isArray(r.errors) ? new CombinedError({\n            graphQLErrors: r.errors,\n            response: t\n        }) : void 0,\n        extensions: r.extensions ? {\n            ...r.extensions\n        } : void 0,\n        hasNext: null == r.hasNext ? a : r.hasNext,\n        stale: !1\n    };\n};\nvar deepMerge = (e, r)=>{\n    if (\"object\" == typeof e && null != e) {\n        if (Array.isArray(e)) {\n            e = [\n                ...e\n            ];\n            for(var t = 0, a = r.length; t < a; t++){\n                e[t] = deepMerge(e[t], r[t]);\n            }\n            return e;\n        }\n        if (!e.constructor || e.constructor === Object) {\n            e = {\n                ...e\n            };\n            for(var n in r){\n                e[n] = deepMerge(e[n], r[n]);\n            }\n            return e;\n        }\n    }\n    return r;\n};\nvar mergeResultPatch = (e, r, t, a)=>{\n    var n = e.error ? e.error.graphQLErrors : [];\n    var o = !!e.extensions || !!(r.payload || r).extensions;\n    var i = {\n        ...e.extensions,\n        ...(r.payload || r).extensions\n    };\n    var s = r.incremental;\n    if (\"path\" in r) {\n        s = [\n            r\n        ];\n    }\n    var f = {\n        data: e.data\n    };\n    if (s) {\n        var _loop = function() {\n            var e = s[l];\n            if (Array.isArray(e.errors)) {\n                n.push(...e.errors);\n            }\n            if (e.extensions) {\n                Object.assign(i, e.extensions);\n                o = !0;\n            }\n            var r = \"data\";\n            var t = f;\n            var d = [];\n            if (e.path) {\n                d = e.path;\n            } else if (a) {\n                var c = a.find((r)=>r.id === e.id);\n                if (e.subPath) {\n                    d = [\n                        ...c.path,\n                        ...e.subPath\n                    ];\n                } else {\n                    d = c.path;\n                }\n            }\n            for(var v = 0, p = d.length; v < p; r = d[v++]){\n                t = t[r] = Array.isArray(t[r]) ? [\n                    ...t[r]\n                ] : {\n                    ...t[r]\n                };\n            }\n            if (e.items) {\n                var u = +r >= 0 ? r : 0;\n                for(var y = 0, h = e.items.length; y < h; y++){\n                    t[u + y] = deepMerge(t[u + y], e.items[y]);\n                }\n            } else if (void 0 !== e.data) {\n                t[r] = deepMerge(t[r], e.data);\n            }\n        };\n        for(var l = 0, d = s.length; l < d; l++){\n            _loop();\n        }\n    } else {\n        f.data = (r.payload || r).data || e.data;\n        n = r.errors || r.payload && r.payload.errors || n;\n    }\n    return {\n        operation: e.operation,\n        data: f.data,\n        error: n.length ? new CombinedError({\n            graphQLErrors: n,\n            response: t\n        }) : void 0,\n        extensions: o ? i : void 0,\n        hasNext: null != r.hasNext ? r.hasNext : e.hasNext,\n        stale: !1\n    };\n};\nvar makeErrorResult = (e, r, t)=>({\n        operation: e,\n        data: void 0,\n        error: new CombinedError({\n            networkError: r,\n            response: t\n        }),\n        extensions: void 0,\n        hasNext: !1,\n        stale: !1\n    });\nfunction makeFetchBody(e) {\n    var r = {\n        query: void 0,\n        documentId: void 0,\n        operationName: getOperationName(e.query),\n        variables: e.variables || void 0,\n        extensions: e.extensions\n    };\n    if (\"documentId\" in e.query && e.query.documentId && (!e.query.definitions || !e.query.definitions.length)) {\n        r.documentId = e.query.documentId;\n    } else if (!e.extensions || !e.extensions.persistedQuery || e.extensions.persistedQuery.miss) {\n        r.query = stringifyDocument(e.query);\n    }\n    return r;\n}\nvar makeFetchURL = (e, r)=>{\n    var t = \"query\" === e.kind && e.context.preferGetMethod;\n    if (!t || !r) {\n        return e.context.url;\n    }\n    var a = splitOutSearchParams(e.context.url);\n    for(var n in r){\n        var o = r[n];\n        if (o) {\n            a[1].set(n, \"object\" == typeof o ? stringifyVariables(o) : o);\n        }\n    }\n    var i = a.join(\"?\");\n    if (i.length > 2047 && \"force\" !== t) {\n        e.context.preferGetMethod = !1;\n        return e.context.url;\n    }\n    return i;\n};\nvar splitOutSearchParams = (e)=>{\n    var r = e.indexOf(\"?\");\n    return r > -1 ? [\n        e.slice(0, r),\n        new URLSearchParams(e.slice(r + 1))\n    ] : [\n        e,\n        new URLSearchParams\n    ];\n};\nvar serializeBody = (e, r)=>{\n    if (r && !(\"query\" === e.kind && !!e.context.preferGetMethod)) {\n        var t = stringifyVariables(r);\n        var a = ((e)=>{\n            var r = new Map;\n            if (l !== NoopConstructor || d !== NoopConstructor) {\n                s.clear();\n                extract(r, \"variables\", e);\n            }\n            return r;\n        })(r.variables);\n        if (a.size) {\n            var n = new FormData;\n            n.append(\"operations\", t);\n            n.append(\"map\", stringifyVariables({\n                ...[\n                    ...a.keys()\n                ].map((e)=>[\n                        e\n                    ])\n            }));\n            var o = 0;\n            for (var i of a.values()){\n                n.append(\"\" + o++, i);\n            }\n            return n;\n        }\n        return t;\n    }\n};\nvar makeFetchOptions = (e, r)=>{\n    var t = {\n        accept: \"subscription\" === e.kind ? \"text/event-stream, multipart/mixed\" : \"application/graphql-response+json, application/graphql+json, application/json, text/event-stream, multipart/mixed\"\n    };\n    var a = (\"function\" == typeof e.context.fetchOptions ? e.context.fetchOptions() : e.context.fetchOptions) || {};\n    if (a.headers) {\n        if (((e)=>\"has\" in e && !Object.keys(e).length)(a.headers)) {\n            a.headers.forEach((e, r)=>{\n                t[r] = e;\n            });\n        } else if (Array.isArray(a.headers)) {\n            a.headers.forEach((e, r)=>{\n                if (Array.isArray(e)) {\n                    if (t[e[0]]) {\n                        t[e[0]] = `${t[e[0]]},${e[1]}`;\n                    } else {\n                        t[e[0]] = e[1];\n                    }\n                } else {\n                    t[r] = e;\n                }\n            });\n        } else {\n            for(var n in a.headers){\n                t[n.toLowerCase()] = a.headers[n];\n            }\n        }\n    }\n    var o = serializeBody(e, r);\n    if (\"string\" == typeof o && !t[\"content-type\"]) {\n        t[\"content-type\"] = \"application/json\";\n    }\n    return {\n        ...a,\n        method: o ? \"POST\" : \"GET\",\n        body: o,\n        headers: t\n    };\n};\nvar y = \"undefined\" != typeof TextDecoder ? new TextDecoder : null;\nvar h = /boundary=\"?([^=\";]+)\"?/i;\nvar m = /data: ?([^\\n]+)/;\nvar toString = (e)=>\"Buffer\" === e.constructor.name ? e.toString() : y.decode(e);\nasync function* streamBody(e) {\n    if (e.body[Symbol.asyncIterator]) {\n        for await (var r of e.body){\n            yield toString(r);\n        }\n    } else {\n        var t = e.body.getReader();\n        var a;\n        try {\n            while(!(a = await t.read()).done){\n                yield toString(a.value);\n            }\n        } finally{\n            t.cancel();\n        }\n    }\n}\nasync function* split(e, r) {\n    var t = \"\";\n    var a;\n    for await (var n of e){\n        t += n;\n        while((a = t.indexOf(r)) > -1){\n            yield t.slice(0, a);\n            t = t.slice(a + r.length);\n        }\n    }\n}\nasync function* fetchOperation(e, r, t) {\n    var a = !0;\n    var n = null;\n    var o;\n    try {\n        yield await Promise.resolve();\n        var i = (o = await (e.context.fetch || fetch)(r, t)).headers.get(\"Content-Type\") || \"\";\n        var s;\n        if (/multipart\\/mixed/i.test(i)) {\n            s = async function* parseMultipartMixed(e, r) {\n                var t = e.match(h);\n                var a = \"--\" + (t ? t[1] : \"-\");\n                var n = !0;\n                var o;\n                for await (var i of split(streamBody(r), \"\\r\\n\" + a)){\n                    if (n) {\n                        n = !1;\n                        var s = i.indexOf(a);\n                        if (s > -1) {\n                            i = i.slice(s + a.length);\n                        } else {\n                            continue;\n                        }\n                    }\n                    try {\n                        yield o = JSON.parse(i.slice(i.indexOf(\"\\r\\n\\r\\n\") + 4));\n                    } catch (e) {\n                        if (!o) {\n                            throw e;\n                        }\n                    }\n                    if (o && !1 === o.hasNext) {\n                        break;\n                    }\n                }\n                if (o && !1 !== o.hasNext) {\n                    yield {\n                        hasNext: !1\n                    };\n                }\n            }(i, o);\n        } else if (/text\\/event-stream/i.test(i)) {\n            s = async function* parseEventStream(e) {\n                var r;\n                for await (var t of split(streamBody(e), \"\\n\\n\")){\n                    var a = t.match(m);\n                    if (a) {\n                        var n = a[1];\n                        try {\n                            yield r = JSON.parse(n);\n                        } catch (e) {\n                            if (!r) {\n                                throw e;\n                            }\n                        }\n                        if (r && !1 === r.hasNext) {\n                            break;\n                        }\n                    }\n                }\n                if (r && !1 !== r.hasNext) {\n                    yield {\n                        hasNext: !1\n                    };\n                }\n            }(o);\n        } else if (!/text\\//i.test(i)) {\n            s = async function* parseJSON(e) {\n                yield JSON.parse(await e.text());\n            }(o);\n        } else {\n            s = async function* parseMaybeJSON(e) {\n                var r = await e.text();\n                try {\n                    var t = JSON.parse(r);\n                    if (true) {\n                        console.warn('Found response with content-type \"text/plain\" but it had a valid \"application/json\" response.');\n                    }\n                    yield t;\n                } catch (e) {\n                    throw new Error(r);\n                }\n            }(o);\n        }\n        var f;\n        for await (var l of s){\n            if (l.pending && !n) {\n                f = l.pending;\n            } else if (l.pending) {\n                f = [\n                    ...f,\n                    ...l.pending\n                ];\n            }\n            n = n ? mergeResultPatch(n, l, o, f) : makeResult(e, l, o);\n            a = !1;\n            yield n;\n            a = !0;\n        }\n        if (!n) {\n            yield n = makeResult(e, {}, o);\n        }\n    } catch (r) {\n        if (!a) {\n            throw r;\n        }\n        yield makeErrorResult(e, o && (o.status < 200 || o.status >= 300) && o.statusText ? new Error(o.statusText) : r, o);\n    }\n}\nfunction makeFetchSource(e, r, t) {\n    var a;\n    if (\"undefined\" != typeof AbortController) {\n        t.signal = (a = new AbortController).signal;\n    }\n    return (0,wonka__WEBPACK_IMPORTED_MODULE_1__.onEnd)(()=>{\n        if (a) {\n            a.abort();\n        }\n    })((0,wonka__WEBPACK_IMPORTED_MODULE_1__.filter)((e)=>!!e)((0,wonka__WEBPACK_IMPORTED_MODULE_1__.fromAsyncIterable)(fetchOperation(e, r, t))));\n}\n //# sourceMappingURL=urql-core-chunk.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@urql/core/dist/urql-core-chunk.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@urql/core/dist/urql-core.mjs":
/*!****************************************************!*\
  !*** ./node_modules/@urql/core/dist/urql-core.mjs ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Client: () => (/* binding */ C),\n/* harmony export */   CombinedError: () => (/* reexport safe */ _urql_core_chunk_mjs__WEBPACK_IMPORTED_MODULE_0__.C),\n/* harmony export */   cacheExchange: () => (/* binding */ cacheExchange),\n/* harmony export */   composeExchanges: () => (/* binding */ composeExchanges),\n/* harmony export */   createClient: () => (/* binding */ Q),\n/* harmony export */   createRequest: () => (/* reexport safe */ _urql_core_chunk_mjs__WEBPACK_IMPORTED_MODULE_0__.h),\n/* harmony export */   debugExchange: () => (/* binding */ debugExchange),\n/* harmony export */   errorExchange: () => (/* binding */ mapExchange),\n/* harmony export */   fetchExchange: () => (/* binding */ fetchExchange),\n/* harmony export */   formatDocument: () => (/* binding */ formatDocument),\n/* harmony export */   gql: () => (/* binding */ gql),\n/* harmony export */   makeErrorResult: () => (/* reexport safe */ _urql_core_chunk_mjs__WEBPACK_IMPORTED_MODULE_0__.b),\n/* harmony export */   makeOperation: () => (/* binding */ makeOperation),\n/* harmony export */   makeResult: () => (/* reexport safe */ _urql_core_chunk_mjs__WEBPACK_IMPORTED_MODULE_0__.m),\n/* harmony export */   mapExchange: () => (/* binding */ mapExchange),\n/* harmony export */   mergeResultPatch: () => (/* reexport safe */ _urql_core_chunk_mjs__WEBPACK_IMPORTED_MODULE_0__.c),\n/* harmony export */   ssrExchange: () => (/* binding */ ssrExchange),\n/* harmony export */   stringifyDocument: () => (/* reexport safe */ _urql_core_chunk_mjs__WEBPACK_IMPORTED_MODULE_0__.s),\n/* harmony export */   stringifyVariables: () => (/* reexport safe */ _urql_core_chunk_mjs__WEBPACK_IMPORTED_MODULE_0__.i),\n/* harmony export */   subscriptionExchange: () => (/* binding */ subscriptionExchange)\n/* harmony export */ });\n/* harmony import */ var _0no_co_graphql_web__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @0no-co/graphql.web */ \"(ssr)/./node_modules/@0no-co/graphql.web/dist/graphql.web.mjs\");\n/* harmony import */ var _urql_core_chunk_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./urql-core-chunk.mjs */ \"(ssr)/./node_modules/@urql/core/dist/urql-core-chunk.mjs\");\n/* harmony import */ var wonka__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! wonka */ \"(ssr)/./node_modules/wonka/dist/wonka.mjs\");\n\n\n\n\nvar collectTypes = (e, r)=>{\n    if (Array.isArray(e)) {\n        for(var t = 0, n = e.length; t < n; t++){\n            collectTypes(e[t], r);\n        }\n    } else if (\"object\" == typeof e && null !== e) {\n        for(var a in e){\n            if (\"__typename\" === a && \"string\" == typeof e[a]) {\n                r.add(e[a]);\n            } else {\n                collectTypes(e[a], r);\n            }\n        }\n    }\n    return r;\n};\nvar formatNode = (r)=>{\n    if (\"definitions\" in r) {\n        var t = [];\n        for(var n = 0, a = r.definitions.length; n < a; n++){\n            var i = formatNode(r.definitions[n]);\n            t.push(i);\n        }\n        return {\n            ...r,\n            definitions: t\n        };\n    }\n    if (\"directives\" in r && r.directives && r.directives.length) {\n        var o = [];\n        var s = {};\n        for(var c = 0, u = r.directives.length; c < u; c++){\n            var p = r.directives[c];\n            var d = p.name.value;\n            if (\"_\" !== d[0]) {\n                o.push(p);\n            } else {\n                d = d.slice(1);\n            }\n            s[d] = p;\n        }\n        r = {\n            ...r,\n            directives: o,\n            _directives: s\n        };\n    }\n    if (\"selectionSet\" in r) {\n        var l = [];\n        var v = r.kind === _0no_co_graphql_web__WEBPACK_IMPORTED_MODULE_1__.Kind.OPERATION_DEFINITION;\n        if (r.selectionSet) {\n            for(var f = 0, h = r.selectionSet.selections.length; f < h; f++){\n                var k = r.selectionSet.selections[f];\n                v = v || k.kind === _0no_co_graphql_web__WEBPACK_IMPORTED_MODULE_1__.Kind.FIELD && \"__typename\" === k.name.value && !k.alias;\n                var y = formatNode(k);\n                l.push(y);\n            }\n            if (!v) {\n                l.push({\n                    kind: _0no_co_graphql_web__WEBPACK_IMPORTED_MODULE_1__.Kind.FIELD,\n                    name: {\n                        kind: _0no_co_graphql_web__WEBPACK_IMPORTED_MODULE_1__.Kind.NAME,\n                        value: \"__typename\"\n                    },\n                    _generated: !0\n                });\n            }\n            return {\n                ...r,\n                selectionSet: {\n                    ...r.selectionSet,\n                    selections: l\n                }\n            };\n        }\n    }\n    return r;\n};\nvar I = new Map;\nvar formatDocument = (e)=>{\n    var t = (0,_urql_core_chunk_mjs__WEBPACK_IMPORTED_MODULE_0__.k)(e);\n    var n = I.get(t.__key);\n    if (!n) {\n        I.set(t.__key, n = formatNode(t));\n        Object.defineProperty(n, \"__key\", {\n            value: t.__key,\n            enumerable: !1\n        });\n    }\n    return n;\n};\nfunction withPromise(e) {\n    var source$ = (r)=>e(r);\n    source$.toPromise = ()=>(0,wonka__WEBPACK_IMPORTED_MODULE_2__.toPromise)((0,wonka__WEBPACK_IMPORTED_MODULE_2__.take)(1)((0,wonka__WEBPACK_IMPORTED_MODULE_2__.filter)((e)=>!e.stale && !e.hasNext)(source$)));\n    source$.then = (e, r)=>source$.toPromise().then(e, r);\n    source$.subscribe = (e)=>(0,wonka__WEBPACK_IMPORTED_MODULE_2__.subscribe)(e)(source$);\n    return source$;\n}\nfunction makeOperation(e, r, t) {\n    return {\n        ...r,\n        kind: e,\n        context: r.context ? {\n            ...r.context,\n            ...t\n        } : t || r.context\n    };\n}\nvar addMetadata = (e, r)=>makeOperation(e.kind, e, {\n        meta: {\n            ...e.context.meta,\n            ...r\n        }\n    });\nvar noop = ()=>{};\nfunction gql(n) {\n    var a = new Map;\n    var i = [];\n    var o = [];\n    var s = Array.isArray(n) ? n[0] : n || \"\";\n    for(var c = 1; c < arguments.length; c++){\n        var u = arguments[c];\n        if (u && u.definitions) {\n            o.push(u);\n        } else {\n            s += u;\n        }\n        s += arguments[0][c];\n    }\n    o.unshift((0,_urql_core_chunk_mjs__WEBPACK_IMPORTED_MODULE_0__.k)(s));\n    for(var p = 0; p < o.length; p++){\n        for(var d = 0; d < o[p].definitions.length; d++){\n            var l = o[p].definitions[d];\n            if (l.kind === _0no_co_graphql_web__WEBPACK_IMPORTED_MODULE_1__.Kind.FRAGMENT_DEFINITION) {\n                var v = l.name.value;\n                var f = (0,_urql_core_chunk_mjs__WEBPACK_IMPORTED_MODULE_0__.s)(l);\n                if (!a.has(v)) {\n                    a.set(v, f);\n                    i.push(l);\n                } else if ( true && a.get(v) !== f) {\n                    console.warn(\"[WARNING: Duplicate Fragment] A fragment with name `\" + v + \"` already exists in this document.\\nWhile fragment names may not be unique across your source, each name must be unique per document.\");\n                }\n            } else {\n                i.push(l);\n            }\n        }\n    }\n    return (0,_urql_core_chunk_mjs__WEBPACK_IMPORTED_MODULE_0__.k)({\n        kind: _0no_co_graphql_web__WEBPACK_IMPORTED_MODULE_1__.Kind.DOCUMENT,\n        definitions: i\n    });\n}\nvar shouldSkip = ({ kind: e })=>\"mutation\" !== e && \"query\" !== e;\nvar mapTypeNames = (e)=>{\n    var r = formatDocument(e.query);\n    if (r !== e.query) {\n        var t = makeOperation(e.kind, e);\n        t.query = r;\n        return t;\n    } else {\n        return e;\n    }\n};\nvar cacheExchange = ({ forward: e, client: r, dispatchDebug: t })=>{\n    var a = new Map;\n    var i = new Map;\n    var isOperationCached = (e)=>\"query\" === e.kind && \"network-only\" !== e.context.requestPolicy && (\"cache-only\" === e.context.requestPolicy || a.has(e.key));\n    return (o)=>{\n        var s = (0,wonka__WEBPACK_IMPORTED_MODULE_2__.map)((e)=>{\n            var i = a.get(e.key);\n             true && t({\n                operation: e,\n                ...i ? {\n                    type: \"cacheHit\",\n                    message: \"The result was successfully retried from the cache\"\n                } : {\n                    type: \"cacheMiss\",\n                    message: \"The result could not be retrieved from the cache\"\n                },\n                source: \"cacheExchange\"\n            });\n            var o = i || (0,_urql_core_chunk_mjs__WEBPACK_IMPORTED_MODULE_0__.m)(e, {\n                data: null\n            });\n            o = {\n                ...o,\n                operation: addMetadata(e, {\n                    cacheOutcome: i ? \"hit\" : \"miss\"\n                })\n            };\n            if (\"cache-and-network\" === e.context.requestPolicy) {\n                o.stale = !0;\n                reexecuteOperation(r, e);\n            }\n            return o;\n        })((0,wonka__WEBPACK_IMPORTED_MODULE_2__.filter)((e)=>!shouldSkip(e) && isOperationCached(e))(o));\n        var c = (0,wonka__WEBPACK_IMPORTED_MODULE_2__.tap)((e)=>{\n            var { operation: n } = e;\n            if (!n) {\n                return;\n            }\n            var o = n.context.additionalTypenames || [];\n            if (\"subscription\" !== e.operation.kind) {\n                o = ((e)=>[\n                        ...collectTypes(e, new Set)\n                    ])(e.data).concat(o);\n            }\n            if (\"mutation\" === e.operation.kind || \"subscription\" === e.operation.kind) {\n                var s = new Set;\n                 true && t({\n                    type: \"cacheInvalidation\",\n                    message: `The following typenames have been invalidated: ${o}`,\n                    operation: n,\n                    data: {\n                        typenames: o,\n                        response: e\n                    },\n                    source: \"cacheExchange\"\n                });\n                for(var c = 0; c < o.length; c++){\n                    var u = o[c];\n                    var p = i.get(u);\n                    if (!p) {\n                        i.set(u, p = new Set);\n                    }\n                    for (var d of p.values()){\n                        s.add(d);\n                    }\n                    p.clear();\n                }\n                for (var l of s.values()){\n                    if (a.has(l)) {\n                        n = a.get(l).operation;\n                        a.delete(l);\n                        reexecuteOperation(r, n);\n                    }\n                }\n            } else if (\"query\" === n.kind && e.data) {\n                a.set(n.key, e);\n                for(var v = 0; v < o.length; v++){\n                    var f = o[v];\n                    var h = i.get(f);\n                    if (!h) {\n                        i.set(f, h = new Set);\n                    }\n                    h.add(n.key);\n                }\n            }\n        })(e((0,wonka__WEBPACK_IMPORTED_MODULE_2__.filter)((e)=>\"query\" !== e.kind || \"cache-only\" !== e.context.requestPolicy)((0,wonka__WEBPACK_IMPORTED_MODULE_2__.map)((e)=>addMetadata(e, {\n                cacheOutcome: \"miss\"\n            }))((0,wonka__WEBPACK_IMPORTED_MODULE_2__.merge)([\n            (0,wonka__WEBPACK_IMPORTED_MODULE_2__.map)(mapTypeNames)((0,wonka__WEBPACK_IMPORTED_MODULE_2__.filter)((e)=>!shouldSkip(e) && !isOperationCached(e))(o)),\n            (0,wonka__WEBPACK_IMPORTED_MODULE_2__.filter)((e)=>shouldSkip(e))(o)\n        ])))));\n        return (0,wonka__WEBPACK_IMPORTED_MODULE_2__.merge)([\n            s,\n            c\n        ]);\n    };\n};\nvar reexecuteOperation = (e, r)=>e.reexecuteOperation(makeOperation(r.kind, r, {\n        requestPolicy: \"network-only\"\n    }));\nvar T = new Set;\nvar ssrExchange = (e = {})=>{\n    var r = !!e.staleWhileRevalidate;\n    var t = !!e.includeExtensions;\n    var n = {};\n    var i = [];\n    var invalidate = (e)=>{\n        i.push(e.operation.key);\n        if (1 === i.length) {\n            Promise.resolve().then(()=>{\n                var e;\n                while(e = i.shift()){\n                    n[e] = null;\n                }\n            });\n        }\n    };\n    var ssr = ({ client: i, forward: o })=>(s)=>{\n            var c = e && \"boolean\" == typeof e.isClient ? !!e.isClient : !i.suspense;\n            var u = o((0,wonka__WEBPACK_IMPORTED_MODULE_2__.map)(mapTypeNames)((0,wonka__WEBPACK_IMPORTED_MODULE_2__.filter)((e)=>\"teardown\" === e.kind || !n[e.key] || !!n[e.key].hasNext || \"network-only\" === e.context.requestPolicy)(s)));\n            var p = (0,wonka__WEBPACK_IMPORTED_MODULE_2__.map)((e)=>{\n                var o = ((e, r, t)=>({\n                        operation: e,\n                        data: r.data ? JSON.parse(r.data) : void 0,\n                        extensions: t && r.extensions ? JSON.parse(r.extensions) : void 0,\n                        error: r.error ? new _urql_core_chunk_mjs__WEBPACK_IMPORTED_MODULE_0__.C({\n                            networkError: r.error.networkError ? new Error(r.error.networkError) : void 0,\n                            graphQLErrors: r.error.graphQLErrors\n                        }) : void 0,\n                        stale: !1,\n                        hasNext: !!r.hasNext\n                    }))(e, n[e.key], t);\n                if (r && !T.has(e.key)) {\n                    o.stale = !0;\n                    T.add(e.key);\n                    reexecuteOperation(i, e);\n                }\n                return {\n                    ...o,\n                    operation: addMetadata(e, {\n                        cacheOutcome: \"hit\"\n                    })\n                };\n            })((0,wonka__WEBPACK_IMPORTED_MODULE_2__.filter)((e)=>\"teardown\" !== e.kind && !!n[e.key] && \"network-only\" !== e.context.requestPolicy)(s));\n            if (!c) {\n                u = (0,wonka__WEBPACK_IMPORTED_MODULE_2__.tap)((e)=>{\n                    var { operation: r } = e;\n                    if (\"mutation\" !== r.kind) {\n                        var a = ((e, r)=>{\n                            var t = {\n                                hasNext: e.hasNext\n                            };\n                            if (void 0 !== e.data) {\n                                t.data = JSON.stringify(e.data);\n                            }\n                            if (r && void 0 !== e.extensions) {\n                                t.extensions = JSON.stringify(e.extensions);\n                            }\n                            if (e.error) {\n                                t.error = {\n                                    graphQLErrors: e.error.graphQLErrors.map((e)=>{\n                                        if (!e.path && !e.extensions) {\n                                            return e.message;\n                                        }\n                                        return {\n                                            message: e.message,\n                                            path: e.path,\n                                            extensions: e.extensions\n                                        };\n                                    })\n                                };\n                                if (e.error.networkError) {\n                                    t.error.networkError = \"\" + e.error.networkError;\n                                }\n                            }\n                            return t;\n                        })(e, t);\n                        n[r.key] = a;\n                    }\n                })(u);\n            } else {\n                p = (0,wonka__WEBPACK_IMPORTED_MODULE_2__.tap)(invalidate)(p);\n            }\n            return (0,wonka__WEBPACK_IMPORTED_MODULE_2__.merge)([\n                u,\n                p\n            ]);\n        };\n    ssr.restoreData = (e)=>{\n        for(var r in e){\n            if (null !== n[r]) {\n                n[r] = e[r];\n            }\n        }\n    };\n    ssr.extractData = ()=>{\n        var e = {};\n        for(var r in n){\n            if (null != n[r]) {\n                e[r] = n[r];\n            }\n        }\n        return e;\n    };\n    if (e && e.initialState) {\n        ssr.restoreData(e.initialState);\n    }\n    return ssr;\n};\nvar subscriptionExchange = ({ forwardSubscription: e, enableAllOperations: r, isSubscriptionOperation: t })=>({ client: a, forward: i })=>{\n        var u = t || ((e)=>\"subscription\" === e.kind || !!r && (\"query\" === e.kind || \"mutation\" === e.kind));\n        return (r)=>{\n            var t = (0,wonka__WEBPACK_IMPORTED_MODULE_2__.mergeMap)((t)=>{\n                var { key: i } = t;\n                var u = (0,wonka__WEBPACK_IMPORTED_MODULE_2__.filter)((e)=>\"teardown\" === e.kind && e.key === i)(r);\n                return (0,wonka__WEBPACK_IMPORTED_MODULE_2__.takeUntil)(u)(((r)=>{\n                    var t = e((0,_urql_core_chunk_mjs__WEBPACK_IMPORTED_MODULE_0__.a)(r), r);\n                    return (0,wonka__WEBPACK_IMPORTED_MODULE_2__.make)((e)=>{\n                        var i = !1;\n                        var o;\n                        var u;\n                        function nextResult(t) {\n                            e.next(u = u ? (0,_urql_core_chunk_mjs__WEBPACK_IMPORTED_MODULE_0__.c)(u, t) : (0,_urql_core_chunk_mjs__WEBPACK_IMPORTED_MODULE_0__.m)(r, t));\n                        }\n                        Promise.resolve().then(()=>{\n                            if (i) {\n                                return;\n                            }\n                            o = t.subscribe({\n                                next: nextResult,\n                                error (t) {\n                                    if (Array.isArray(t)) {\n                                        nextResult({\n                                            errors: t\n                                        });\n                                    } else {\n                                        e.next((0,_urql_core_chunk_mjs__WEBPACK_IMPORTED_MODULE_0__.b)(r, t));\n                                    }\n                                    e.complete();\n                                },\n                                complete () {\n                                    if (!i) {\n                                        i = !0;\n                                        if (\"subscription\" === r.kind) {\n                                            a.reexecuteOperation(makeOperation(\"teardown\", r, r.context));\n                                        }\n                                        if (u && u.hasNext) {\n                                            nextResult({\n                                                hasNext: !1\n                                            });\n                                        }\n                                        e.complete();\n                                    }\n                                }\n                            });\n                        });\n                        return ()=>{\n                            i = !0;\n                            if (o) {\n                                o.unsubscribe();\n                            }\n                        };\n                    });\n                })(t));\n            })((0,wonka__WEBPACK_IMPORTED_MODULE_2__.filter)((e)=>\"teardown\" !== e.kind && u(e))(r));\n            var p = i((0,wonka__WEBPACK_IMPORTED_MODULE_2__.filter)((e)=>\"teardown\" === e.kind || !u(e))(r));\n            return (0,wonka__WEBPACK_IMPORTED_MODULE_2__.merge)([\n                t,\n                p\n            ]);\n        };\n    };\nvar debugExchange = ({ forward: e })=>{\n    if (false) {} else {\n        return (r)=>(0,wonka__WEBPACK_IMPORTED_MODULE_2__.tap)((e)=>console.log(\"[Exchange debug]: Completed operation: \", e))(e((0,wonka__WEBPACK_IMPORTED_MODULE_2__.tap)((e)=>console.log(\"[Exchange debug]: Incoming operation: \", e))(r)));\n    }\n};\nvar fetchExchange = ({ forward: e, dispatchDebug: r })=>(t)=>{\n        var n = (0,wonka__WEBPACK_IMPORTED_MODULE_2__.mergeMap)((e)=>{\n            var n = (0,_urql_core_chunk_mjs__WEBPACK_IMPORTED_MODULE_0__.a)(e);\n            var a = (0,_urql_core_chunk_mjs__WEBPACK_IMPORTED_MODULE_0__.d)(e, n);\n            var i = (0,_urql_core_chunk_mjs__WEBPACK_IMPORTED_MODULE_0__.e)(e, n);\n             true && r({\n                type: \"fetchRequest\",\n                message: \"A fetch request is being executed.\",\n                operation: e,\n                data: {\n                    url: a,\n                    fetchOptions: i\n                },\n                source: \"fetchExchange\"\n            });\n            var s = (0,wonka__WEBPACK_IMPORTED_MODULE_2__.takeUntil)((0,wonka__WEBPACK_IMPORTED_MODULE_2__.filter)((r)=>\"teardown\" === r.kind && r.key === e.key)(t))((0,_urql_core_chunk_mjs__WEBPACK_IMPORTED_MODULE_0__.f)(e, a, i));\n            if (true) {\n                return (0,wonka__WEBPACK_IMPORTED_MODULE_2__.onPush)((t)=>{\n                    var n = !t.data ? t.error : void 0;\n                     true && r({\n                        type: n ? \"fetchError\" : \"fetchSuccess\",\n                        message: `A ${n ? \"failed\" : \"successful\"} fetch response has been returned.`,\n                        operation: e,\n                        data: {\n                            url: a,\n                            fetchOptions: i,\n                            value: n || t\n                        },\n                        source: \"fetchExchange\"\n                    });\n                })(s);\n            }\n            return s;\n        })((0,wonka__WEBPACK_IMPORTED_MODULE_2__.filter)((e)=>\"teardown\" !== e.kind && (\"subscription\" !== e.kind || !!e.context.fetchSubscriptions))(t));\n        var a = e((0,wonka__WEBPACK_IMPORTED_MODULE_2__.filter)((e)=>\"teardown\" === e.kind || \"subscription\" === e.kind && !e.context.fetchSubscriptions)(t));\n        return (0,wonka__WEBPACK_IMPORTED_MODULE_2__.merge)([\n            n,\n            a\n        ]);\n    };\nvar composeExchanges = (e)=>({ client: r, forward: t, dispatchDebug: n })=>e.reduceRight((e, t)=>{\n            var a = !1;\n            return t({\n                client: r,\n                forward (r) {\n                    if (true) {\n                        if (a) {\n                            throw new Error(\"forward() must only be called once in each Exchange.\");\n                        }\n                        a = !0;\n                    }\n                    return (0,wonka__WEBPACK_IMPORTED_MODULE_2__.share)(e((0,wonka__WEBPACK_IMPORTED_MODULE_2__.share)(r)));\n                },\n                dispatchDebug (e) {\n                     true && n({\n                        timestamp: Date.now(),\n                        source: t.name,\n                        ...e\n                    });\n                }\n            });\n        }, t);\nvar mapExchange = ({ onOperation: e, onResult: r, onError: t })=>({ forward: n })=>(a)=>(0,wonka__WEBPACK_IMPORTED_MODULE_2__.mergeMap)((e)=>{\n                if (t && e.error) {\n                    t(e.error, e.operation);\n                }\n                var n = r && r(e) || e;\n                return \"then\" in n ? (0,wonka__WEBPACK_IMPORTED_MODULE_2__.fromPromise)(n) : (0,wonka__WEBPACK_IMPORTED_MODULE_2__.fromValue)(n);\n            })(n((0,wonka__WEBPACK_IMPORTED_MODULE_2__.mergeMap)((r)=>{\n                var t = e && e(r) || r;\n                return \"then\" in t ? (0,wonka__WEBPACK_IMPORTED_MODULE_2__.fromPromise)(t) : (0,wonka__WEBPACK_IMPORTED_MODULE_2__.fromValue)(t);\n            })(a)));\nvar fallbackExchange = ({ dispatchDebug: e })=>(r)=>{\n        if (true) {\n            r = (0,wonka__WEBPACK_IMPORTED_MODULE_2__.tap)((r)=>{\n                if (\"teardown\" !== r.kind && \"production\" !== \"development\") {\n                    var t = `No exchange has handled operations of kind \"${r.kind}\". Check whether you've added an exchange responsible for these operations.`;\n                     true && e({\n                        type: \"fallbackCatch\",\n                        message: t,\n                        operation: r,\n                        source: \"fallbackExchange\"\n                    });\n                    console.warn(t);\n                }\n            })(r);\n        }\n        return (0,wonka__WEBPACK_IMPORTED_MODULE_2__.filter)((e)=>!1)(r);\n    };\nvar C = function Client(e) {\n    if ( true && !e.url) {\n        throw new Error(\"You are creating an urql-client without a url.\");\n    }\n    var r = 0;\n    var t = new Map;\n    var n = new Map;\n    var a = new Set;\n    var i = [];\n    var o = {\n        url: e.url,\n        fetchSubscriptions: e.fetchSubscriptions,\n        fetchOptions: e.fetchOptions,\n        fetch: e.fetch,\n        preferGetMethod: e.preferGetMethod,\n        requestPolicy: e.requestPolicy || \"cache-first\"\n    };\n    var s = (0,wonka__WEBPACK_IMPORTED_MODULE_2__.makeSubject)();\n    function nextOperation(e) {\n        if (\"mutation\" === e.kind || \"teardown\" === e.kind || !a.has(e.key)) {\n            if (\"teardown\" === e.kind) {\n                a.delete(e.key);\n            } else if (\"mutation\" !== e.kind) {\n                a.add(e.key);\n            }\n            s.next(e);\n        }\n    }\n    var c = !1;\n    function dispatchOperation(e) {\n        if (e) {\n            nextOperation(e);\n        }\n        if (!c) {\n            c = !0;\n            while(c && (e = i.shift())){\n                nextOperation(e);\n            }\n            c = !1;\n        }\n    }\n    var makeResultSource = (e)=>{\n        var r = (0,wonka__WEBPACK_IMPORTED_MODULE_2__.takeUntil)((0,wonka__WEBPACK_IMPORTED_MODULE_2__.filter)((r)=>\"teardown\" === r.kind && r.key === e.key)(s.source))((0,wonka__WEBPACK_IMPORTED_MODULE_2__.filter)((r)=>r.operation.kind === e.kind && r.operation.key === e.key && (!r.operation.context._instance || r.operation.context._instance === e.context._instance))(E));\n        if (\"query\" !== e.kind) {\n            r = (0,wonka__WEBPACK_IMPORTED_MODULE_2__.takeWhile)((e)=>!!e.hasNext, !0)(r);\n        } else {\n            r = (0,wonka__WEBPACK_IMPORTED_MODULE_2__.switchMap)((r)=>{\n                var t = (0,wonka__WEBPACK_IMPORTED_MODULE_2__.fromValue)(r);\n                return r.stale || r.hasNext ? t : (0,wonka__WEBPACK_IMPORTED_MODULE_2__.merge)([\n                    t,\n                    (0,wonka__WEBPACK_IMPORTED_MODULE_2__.map)(()=>{\n                        r.stale = !0;\n                        return r;\n                    })((0,wonka__WEBPACK_IMPORTED_MODULE_2__.take)(1)((0,wonka__WEBPACK_IMPORTED_MODULE_2__.filter)((r)=>r.key === e.key)(s.source)))\n                ]);\n            })(r);\n        }\n        if (\"mutation\" !== e.kind) {\n            r = (0,wonka__WEBPACK_IMPORTED_MODULE_2__.onEnd)(()=>{\n                a.delete(e.key);\n                t.delete(e.key);\n                n.delete(e.key);\n                c = !1;\n                for(var r = i.length - 1; r >= 0; r--){\n                    if (i[r].key === e.key) {\n                        i.splice(r, 1);\n                    }\n                }\n                nextOperation(makeOperation(\"teardown\", e, e.context));\n            })((0,wonka__WEBPACK_IMPORTED_MODULE_2__.onPush)((r)=>{\n                if (r.stale) {\n                    if (!r.hasNext) {\n                        a.delete(e.key);\n                    } else {\n                        for(var n = 0; n < i.length; n++){\n                            var o = i[n];\n                            if (o.key === r.operation.key) {\n                                a.delete(o.key);\n                                break;\n                            }\n                        }\n                    }\n                } else if (!r.hasNext) {\n                    a.delete(e.key);\n                }\n                t.set(e.key, r);\n            })(r));\n        } else {\n            r = (0,wonka__WEBPACK_IMPORTED_MODULE_2__.onStart)(()=>{\n                nextOperation(e);\n            })(r);\n        }\n        return (0,wonka__WEBPACK_IMPORTED_MODULE_2__.share)(r);\n    };\n    var u = this instanceof Client ? this : Object.create(Client.prototype);\n    var p = Object.assign(u, {\n        suspense: !!e.suspense,\n        operations$: s.source,\n        reexecuteOperation (e) {\n            if (\"teardown\" === e.kind) {\n                dispatchOperation(e);\n            } else if (\"mutation\" === e.kind) {\n                i.push(e);\n                Promise.resolve().then(dispatchOperation);\n            } else if (n.has(e.key)) {\n                var r = !1;\n                for(var t = 0; t < i.length; t++){\n                    if (i[t].key === e.key) {\n                        i[t] = e;\n                        r = !0;\n                    }\n                }\n                if (!(r || a.has(e.key) && \"network-only\" !== e.context.requestPolicy)) {\n                    i.push(e);\n                    Promise.resolve().then(dispatchOperation);\n                } else {\n                    a.delete(e.key);\n                    Promise.resolve().then(dispatchOperation);\n                }\n            }\n        },\n        createRequestOperation (e, t, n) {\n            if (!n) {\n                n = {};\n            }\n            var a;\n            if ( true && \"teardown\" !== e && (a = (0,_urql_core_chunk_mjs__WEBPACK_IMPORTED_MODULE_0__.g)(t.query)) !== e) {\n                throw new Error(`Expected operation of type \"${e}\" but found \"${a}\"`);\n            }\n            return makeOperation(e, t, {\n                _instance: \"mutation\" === e ? r = r + 1 | 0 : void 0,\n                ...o,\n                ...n,\n                requestPolicy: n.requestPolicy || o.requestPolicy,\n                suspense: n.suspense || !1 !== n.suspense && p.suspense\n            });\n        },\n        executeRequestOperation (e) {\n            if (\"mutation\" === e.kind) {\n                return withPromise(makeResultSource(e));\n            }\n            return withPromise((0,wonka__WEBPACK_IMPORTED_MODULE_2__.lazy)(()=>{\n                var r = n.get(e.key);\n                if (!r) {\n                    n.set(e.key, r = makeResultSource(e));\n                }\n                r = (0,wonka__WEBPACK_IMPORTED_MODULE_2__.onStart)(()=>{\n                    dispatchOperation(e);\n                })(r);\n                var a = t.get(e.key);\n                if (\"query\" === e.kind && a && (a.stale || a.hasNext)) {\n                    return (0,wonka__WEBPACK_IMPORTED_MODULE_2__.switchMap)(wonka__WEBPACK_IMPORTED_MODULE_2__.fromValue)((0,wonka__WEBPACK_IMPORTED_MODULE_2__.merge)([\n                        r,\n                        (0,wonka__WEBPACK_IMPORTED_MODULE_2__.filter)((r)=>r === t.get(e.key))((0,wonka__WEBPACK_IMPORTED_MODULE_2__.fromValue)(a))\n                    ]));\n                } else {\n                    return r;\n                }\n            }));\n        },\n        executeQuery (e, r) {\n            var t = p.createRequestOperation(\"query\", e, r);\n            return p.executeRequestOperation(t);\n        },\n        executeSubscription (e, r) {\n            var t = p.createRequestOperation(\"subscription\", e, r);\n            return p.executeRequestOperation(t);\n        },\n        executeMutation (e, r) {\n            var t = p.createRequestOperation(\"mutation\", e, r);\n            return p.executeRequestOperation(t);\n        },\n        readQuery (e, r, t) {\n            var n = null;\n            (0,wonka__WEBPACK_IMPORTED_MODULE_2__.subscribe)((e)=>{\n                n = e;\n            })(p.query(e, r, t)).unsubscribe();\n            return n;\n        },\n        query: (e, r, t)=>p.executeQuery((0,_urql_core_chunk_mjs__WEBPACK_IMPORTED_MODULE_0__.h)(e, r), t),\n        subscription: (e, r, t)=>p.executeSubscription((0,_urql_core_chunk_mjs__WEBPACK_IMPORTED_MODULE_0__.h)(e, r), t),\n        mutation: (e, r, t)=>p.executeMutation((0,_urql_core_chunk_mjs__WEBPACK_IMPORTED_MODULE_0__.h)(e, r), t)\n    });\n    var d = noop;\n    if (true) {\n        var { next: f, source: x } = (0,wonka__WEBPACK_IMPORTED_MODULE_2__.makeSubject)();\n        p.subscribeToDebugTarget = (e)=>(0,wonka__WEBPACK_IMPORTED_MODULE_2__.subscribe)(e)(x);\n        d = f;\n    }\n    var w = composeExchanges(e.exchanges);\n    var E = (0,wonka__WEBPACK_IMPORTED_MODULE_2__.share)(w({\n        client: p,\n        dispatchDebug: d,\n        forward: fallbackExchange({\n            dispatchDebug: d\n        })\n    })(s.source));\n    (0,wonka__WEBPACK_IMPORTED_MODULE_2__.publish)(E);\n    return p;\n};\nvar Q = C;\n //# sourceMappingURL=urql-core.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@urql/core/dist/urql-core.mjs\n");

/***/ })

};
;