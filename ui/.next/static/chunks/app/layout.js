/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["app/layout"],{

/***/ "(app-pages-browser)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%2Fhome%2Fsourabh7iwari%2FLocal_development%2Faa%2Fui%2Fnode_modules%2F%40copilotkit%2Freact-core%2Fdist%2Findex.mjs&modules=%2Fhome%2Fsourabh7iwari%2FLocal_development%2Faa%2Fui%2Fnode_modules%2Fnext%2Ffont%2Fgoogle%2Ftarget.css%3F%7B%22path%22%3A%22app%2Flayout.tsx%22%2C%22import%22%3A%22Inter%22%2C%22arguments%22%3A%5B%7B%22subsets%22%3A%5B%22latin%22%5D%7D%5D%2C%22variableName%22%3A%22inter%22%7D&modules=%2Fhome%2Fsourabh7iwari%2FLocal_development%2Faa%2Fui%2Fapp%2Fglobals.css&server=false!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%2Fhome%2Fsourabh7iwari%2FLocal_development%2Faa%2Fui%2Fnode_modules%2F%40copilotkit%2Freact-core%2Fdist%2Findex.mjs&modules=%2Fhome%2Fsourabh7iwari%2FLocal_development%2Faa%2Fui%2Fnode_modules%2Fnext%2Ffont%2Fgoogle%2Ftarget.css%3F%7B%22path%22%3A%22app%2Flayout.tsx%22%2C%22import%22%3A%22Inter%22%2C%22arguments%22%3A%5B%7B%22subsets%22%3A%5B%22latin%22%5D%7D%5D%2C%22variableName%22%3A%22inter%22%7D&modules=%2Fhome%2Fsourabh7iwari%2FLocal_development%2Faa%2Fui%2Fapp%2Fglobals.css&server=false! ***!

/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("Promise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./node_modules/@copilotkit/react-core/dist/index.mjs */ \"(app-pages-browser)/./node_modules/@copilotkit/react-core/dist/index.mjs\"));\nPromise.resolve(/*! import() eager */).then(__webpack_require__.t.bind(__webpack_require__, /*! ./node_modules/next/font/google/target.css?{\"path\":\"app/layout.tsx\",\"import\":\"Inter\",\"arguments\":[{\"subsets\":[\"latin\"]}],\"variableName\":\"inter\"} */ \"(app-pages-browser)/./node_modules/next/font/google/target.css?{\\\"path\\\":\\\"app/layout.tsx\\\",\\\"import\\\":\\\"Inter\\\",\\\"arguments\\\":[{\\\"subsets\\\":[\\\"latin\\\"]}],\\\"variableName\\\":\\\"inter\\\"}\", 23));\nPromise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./app/globals.css */ \"(app-pages-browser)/./app/globals.css\"))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvd2VicGFjay9sb2FkZXJzL25leHQtZmxpZ2h0LWNsaWVudC1lbnRyeS1sb2FkZXIuanM/bW9kdWxlcz0lMkZob21lJTJGc291cmFiaDdpd2FyaSUyRkxvY2FsX2RldmVsb3BtZW50JTJGYWElMkZ1aSUyRm5vZGVfbW9kdWxlcyUyRiU0MGNvcGlsb3RraXQlMkZyZWFjdC1jb3JlJTJGZGlzdCUyRmluZGV4Lm1qcyZtb2R1bGVzPSUyRmhvbWUlMkZzb3VyYWJoN2l3YXJpJTJGTG9jYWxfZGV2ZWxvcG1lbnQlMkZhYSUyRnVpJTJGbm9kZV9tb2R1bGVzJTJGbmV4dCUyRmZvbnQlMkZnb29nbGUlMkZ0YXJnZXQuY3NzJTNGJTdCJTIycGF0aCUyMiUzQSUyMmFwcCUyRmxheW91dC50c3glMjIlMkMlMjJpbXBvcnQlMjIlM0ElMjJJbnRlciUyMiUyQyUyMmFyZ3VtZW50cyUyMiUzQSU1QiU3QiUyMnN1YnNldHMlMjIlM0ElNUIlMjJsYXRpbiUyMiU1RCU3RCU1RCUyQyUyMnZhcmlhYmxlTmFtZSUyMiUzQSUyMmludGVyJTIyJTdEJm1vZHVsZXM9JTJGaG9tZSUyRnNvdXJhYmg3aXdhcmklMkZMb2NhbF9kZXZlbG9wbWVudCUyRmFhJTJGdWklMkZhcHAlMkZnbG9iYWxzLmNzcyZzZXJ2ZXI9ZmFsc2UhIiwibWFwcGluZ3MiOiJBQUFBLGtPQUFtSTtBQUNuSSxrYkFBaVA7QUFDalAiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLz83ZmFjIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCgvKiB3ZWJwYWNrTW9kZTogXCJlYWdlclwiICovIFwiL2hvbWUvc291cmFiaDdpd2FyaS9Mb2NhbF9kZXZlbG9wbWVudC9hYS91aS9ub2RlX21vZHVsZXMvQGNvcGlsb3RraXQvcmVhY3QtY29yZS9kaXN0L2luZGV4Lm1qc1wiKTtcbmltcG9ydCgvKiB3ZWJwYWNrTW9kZTogXCJlYWdlclwiICovIFwiL2hvbWUvc291cmFiaDdpd2FyaS9Mb2NhbF9kZXZlbG9wbWVudC9hYS91aS9ub2RlX21vZHVsZXMvbmV4dC9mb250L2dvb2dsZS90YXJnZXQuY3NzP3tcXFwicGF0aFxcXCI6XFxcImFwcC9sYXlvdXQudHN4XFxcIixcXFwiaW1wb3J0XFxcIjpcXFwiSW50ZXJcXFwiLFxcXCJhcmd1bWVudHNcXFwiOlt7XFxcInN1YnNldHNcXFwiOltcXFwibGF0aW5cXFwiXX1dLFxcXCJ2YXJpYWJsZU5hbWVcXFwiOlxcXCJpbnRlclxcXCJ9XCIpO1xuaW1wb3J0KC8qIHdlYnBhY2tNb2RlOiBcImVhZ2VyXCIgKi8gXCIvaG9tZS9zb3VyYWJoN2l3YXJpL0xvY2FsX2RldmVsb3BtZW50L2FhL3VpL2FwcC9nbG9iYWxzLmNzc1wiKSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%2Fhome%2Fsourabh7iwari%2FLocal_development%2Faa%2Fui%2Fnode_modules%2F%40copilotkit%2Freact-core%2Fdist%2Findex.mjs&modules=%2Fhome%2Fsourabh7iwari%2FLocal_development%2Faa%2Fui%2Fnode_modules%2Fnext%2Ffont%2Fgoogle%2Ftarget.css%3F%7B%22path%22%3A%22app%2Flayout.tsx%22%2C%22import%22%3A%22Inter%22%2C%22arguments%22%3A%5B%7B%22subsets%22%3A%5B%22latin%22%5D%7D%5D%2C%22variableName%22%3A%22inter%22%7D&modules=%2Fhome%2Fsourabh7iwari%2FLocal_development%2Faa%2Fui%2Fapp%2Fglobals.css&server=false!\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/compiled/mini-css-extract-plugin/hmr/hotModuleReplacement.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/next/dist/compiled/mini-css-extract-plugin/hmr/hotModuleReplacement.js ***!
  \*********************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("var __dirname = \"/\";\n\n(()=>{\n    \"use strict\";\n    var e = {\n        686: (e, r, t)=>{\n            var n = t(808);\n            var i = Object.create(null);\n            var a = typeof document === \"undefined\";\n            var o = Array.prototype.forEach;\n            function debounce(e, r) {\n                var t = 0;\n                return function() {\n                    var n = this;\n                    var i = arguments;\n                    var a = function functionCall() {\n                        return e.apply(n, i);\n                    };\n                    clearTimeout(t);\n                    t = setTimeout(a, r);\n                };\n            }\n            function noop() {}\n            function getCurrentScriptUrl(e) {\n                var r = i[e];\n                if (!r) {\n                    if (document.currentScript) {\n                        r = document.currentScript.src;\n                    } else {\n                        var t = document.getElementsByTagName(\"script\");\n                        var a = t[t.length - 1];\n                        if (a) {\n                            r = a.src;\n                        }\n                    }\n                    i[e] = r;\n                }\n                return function(e) {\n                    if (!r) {\n                        return null;\n                    }\n                    var t = r.split(/([^\\\\/]+)\\.js$/);\n                    var i = t && t[1];\n                    if (!i) {\n                        return [\n                            r.replace(\".js\", \".css\")\n                        ];\n                    }\n                    if (!e) {\n                        return [\n                            r.replace(\".js\", \".css\")\n                        ];\n                    }\n                    return e.split(\",\").map(function(e) {\n                        var t = new RegExp(\"\".concat(i, \"\\\\.js$\"), \"g\");\n                        return n(r.replace(t, \"\".concat(e.replace(/{fileName}/g, i), \".css\")));\n                    });\n                };\n            }\n            function updateCss(e, r) {\n                if (!r) {\n                    if (!e.href) {\n                        return;\n                    }\n                    r = e.href.split(\"?\")[0];\n                }\n                if (!isUrlRequest(r)) {\n                    return;\n                }\n                if (e.isLoaded === false) {\n                    return;\n                }\n                if (!r || !(r.indexOf(\".css\") > -1)) {\n                    return;\n                }\n                e.visited = true;\n                var t = e.cloneNode();\n                t.isLoaded = false;\n                t.addEventListener(\"load\", function() {\n                    if (t.isLoaded) {\n                        return;\n                    }\n                    t.isLoaded = true;\n                    e.parentNode.removeChild(e);\n                });\n                t.addEventListener(\"error\", function() {\n                    if (t.isLoaded) {\n                        return;\n                    }\n                    t.isLoaded = true;\n                    e.parentNode.removeChild(e);\n                });\n                t.href = \"\".concat(r, \"?\").concat(Date.now());\n                if (e.nextSibling) {\n                    e.parentNode.insertBefore(t, e.nextSibling);\n                } else {\n                    e.parentNode.appendChild(t);\n                }\n            }\n            function getReloadUrl(e, r) {\n                var t;\n                e = n(e, {\n                    stripWWW: false\n                });\n                r.some(function(n) {\n                    if (e.indexOf(r) > -1) {\n                        t = n;\n                    }\n                });\n                return t;\n            }\n            function reloadStyle(e) {\n                if (!e) {\n                    return false;\n                }\n                var r = document.querySelectorAll(\"link\");\n                var t = false;\n                o.call(r, function(r) {\n                    if (!r.href) {\n                        return;\n                    }\n                    var n = getReloadUrl(r.href, e);\n                    if (!isUrlRequest(n)) {\n                        return;\n                    }\n                    if (r.visited === true) {\n                        return;\n                    }\n                    if (n) {\n                        updateCss(r, n);\n                        t = true;\n                    }\n                });\n                return t;\n            }\n            function reloadAll() {\n                var e = document.querySelectorAll(\"link\");\n                o.call(e, function(e) {\n                    if (e.visited === true) {\n                        return;\n                    }\n                    updateCss(e);\n                });\n            }\n            function isUrlRequest(e) {\n                if (!/^[a-zA-Z][a-zA-Z\\d+\\-.]*:/.test(e)) {\n                    return false;\n                }\n                return true;\n            }\n            e.exports = function(e, r) {\n                if (a) {\n                    console.log(\"no window.document found, will not HMR CSS\");\n                    return noop;\n                }\n                var t = getCurrentScriptUrl(e);\n                function update() {\n                    var e = t(r.filename);\n                    var n = reloadStyle(e);\n                    if (r.locals) {\n                        console.log(\"[HMR] Detected local css modules. Reload all css\");\n                        reloadAll();\n                        return;\n                    }\n                    if (n) {\n                        console.log(\"[HMR] css reload %s\", e.join(\" \"));\n                    } else {\n                        console.log(\"[HMR] Reload all css\");\n                        reloadAll();\n                    }\n                }\n                return debounce(update, 50);\n            };\n        },\n        808: (e)=>{\n            function normalizeUrl(e) {\n                return e.reduce(function(e, r) {\n                    switch(r){\n                        case \"..\":\n                            e.pop();\n                            break;\n                        case \".\":\n                            break;\n                        default:\n                            e.push(r);\n                    }\n                    return e;\n                }, []).join(\"/\");\n            }\n            e.exports = function(e) {\n                e = e.trim();\n                if (/^data:/i.test(e)) {\n                    return e;\n                }\n                var r = e.indexOf(\"//\") !== -1 ? e.split(\"//\")[0] + \"//\" : \"\";\n                var t = e.replace(new RegExp(r, \"i\"), \"\").split(\"/\");\n                var n = t[0].toLowerCase().replace(/\\.$/, \"\");\n                t[0] = \"\";\n                var i = normalizeUrl(t);\n                return r + n + i;\n            };\n        }\n    };\n    var r = {};\n    function __nccwpck_require__(t) {\n        var n = r[t];\n        if (n !== undefined) {\n            return n.exports;\n        }\n        var i = r[t] = {\n            exports: {}\n        };\n        var a = true;\n        try {\n            e[t](i, i.exports, __nccwpck_require__);\n            a = false;\n        } finally{\n            if (a) delete r[t];\n        }\n        return i.exports;\n    }\n    if (typeof __nccwpck_require__ !== \"undefined\") __nccwpck_require__.ab = __dirname + \"/\";\n    var t = __nccwpck_require__(686);\n    module.exports = t;\n})();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/compiled/mini-css-extract-plugin/hmr/hotModuleReplacement.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/untruncate-json/dist/esm/index.js":
/*!********************************************************!*\
  !*** ./node_modules/untruncate-json/dist/esm/index.js ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ untruncateJson; }\n/* harmony export */ });\nfunction isWhitespace(char) {\n    return \" \\r\\n\t\".indexOf(char) >= 0;\n}\nfunction untruncateJson(json) {\n    var contextStack = [\n        \"topLevel\" /* TOP_LEVEL */ \n    ];\n    var position = 0;\n    var respawnPosition;\n    var respawnStackLength;\n    var respawnReason;\n    var push = function(context) {\n        return contextStack.push(context);\n    };\n    var replace = function(context) {\n        return contextStack[contextStack.length - 1] = context;\n    };\n    var setRespawn = function(reason) {\n        if (respawnPosition == null) {\n            respawnPosition = position;\n            respawnStackLength = contextStack.length;\n            respawnReason = reason;\n        }\n    };\n    var clearRespawn = function(reason) {\n        if (reason === respawnReason) {\n            respawnPosition = undefined;\n            respawnStackLength = undefined;\n            respawnReason = undefined;\n        }\n    };\n    var pop = function() {\n        return contextStack.pop();\n    };\n    var dontConsumeCharacter = function() {\n        return position--;\n    };\n    var startAny = function(char) {\n        if (\"0\" <= char && char <= \"9\") {\n            push(\"number\" /* NUMBER */ );\n            return;\n        }\n        switch(char){\n            case '\"':\n                push(\"string\" /* STRING */ );\n                return;\n            case \"-\":\n                push(\"numberNeedsDigit\" /* NUMBER_NEEDS_DIGIT */ );\n                return;\n            case \"t\":\n                push(\"true\" /* TRUE */ );\n                return;\n            case \"f\":\n                push(\"false\" /* FALSE */ );\n                return;\n            case \"n\":\n                push(\"null\" /* NULL */ );\n                return;\n            case \"[\":\n                push(\"arrayNeedsValue\" /* ARRAY_NEEDS_VALUE */ );\n                return;\n            case \"{\":\n                push(\"objectNeedsKey\" /* OBJECT_NEEDS_KEY */ );\n                return;\n        }\n    };\n    for(var length = json.length; position < length; position++){\n        var char = json[position];\n        switch(contextStack[contextStack.length - 1]){\n            case \"topLevel\" /* TOP_LEVEL */ :\n                startAny(char);\n                break;\n            case \"string\" /* STRING */ :\n                switch(char){\n                    case '\"':\n                        pop();\n                        break;\n                    case \"\\\\\":\n                        setRespawn(\"stringEscape\" /* STRING_ESCAPE */ );\n                        push(\"stringEscaped\" /* STRING_ESCAPED */ );\n                        break;\n                }\n                break;\n            case \"stringEscaped\" /* STRING_ESCAPED */ :\n                if (char === \"u\") {\n                    push(\"stringUnicode\" /* STRING_UNICODE */ );\n                } else {\n                    clearRespawn(\"stringEscape\" /* STRING_ESCAPE */ );\n                    pop();\n                }\n                break;\n            case \"stringUnicode\" /* STRING_UNICODE */ :\n                if (position - json.lastIndexOf(\"u\", position) === 4) {\n                    clearRespawn(\"stringEscape\" /* STRING_ESCAPE */ );\n                    pop();\n                }\n                break;\n            case \"number\" /* NUMBER */ :\n                if (char === \".\") {\n                    replace(\"numberNeedsDigit\" /* NUMBER_NEEDS_DIGIT */ );\n                } else if (char === \"e\" || char === \"E\") {\n                    replace(\"numberNeedsExponent\" /* NUMBER_NEEDS_EXPONENT */ );\n                } else if (char < \"0\" || char > \"9\") {\n                    dontConsumeCharacter();\n                    pop();\n                }\n                break;\n            case \"numberNeedsDigit\" /* NUMBER_NEEDS_DIGIT */ :\n                replace(\"number\" /* NUMBER */ );\n                break;\n            case \"numberNeedsExponent\" /* NUMBER_NEEDS_EXPONENT */ :\n                if (char === \"+\" || char === \"-\") {\n                    replace(\"numberNeedsDigit\" /* NUMBER_NEEDS_DIGIT */ );\n                } else {\n                    replace(\"number\" /* NUMBER */ );\n                }\n                break;\n            case \"true\" /* TRUE */ :\n            case \"false\" /* FALSE */ :\n            case \"null\" /* NULL */ :\n                if (char < \"a\" || char > \"z\") {\n                    dontConsumeCharacter();\n                    pop();\n                }\n                break;\n            case \"arrayNeedsValue\" /* ARRAY_NEEDS_VALUE */ :\n                if (char === \"]\") {\n                    pop();\n                } else if (!isWhitespace(char)) {\n                    clearRespawn(\"collectionItem\" /* COLLECTION_ITEM */ );\n                    replace(\"arrayNeedsComma\" /* ARRAY_NEEDS_COMMA */ );\n                    startAny(char);\n                }\n                break;\n            case \"arrayNeedsComma\" /* ARRAY_NEEDS_COMMA */ :\n                if (char === \"]\") {\n                    pop();\n                } else if (char === \",\") {\n                    setRespawn(\"collectionItem\" /* COLLECTION_ITEM */ );\n                    replace(\"arrayNeedsValue\" /* ARRAY_NEEDS_VALUE */ );\n                }\n                break;\n            case \"objectNeedsKey\" /* OBJECT_NEEDS_KEY */ :\n                if (char === \"}\") {\n                    pop();\n                } else if (char === '\"') {\n                    setRespawn(\"collectionItem\" /* COLLECTION_ITEM */ );\n                    replace(\"objectNeedsColon\" /* OBJECT_NEEDS_COLON */ );\n                    push(\"string\" /* STRING */ );\n                }\n                break;\n            case \"objectNeedsColon\" /* OBJECT_NEEDS_COLON */ :\n                if (char === \":\") {\n                    replace(\"objectNeedsValue\" /* OBJECT_NEEDS_VALUE */ );\n                }\n                break;\n            case \"objectNeedsValue\" /* OBJECT_NEEDS_VALUE */ :\n                if (!isWhitespace(char)) {\n                    clearRespawn(\"collectionItem\" /* COLLECTION_ITEM */ );\n                    replace(\"objectNeedsComma\" /* OBJECT_NEEDS_COMMA */ );\n                    startAny(char);\n                }\n                break;\n            case \"objectNeedsComma\" /* OBJECT_NEEDS_COMMA */ :\n                if (char === \"}\") {\n                    pop();\n                } else if (char === \",\") {\n                    setRespawn(\"collectionItem\" /* COLLECTION_ITEM */ );\n                    replace(\"objectNeedsKey\" /* OBJECT_NEEDS_KEY */ );\n                }\n                break;\n        }\n    }\n    if (respawnStackLength != null) {\n        contextStack.length = respawnStackLength;\n    }\n    var result = [\n        respawnPosition != null ? json.slice(0, respawnPosition) : json\n    ];\n    var finishWord = function(word) {\n        return result.push(word.slice(json.length - json.lastIndexOf(word[0])));\n    };\n    for(var i = contextStack.length - 1; i >= 0; i--){\n        switch(contextStack[i]){\n            case \"string\" /* STRING */ :\n                result.push('\"');\n                break;\n            case \"numberNeedsDigit\" /* NUMBER_NEEDS_DIGIT */ :\n            case \"numberNeedsExponent\" /* NUMBER_NEEDS_EXPONENT */ :\n                result.push(\"0\");\n                break;\n            case \"true\" /* TRUE */ :\n                finishWord(\"true\");\n                break;\n            case \"false\" /* FALSE */ :\n                finishWord(\"false\");\n                break;\n            case \"null\" /* NULL */ :\n                finishWord(\"null\");\n                break;\n            case \"arrayNeedsValue\" /* ARRAY_NEEDS_VALUE */ :\n            case \"arrayNeedsComma\" /* ARRAY_NEEDS_COMMA */ :\n                result.push(\"]\");\n                break;\n            case \"objectNeedsKey\" /* OBJECT_NEEDS_KEY */ :\n            case \"objectNeedsColon\" /* OBJECT_NEEDS_COLON */ :\n            case \"objectNeedsValue\" /* OBJECT_NEEDS_VALUE */ :\n            case \"objectNeedsComma\" /* OBJECT_NEEDS_COMMA */ :\n                result.push(\"}\");\n                break;\n        }\n    }\n    return result.join(\"\");\n} //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/untruncate-json/dist/esm/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/uuid/dist/esm-browser/native.js":
/*!******************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/native.js ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\nvar randomUUID = typeof crypto !== \"undefined\" && crypto.randomUUID && crypto.randomUUID.bind(crypto);\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n    randomUUID\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLWJyb3dzZXIvbmF0aXZlLmpzIiwibWFwcGluZ3MiOiI7QUFBQSxJQUFJQSxhQUFhLE9BQU9DLFdBQVcsZUFBZUEsT0FBT0QsVUFBVSxJQUFJQyxPQUFPRCxVQUFVLENBQUNFLElBQUksQ0FBQ0Q7QUFDOUYsK0RBQWU7SUFDYkQ7QUFDRixDQUFDLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20tYnJvd3Nlci9uYXRpdmUuanM/ZWE3NCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgcmFuZG9tVVVJRCA9IHR5cGVvZiBjcnlwdG8gIT09ICd1bmRlZmluZWQnICYmIGNyeXB0by5yYW5kb21VVUlEICYmIGNyeXB0by5yYW5kb21VVUlELmJpbmQoY3J5cHRvKTtcbmV4cG9ydCBkZWZhdWx0IHtcbiAgcmFuZG9tVVVJRFxufTsiXSwibmFtZXMiOlsicmFuZG9tVVVJRCIsImNyeXB0byIsImJpbmQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/uuid/dist/esm-browser/native.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/uuid/dist/esm-browser/regex.js":
/*!*****************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/regex.js ***!
  \*****************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = (/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-8][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000|ffffffff-ffff-ffff-ffff-ffffffffffff)$/i);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLWJyb3dzZXIvcmVnZXguanMiLCJtYXBwaW5ncyI6IjtBQUFBLCtEQUFlLDBKQUEwSixFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLWJyb3dzZXIvcmVnZXguanM/NTg3YSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCAvXig/OlswLTlhLWZdezh9LVswLTlhLWZdezR9LVsxLThdWzAtOWEtZl17M30tWzg5YWJdWzAtOWEtZl17M30tWzAtOWEtZl17MTJ9fDAwMDAwMDAwLTAwMDAtMDAwMC0wMDAwLTAwMDAwMDAwMDAwMHxmZmZmZmZmZi1mZmZmLWZmZmYtZmZmZi1mZmZmZmZmZmZmZmYpJC9pOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/uuid/dist/esm-browser/regex.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/uuid/dist/esm-browser/rng.js":
/*!***************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/rng.js ***!
  \***************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ rng; }\n/* harmony export */ });\n// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nvar getRandomValues;\nvar rnds8 = new Uint8Array(16);\nfunction rng() {\n    // lazy load so that environments that need to polyfill have a chance to do so\n    if (!getRandomValues) {\n        // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation.\n        getRandomValues = typeof crypto !== \"undefined\" && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);\n        if (!getRandomValues) {\n            throw new Error(\"crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported\");\n        }\n    }\n    return getRandomValues(rnds8);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLWJyb3dzZXIvcm5nLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSw2RkFBNkY7QUFDN0YsNkZBQTZGO0FBQzdGLG1DQUFtQztBQUVuQyxJQUFJQTtBQUNKLElBQUlDLFFBQVEsSUFBSUMsV0FBVztBQUNaLFNBQVNDO0lBQ3RCLDhFQUE4RTtJQUM5RSxJQUFJLENBQUNILGlCQUFpQjtRQUNwQiw0RkFBNEY7UUFDNUZBLGtCQUFrQixPQUFPSSxXQUFXLGVBQWVBLE9BQU9KLGVBQWUsSUFBSUksT0FBT0osZUFBZSxDQUFDSyxJQUFJLENBQUNEO1FBQ3pHLElBQUksQ0FBQ0osaUJBQWlCO1lBQ3BCLE1BQU0sSUFBSU0sTUFBTTtRQUNsQjtJQUNGO0lBQ0EsT0FBT04sZ0JBQWdCQztBQUN6QiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1icm93c2VyL3JuZy5qcz81Mjc2Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIFVuaXF1ZSBJRCBjcmVhdGlvbiByZXF1aXJlcyBhIGhpZ2ggcXVhbGl0eSByYW5kb20gIyBnZW5lcmF0b3IuIEluIHRoZSBicm93c2VyIHdlIHRoZXJlZm9yZVxuLy8gcmVxdWlyZSB0aGUgY3J5cHRvIEFQSSBhbmQgZG8gbm90IHN1cHBvcnQgYnVpbHQtaW4gZmFsbGJhY2sgdG8gbG93ZXIgcXVhbGl0eSByYW5kb20gbnVtYmVyXG4vLyBnZW5lcmF0b3JzIChsaWtlIE1hdGgucmFuZG9tKCkpLlxuXG52YXIgZ2V0UmFuZG9tVmFsdWVzO1xudmFyIHJuZHM4ID0gbmV3IFVpbnQ4QXJyYXkoMTYpO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcm5nKCkge1xuICAvLyBsYXp5IGxvYWQgc28gdGhhdCBlbnZpcm9ubWVudHMgdGhhdCBuZWVkIHRvIHBvbHlmaWxsIGhhdmUgYSBjaGFuY2UgdG8gZG8gc29cbiAgaWYgKCFnZXRSYW5kb21WYWx1ZXMpIHtcbiAgICAvLyBnZXRSYW5kb21WYWx1ZXMgbmVlZHMgdG8gYmUgaW52b2tlZCBpbiBhIGNvbnRleHQgd2hlcmUgXCJ0aGlzXCIgaXMgYSBDcnlwdG8gaW1wbGVtZW50YXRpb24uXG4gICAgZ2V0UmFuZG9tVmFsdWVzID0gdHlwZW9mIGNyeXB0byAhPT0gJ3VuZGVmaW5lZCcgJiYgY3J5cHRvLmdldFJhbmRvbVZhbHVlcyAmJiBjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzLmJpbmQoY3J5cHRvKTtcbiAgICBpZiAoIWdldFJhbmRvbVZhbHVlcykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKCkgbm90IHN1cHBvcnRlZC4gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS91dWlkanMvdXVpZCNnZXRyYW5kb212YWx1ZXMtbm90LXN1cHBvcnRlZCcpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZ2V0UmFuZG9tVmFsdWVzKHJuZHM4KTtcbn0iXSwibmFtZXMiOlsiZ2V0UmFuZG9tVmFsdWVzIiwicm5kczgiLCJVaW50OEFycmF5Iiwicm5nIiwiY3J5cHRvIiwiYmluZCIsIkVycm9yIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/uuid/dist/esm-browser/rng.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/uuid/dist/esm-browser/stringify.js":
/*!*********************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/stringify.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   unsafeStringify: function() { return /* binding */ unsafeStringify; }\n/* harmony export */ });\n/* harmony import */ var _validate_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./validate.js */ \"(app-pages-browser)/./node_modules/uuid/dist/esm-browser/validate.js\");\n\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */ var byteToHex = [];\nfor(var i = 0; i < 256; ++i){\n    byteToHex.push((i + 0x100).toString(16).slice(1));\n}\nfunction unsafeStringify(arr) {\n    let offset = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;\n    // Note: Be careful editing this code!  It's been tuned for performance\n    // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n    //\n    // Note to future-self: No, you can't remove the `toLowerCase()` call.\n    // REF: https://github.com/uuidjs/uuid/pull/677#issuecomment-1757351351\n    return (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + \"-\" + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + \"-\" + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + \"-\" + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + \"-\" + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();\n}\nfunction stringify(arr) {\n    let offset = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;\n    var uuid = unsafeStringify(arr, offset);\n    // Consistency check for valid UUID.  If this throws, it's likely due to one\n    // of the following:\n    // - One or more input array values don't map to a hex octet (leading to\n    // \"undefined\" in the uuid)\n    // - Invalid input values for the RFC `version` or `variant` fields\n    if (!(0,_validate_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(uuid)) {\n        throw TypeError(\"Stringified UUID is invalid\");\n    }\n    return uuid;\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (stringify);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLWJyb3dzZXIvc3RyaW5naWZ5LmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQXFDO0FBRXJDOzs7Q0FHQyxHQUNELElBQUlDLFlBQVksRUFBRTtBQUNsQixJQUFLLElBQUlDLElBQUksR0FBR0EsSUFBSSxLQUFLLEVBQUVBLEVBQUc7SUFDNUJELFVBQVVFLElBQUksQ0FBQyxDQUFDRCxJQUFJLEtBQUksRUFBR0UsUUFBUSxDQUFDLElBQUlDLEtBQUssQ0FBQztBQUNoRDtBQUNPLFNBQVNDLGdCQUFnQkMsR0FBRztRQUFFQyxTQUFBQSxpRUFBUztJQUM1Qyx1RUFBdUU7SUFDdkUsb0ZBQW9GO0lBQ3BGLEVBQUU7SUFDRixzRUFBc0U7SUFDdEUsdUVBQXVFO0lBQ3ZFLE9BQU8sQ0FBQ1AsU0FBUyxDQUFDTSxHQUFHLENBQUNDLFNBQVMsRUFBRSxDQUFDLEdBQUdQLFNBQVMsQ0FBQ00sR0FBRyxDQUFDQyxTQUFTLEVBQUUsQ0FBQyxHQUFHUCxTQUFTLENBQUNNLEdBQUcsQ0FBQ0MsU0FBUyxFQUFFLENBQUMsR0FBR1AsU0FBUyxDQUFDTSxHQUFHLENBQUNDLFNBQVMsRUFBRSxDQUFDLEdBQUcsTUFBTVAsU0FBUyxDQUFDTSxHQUFHLENBQUNDLFNBQVMsRUFBRSxDQUFDLEdBQUdQLFNBQVMsQ0FBQ00sR0FBRyxDQUFDQyxTQUFTLEVBQUUsQ0FBQyxHQUFHLE1BQU1QLFNBQVMsQ0FBQ00sR0FBRyxDQUFDQyxTQUFTLEVBQUUsQ0FBQyxHQUFHUCxTQUFTLENBQUNNLEdBQUcsQ0FBQ0MsU0FBUyxFQUFFLENBQUMsR0FBRyxNQUFNUCxTQUFTLENBQUNNLEdBQUcsQ0FBQ0MsU0FBUyxFQUFFLENBQUMsR0FBR1AsU0FBUyxDQUFDTSxHQUFHLENBQUNDLFNBQVMsRUFBRSxDQUFDLEdBQUcsTUFBTVAsU0FBUyxDQUFDTSxHQUFHLENBQUNDLFNBQVMsR0FBRyxDQUFDLEdBQUdQLFNBQVMsQ0FBQ00sR0FBRyxDQUFDQyxTQUFTLEdBQUcsQ0FBQyxHQUFHUCxTQUFTLENBQUNNLEdBQUcsQ0FBQ0MsU0FBUyxHQUFHLENBQUMsR0FBR1AsU0FBUyxDQUFDTSxHQUFHLENBQUNDLFNBQVMsR0FBRyxDQUFDLEdBQUdQLFNBQVMsQ0FBQ00sR0FBRyxDQUFDQyxTQUFTLEdBQUcsQ0FBQyxHQUFHUCxTQUFTLENBQUNNLEdBQUcsQ0FBQ0MsU0FBUyxHQUFHLENBQUMsRUFBRUMsV0FBVztBQUNsZ0I7QUFDQSxTQUFTQyxVQUFVSCxHQUFHO1FBQUVDLFNBQUFBLGlFQUFTO0lBQy9CLElBQUlHLE9BQU9MLGdCQUFnQkMsS0FBS0M7SUFDaEMsNEVBQTRFO0lBQzVFLG9CQUFvQjtJQUNwQix3RUFBd0U7SUFDeEUsMkJBQTJCO0lBQzNCLG1FQUFtRTtJQUNuRSxJQUFJLENBQUNSLHdEQUFRQSxDQUFDVyxPQUFPO1FBQ25CLE1BQU1DLFVBQVU7SUFDbEI7SUFDQSxPQUFPRDtBQUNUO0FBQ0EsK0RBQWVELFNBQVNBLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20tYnJvd3Nlci9zdHJpbmdpZnkuanM/NjMxNyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdmFsaWRhdGUgZnJvbSAnLi92YWxpZGF0ZS5qcyc7XG5cbi8qKlxuICogQ29udmVydCBhcnJheSBvZiAxNiBieXRlIHZhbHVlcyB0byBVVUlEIHN0cmluZyBmb3JtYXQgb2YgdGhlIGZvcm06XG4gKiBYWFhYWFhYWC1YWFhYLVhYWFgtWFhYWC1YWFhYWFhYWFhYWFhcbiAqL1xudmFyIGJ5dGVUb0hleCA9IFtdO1xuZm9yICh2YXIgaSA9IDA7IGkgPCAyNTY7ICsraSkge1xuICBieXRlVG9IZXgucHVzaCgoaSArIDB4MTAwKS50b1N0cmluZygxNikuc2xpY2UoMSkpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHVuc2FmZVN0cmluZ2lmeShhcnIsIG9mZnNldCA9IDApIHtcbiAgLy8gTm90ZTogQmUgY2FyZWZ1bCBlZGl0aW5nIHRoaXMgY29kZSEgIEl0J3MgYmVlbiB0dW5lZCBmb3IgcGVyZm9ybWFuY2VcbiAgLy8gYW5kIHdvcmtzIGluIHdheXMgeW91IG1heSBub3QgZXhwZWN0LiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3V1aWRqcy91dWlkL3B1bGwvNDM0XG4gIC8vXG4gIC8vIE5vdGUgdG8gZnV0dXJlLXNlbGY6IE5vLCB5b3UgY2FuJ3QgcmVtb3ZlIHRoZSBgdG9Mb3dlckNhc2UoKWAgY2FsbC5cbiAgLy8gUkVGOiBodHRwczovL2dpdGh1Yi5jb20vdXVpZGpzL3V1aWQvcHVsbC82NzcjaXNzdWVjb21tZW50LTE3NTczNTEzNTFcbiAgcmV0dXJuIChieXRlVG9IZXhbYXJyW29mZnNldCArIDBdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMV1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAyXV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDNdXSArICctJyArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgNF1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyA1XV0gKyAnLScgKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDZdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgN11dICsgJy0nICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyA4XV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDldXSArICctJyArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMTBdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMTFdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMTJdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMTNdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMTRdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMTVdXSkudG9Mb3dlckNhc2UoKTtcbn1cbmZ1bmN0aW9uIHN0cmluZ2lmeShhcnIsIG9mZnNldCA9IDApIHtcbiAgdmFyIHV1aWQgPSB1bnNhZmVTdHJpbmdpZnkoYXJyLCBvZmZzZXQpO1xuICAvLyBDb25zaXN0ZW5jeSBjaGVjayBmb3IgdmFsaWQgVVVJRC4gIElmIHRoaXMgdGhyb3dzLCBpdCdzIGxpa2VseSBkdWUgdG8gb25lXG4gIC8vIG9mIHRoZSBmb2xsb3dpbmc6XG4gIC8vIC0gT25lIG9yIG1vcmUgaW5wdXQgYXJyYXkgdmFsdWVzIGRvbid0IG1hcCB0byBhIGhleCBvY3RldCAobGVhZGluZyB0b1xuICAvLyBcInVuZGVmaW5lZFwiIGluIHRoZSB1dWlkKVxuICAvLyAtIEludmFsaWQgaW5wdXQgdmFsdWVzIGZvciB0aGUgUkZDIGB2ZXJzaW9uYCBvciBgdmFyaWFudGAgZmllbGRzXG4gIGlmICghdmFsaWRhdGUodXVpZCkpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IoJ1N0cmluZ2lmaWVkIFVVSUQgaXMgaW52YWxpZCcpO1xuICB9XG4gIHJldHVybiB1dWlkO1xufVxuZXhwb3J0IGRlZmF1bHQgc3RyaW5naWZ5OyJdLCJuYW1lcyI6WyJ2YWxpZGF0ZSIsImJ5dGVUb0hleCIsImkiLCJwdXNoIiwidG9TdHJpbmciLCJzbGljZSIsInVuc2FmZVN0cmluZ2lmeSIsImFyciIsIm9mZnNldCIsInRvTG93ZXJDYXNlIiwic3RyaW5naWZ5IiwidXVpZCIsIlR5cGVFcnJvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/uuid/dist/esm-browser/stringify.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/uuid/dist/esm-browser/v4.js":
/*!**************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/v4.js ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _native_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./native.js */ \"(app-pages-browser)/./node_modules/uuid/dist/esm-browser/native.js\");\n/* harmony import */ var _rng_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./rng.js */ \"(app-pages-browser)/./node_modules/uuid/dist/esm-browser/rng.js\");\n/* harmony import */ var _stringify_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./stringify.js */ \"(app-pages-browser)/./node_modules/uuid/dist/esm-browser/stringify.js\");\n\n\n\nfunction v4(options, buf, offset) {\n    if (_native_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].randomUUID && !buf && !options) {\n        return _native_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].randomUUID();\n    }\n    options = options || {};\n    var rnds = options.random || (options.rng || _rng_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])();\n    // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n    rnds[6] = rnds[6] & 0x0f | 0x40;\n    rnds[8] = rnds[8] & 0x3f | 0x80;\n    // Copy bytes to buffer, if provided\n    if (buf) {\n        offset = offset || 0;\n        for(var i = 0; i < 16; ++i){\n            buf[offset + i] = rnds[i];\n        }\n        return buf;\n    }\n    return (0,_stringify_js__WEBPACK_IMPORTED_MODULE_2__.unsafeStringify)(rnds);\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (v4);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLWJyb3dzZXIvdjQuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFpQztBQUNOO0FBQ3NCO0FBQ2pELFNBQVNHLEdBQUdDLE9BQU8sRUFBRUMsR0FBRyxFQUFFQyxNQUFNO0lBQzlCLElBQUlOLGtEQUFNQSxDQUFDTyxVQUFVLElBQUksQ0FBQ0YsT0FBTyxDQUFDRCxTQUFTO1FBQ3pDLE9BQU9KLGtEQUFNQSxDQUFDTyxVQUFVO0lBQzFCO0lBQ0FILFVBQVVBLFdBQVcsQ0FBQztJQUN0QixJQUFJSSxPQUFPSixRQUFRSyxNQUFNLElBQUksQ0FBQ0wsUUFBUUgsR0FBRyxJQUFJQSwrQ0FBRTtJQUUvQyxnRUFBZ0U7SUFDaEVPLElBQUksQ0FBQyxFQUFFLEdBQUdBLElBQUksQ0FBQyxFQUFFLEdBQUcsT0FBTztJQUMzQkEsSUFBSSxDQUFDLEVBQUUsR0FBR0EsSUFBSSxDQUFDLEVBQUUsR0FBRyxPQUFPO0lBRTNCLG9DQUFvQztJQUNwQyxJQUFJSCxLQUFLO1FBQ1BDLFNBQVNBLFVBQVU7UUFDbkIsSUFBSyxJQUFJSSxJQUFJLEdBQUdBLElBQUksSUFBSSxFQUFFQSxFQUFHO1lBQzNCTCxHQUFHLENBQUNDLFNBQVNJLEVBQUUsR0FBR0YsSUFBSSxDQUFDRSxFQUFFO1FBQzNCO1FBQ0EsT0FBT0w7SUFDVDtJQUNBLE9BQU9ILDhEQUFlQSxDQUFDTTtBQUN6QjtBQUNBLCtEQUFlTCxFQUFFQSxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLWJyb3dzZXIvdjQuanM/ZjA1OCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgbmF0aXZlIGZyb20gJy4vbmF0aXZlLmpzJztcbmltcG9ydCBybmcgZnJvbSAnLi9ybmcuanMnO1xuaW1wb3J0IHsgdW5zYWZlU3RyaW5naWZ5IH0gZnJvbSAnLi9zdHJpbmdpZnkuanMnO1xuZnVuY3Rpb24gdjQob3B0aW9ucywgYnVmLCBvZmZzZXQpIHtcbiAgaWYgKG5hdGl2ZS5yYW5kb21VVUlEICYmICFidWYgJiYgIW9wdGlvbnMpIHtcbiAgICByZXR1cm4gbmF0aXZlLnJhbmRvbVVVSUQoKTtcbiAgfVxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgdmFyIHJuZHMgPSBvcHRpb25zLnJhbmRvbSB8fCAob3B0aW9ucy5ybmcgfHwgcm5nKSgpO1xuXG4gIC8vIFBlciA0LjQsIHNldCBiaXRzIGZvciB2ZXJzaW9uIGFuZCBgY2xvY2tfc2VxX2hpX2FuZF9yZXNlcnZlZGBcbiAgcm5kc1s2XSA9IHJuZHNbNl0gJiAweDBmIHwgMHg0MDtcbiAgcm5kc1s4XSA9IHJuZHNbOF0gJiAweDNmIHwgMHg4MDtcblxuICAvLyBDb3B5IGJ5dGVzIHRvIGJ1ZmZlciwgaWYgcHJvdmlkZWRcbiAgaWYgKGJ1Zikge1xuICAgIG9mZnNldCA9IG9mZnNldCB8fCAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMTY7ICsraSkge1xuICAgICAgYnVmW29mZnNldCArIGldID0gcm5kc1tpXTtcbiAgICB9XG4gICAgcmV0dXJuIGJ1ZjtcbiAgfVxuICByZXR1cm4gdW5zYWZlU3RyaW5naWZ5KHJuZHMpO1xufVxuZXhwb3J0IGRlZmF1bHQgdjQ7Il0sIm5hbWVzIjpbIm5hdGl2ZSIsInJuZyIsInVuc2FmZVN0cmluZ2lmeSIsInY0Iiwib3B0aW9ucyIsImJ1ZiIsIm9mZnNldCIsInJhbmRvbVVVSUQiLCJybmRzIiwicmFuZG9tIiwiaSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/uuid/dist/esm-browser/v4.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/uuid/dist/esm-browser/validate.js":
/*!********************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/validate.js ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _regex_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./regex.js */ \"(app-pages-browser)/./node_modules/uuid/dist/esm-browser/regex.js\");\n\nfunction validate(uuid) {\n    return typeof uuid === \"string\" && _regex_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].test(uuid);\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (validate);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLWJyb3dzZXIvdmFsaWRhdGUuanMiLCJtYXBwaW5ncyI6Ijs7QUFBK0I7QUFDL0IsU0FBU0MsU0FBU0MsSUFBSTtJQUNwQixPQUFPLE9BQU9BLFNBQVMsWUFBWUYsaURBQUtBLENBQUNHLElBQUksQ0FBQ0Q7QUFDaEQ7QUFDQSwrREFBZUQsUUFBUUEsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1icm93c2VyL3ZhbGlkYXRlLmpzPzRlOTYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJFR0VYIGZyb20gJy4vcmVnZXguanMnO1xuZnVuY3Rpb24gdmFsaWRhdGUodXVpZCkge1xuICByZXR1cm4gdHlwZW9mIHV1aWQgPT09ICdzdHJpbmcnICYmIFJFR0VYLnRlc3QodXVpZCk7XG59XG5leHBvcnQgZGVmYXVsdCB2YWxpZGF0ZTsiXSwibmFtZXMiOlsiUkVHRVgiLCJ2YWxpZGF0ZSIsInV1aWQiLCJ0ZXN0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/uuid/dist/esm-browser/validate.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./app/globals.css":
/*!*************************!*\
  !*** ./app/globals.css ***!
  \*************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = (\"99c9c6792517\");\nif (true) { module.hot.accept() }\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2FwcC9nbG9iYWxzLmNzcyIsIm1hcHBpbmdzIjoiO0FBQUEsK0RBQWUsY0FBYztBQUM3QixJQUFJLElBQVUsSUFBSSxpQkFBaUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vYXBwL2dsb2JhbHMuY3NzP2FjZjUiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgXCI5OWM5YzY3OTI1MTdcIlxuaWYgKG1vZHVsZS5ob3QpIHsgbW9kdWxlLmhvdC5hY2NlcHQoKSB9XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/globals.css\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/font/google/target.css?{\"path\":\"app/layout.tsx\",\"import\":\"Inter\",\"arguments\":[{\"subsets\":[\"latin\"]}],\"variableName\":\"inter\"}":
/*!********************************************************************************************************************************************************!*\
  !*** ./node_modules/next/font/google/target.css?{"path":"app/layout.tsx","import":"Inter","arguments":[{"subsets":["latin"]}],"variableName":"inter"} ***!
  \********************************************************************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("// extracted by mini-css-extract-plugin\nmodule.exports = {\"style\":{\"fontFamily\":\"'__Inter_d65c78', '__Inter_Fallback_d65c78'\",\"fontStyle\":\"normal\"},\"className\":\"__className_d65c78\"};\n    if(true) {\n      // 1737328936655\n      var cssReload = __webpack_require__(/*! ./node_modules/next/dist/compiled/mini-css-extract-plugin/hmr/hotModuleReplacement.js */ \"(app-pages-browser)/./node_modules/next/dist/compiled/mini-css-extract-plugin/hmr/hotModuleReplacement.js\")(module.id, {\"publicPath\":\"/_next/\",\"esModule\":false,\"locals\":true});\n      module.hot.dispose(cssReload);\n      \n    }\n  //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2ZvbnQvZ29vZ2xlL3RhcmdldC5jc3M/e1wicGF0aFwiOlwiYXBwL2xheW91dC50c3hcIixcImltcG9ydFwiOlwiSW50ZXJcIixcImFyZ3VtZW50c1wiOlt7XCJzdWJzZXRzXCI6W1wibGF0aW5cIl19XSxcInZhcmlhYmxlTmFtZVwiOlwiaW50ZXJcIn0iLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSxrQkFBa0IsU0FBUyxnRkFBZ0Y7QUFDM0csT0FBTyxJQUFVO0FBQ2pCO0FBQ0Esc0JBQXNCLG1CQUFPLENBQUMsd01BQWlJLGNBQWMsc0RBQXNEO0FBQ25PLE1BQU0sVUFBVTtBQUNoQjtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL25leHQvZm9udC9nb29nbGUvdGFyZ2V0LmNzcz80MDBiIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxubW9kdWxlLmV4cG9ydHMgPSB7XCJzdHlsZVwiOntcImZvbnRGYW1pbHlcIjpcIidfX0ludGVyX2Q2NWM3OCcsICdfX0ludGVyX0ZhbGxiYWNrX2Q2NWM3OCdcIixcImZvbnRTdHlsZVwiOlwibm9ybWFsXCJ9LFwiY2xhc3NOYW1lXCI6XCJfX2NsYXNzTmFtZV9kNjVjNzhcIn07XG4gICAgaWYobW9kdWxlLmhvdCkge1xuICAgICAgLy8gMTczNzMyODkzNjY1NVxuICAgICAgdmFyIGNzc1JlbG9hZCA9IHJlcXVpcmUoXCIvaG9tZS9zb3VyYWJoN2l3YXJpL0xvY2FsX2RldmVsb3BtZW50L2FhL3VpL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY29tcGlsZWQvbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4vaG1yL2hvdE1vZHVsZVJlcGxhY2VtZW50LmpzXCIpKG1vZHVsZS5pZCwge1wicHVibGljUGF0aFwiOlwiL19uZXh0L1wiLFwiZXNNb2R1bGVcIjpmYWxzZSxcImxvY2Fsc1wiOnRydWV9KTtcbiAgICAgIG1vZHVsZS5ob3QuZGlzcG9zZShjc3NSZWxvYWQpO1xuICAgICAgXG4gICAgfVxuICAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/font/google/target.css?{\"path\":\"app/layout.tsx\",\"import\":\"Inter\",\"arguments\":[{\"subsets\":[\"latin\"]}],\"variableName\":\"inter\"}\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@0no-co/graphql.web/dist/graphql.web.mjs":
/*!***************************************************************!*\
  !*** ./node_modules/@0no-co/graphql.web/dist/graphql.web.mjs ***!
  \***************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BREAK: function() { return /* binding */ c; },\n/* harmony export */   GraphQLError: function() { return /* binding */ GraphQLError; },\n/* harmony export */   Kind: function() { return /* binding */ e1; },\n/* harmony export */   OperationTypeNode: function() { return /* binding */ r; },\n/* harmony export */   Source: function() { return /* binding */ Source; },\n/* harmony export */   isSelectionNode: function() { return /* binding */ isSelectionNode; },\n/* harmony export */   parse: function() { return /* binding */ parse; },\n/* harmony export */   parseType: function() { return /* binding */ parseType; },\n/* harmony export */   parseValue: function() { return /* binding */ parseValue; },\n/* harmony export */   print: function() { return /* binding */ print; },\n/* harmony export */   printBlockString: function() { return /* binding */ printBlockString; },\n/* harmony export */   printString: function() { return /* binding */ printString; },\n/* harmony export */   valueFromASTUntyped: function() { return /* binding */ valueFromASTUntyped; },\n/* harmony export */   valueFromTypeNode: function() { return /* binding */ valueFromTypeNode; },\n/* harmony export */   visit: function() { return /* binding */ visit; }\n/* harmony export */ });\nvar e1 = {\n    NAME: \"Name\",\n    DOCUMENT: \"Document\",\n    OPERATION_DEFINITION: \"OperationDefinition\",\n    VARIABLE_DEFINITION: \"VariableDefinition\",\n    SELECTION_SET: \"SelectionSet\",\n    FIELD: \"Field\",\n    ARGUMENT: \"Argument\",\n    FRAGMENT_SPREAD: \"FragmentSpread\",\n    INLINE_FRAGMENT: \"InlineFragment\",\n    FRAGMENT_DEFINITION: \"FragmentDefinition\",\n    VARIABLE: \"Variable\",\n    INT: \"IntValue\",\n    FLOAT: \"FloatValue\",\n    STRING: \"StringValue\",\n    BOOLEAN: \"BooleanValue\",\n    NULL: \"NullValue\",\n    ENUM: \"EnumValue\",\n    LIST: \"ListValue\",\n    OBJECT: \"ObjectValue\",\n    OBJECT_FIELD: \"ObjectField\",\n    DIRECTIVE: \"Directive\",\n    NAMED_TYPE: \"NamedType\",\n    LIST_TYPE: \"ListType\",\n    NON_NULL_TYPE: \"NonNullType\"\n};\nvar r = {\n    QUERY: \"query\",\n    MUTATION: \"mutation\",\n    SUBSCRIPTION: \"subscription\"\n};\nclass GraphQLError extends Error {\n    toJSON() {\n        return {\n            ...this,\n            message: this.message\n        };\n    }\n    toString() {\n        return this.message;\n    }\n    get [Symbol.toStringTag]() {\n        return \"GraphQLError\";\n    }\n    constructor(e1, r, n, i, t, a, l){\n        super(e1);\n        this.name = \"GraphQLError\";\n        this.message = e1;\n        if (t) {\n            this.path = t;\n        }\n        if (r) {\n            this.nodes = Array.isArray(r) ? r : [\n                r\n            ];\n        }\n        if (n) {\n            this.source = n;\n        }\n        if (i) {\n            this.positions = i;\n        }\n        if (a) {\n            this.originalError = a;\n        }\n        var o = l;\n        if (!o && a) {\n            var u = a.extensions;\n            if (u && \"object\" == typeof u) {\n                o = u;\n            }\n        }\n        this.extensions = o || {};\n    }\n}\nvar n;\nvar i;\nfunction error(e1) {\n    return new GraphQLError(\"Syntax Error: Unexpected token at \".concat(i, \" in \").concat(e1));\n}\nfunction advance(e1) {\n    e1.lastIndex = i;\n    if (e1.test(n)) {\n        return n.slice(i, i = e1.lastIndex);\n    }\n}\nvar t = / +(?=[^\\s])/y;\nfunction blockString(e1) {\n    var r = e1.split(\"\\n\");\n    var n = \"\";\n    var i = 0;\n    var a = 0;\n    var l = r.length - 1;\n    for(var o = 0; o < r.length; o++){\n        t.lastIndex = 0;\n        if (t.test(r[o])) {\n            if (o && (!i || t.lastIndex < i)) {\n                i = t.lastIndex;\n            }\n            a = a || o;\n            l = o;\n        }\n    }\n    for(var u = a; u <= l; u++){\n        if (u !== a) {\n            n += \"\\n\";\n        }\n        n += r[u].slice(i).replace(/\\\\\"\"\"/g, '\"\"\"');\n    }\n    return n;\n}\nfunction ignored() {\n    for(var e1 = 0 | n.charCodeAt(i++); 9 === e1 || 10 === e1 || 13 === e1 || 32 === e1 || 35 === e1 || 44 === e1 || 65279 === e1; e1 = 0 | n.charCodeAt(i++)){\n        if (35 === e1) {\n            while(10 !== (e1 = n.charCodeAt(i++)) && 13 !== e1){}\n        }\n    }\n    i--;\n}\nvar a = /[_A-Za-z]\\w*/y;\nvar l = new RegExp(\"(?:(null|true|false)|\\\\$(\" + a.source + ')|(-?\\\\d+)((?:\\\\.\\\\d+)?[eE][+-]?\\\\d+|\\\\.\\\\d+)?|(\"\"\"(?:\"\"\"|(?:[\\\\s\\\\S]*?[^\\\\\\\\])\"\"\"))|(\"(?:\"|[^\\\\r\\\\n]*?[^\\\\\\\\]\"))|(' + a.source + \"))\", \"y\");\nvar o = function(e1) {\n    e1[e1.Const = 1] = \"Const\";\n    e1[e1.Var = 2] = \"Var\";\n    e1[e1.Int = 3] = \"Int\";\n    e1[e1.Float = 4] = \"Float\";\n    e1[e1.BlockString = 5] = \"BlockString\";\n    e1[e1.String = 6] = \"String\";\n    e1[e1.Enum = 7] = \"Enum\";\n    return e1;\n}(o || {});\nvar u = /\\\\/;\nfunction value(e1) {\n    var r;\n    var t;\n    l.lastIndex = i;\n    if (91 === n.charCodeAt(i)) {\n        i++;\n        ignored();\n        var d = [];\n        while(93 !== n.charCodeAt(i)){\n            d.push(value(e1));\n        }\n        i++;\n        ignored();\n        return {\n            kind: \"ListValue\",\n            values: d\n        };\n    } else if (123 === n.charCodeAt(i)) {\n        i++;\n        ignored();\n        var s = [];\n        while(125 !== n.charCodeAt(i)){\n            if (null == (r = advance(a))) {\n                throw error(\"ObjectField\");\n            }\n            ignored();\n            if (58 !== n.charCodeAt(i++)) {\n                throw error(\"ObjectField\");\n            }\n            ignored();\n            s.push({\n                kind: \"ObjectField\",\n                name: {\n                    kind: \"Name\",\n                    value: r\n                },\n                value: value(e1)\n            });\n        }\n        i++;\n        ignored();\n        return {\n            kind: \"ObjectValue\",\n            fields: s\n        };\n    } else if (null != (t = l.exec(n))) {\n        i = l.lastIndex;\n        ignored();\n        if (null != (r = t[o.Const])) {\n            return \"null\" === r ? {\n                kind: \"NullValue\"\n            } : {\n                kind: \"BooleanValue\",\n                value: \"true\" === r\n            };\n        } else if (null != (r = t[o.Var])) {\n            if (e1) {\n                throw error(\"Variable\");\n            } else {\n                return {\n                    kind: \"Variable\",\n                    name: {\n                        kind: \"Name\",\n                        value: r\n                    }\n                };\n            }\n        } else if (null != (r = t[o.Int])) {\n            var v;\n            if (null != (v = t[o.Float])) {\n                return {\n                    kind: \"FloatValue\",\n                    value: r + v\n                };\n            } else {\n                return {\n                    kind: \"IntValue\",\n                    value: r\n                };\n            }\n        } else if (null != (r = t[o.BlockString])) {\n            return {\n                kind: \"StringValue\",\n                value: blockString(r.slice(3, -3)),\n                block: !0\n            };\n        } else if (null != (r = t[o.String])) {\n            return {\n                kind: \"StringValue\",\n                value: u.test(r) ? JSON.parse(r) : r.slice(1, -1),\n                block: !1\n            };\n        } else if (null != (r = t[o.Enum])) {\n            return {\n                kind: \"EnumValue\",\n                value: r\n            };\n        }\n    }\n    throw error(\"Value\");\n}\nfunction arguments_(e1) {\n    if (40 === n.charCodeAt(i)) {\n        var r = [];\n        i++;\n        ignored();\n        var t;\n        do {\n            if (null == (t = advance(a))) {\n                throw error(\"Argument\");\n            }\n            ignored();\n            if (58 !== n.charCodeAt(i++)) {\n                throw error(\"Argument\");\n            }\n            ignored();\n            r.push({\n                kind: \"Argument\",\n                name: {\n                    kind: \"Name\",\n                    value: t\n                },\n                value: value(e1)\n            });\n        }while (41 !== n.charCodeAt(i));\n        i++;\n        ignored();\n        return r;\n    }\n}\nfunction directives(e1) {\n    if (64 === n.charCodeAt(i)) {\n        var r = [];\n        var t;\n        do {\n            i++;\n            if (null == (t = advance(a))) {\n                throw error(\"Directive\");\n            }\n            ignored();\n            r.push({\n                kind: \"Directive\",\n                name: {\n                    kind: \"Name\",\n                    value: t\n                },\n                arguments: arguments_(e1)\n            });\n        }while (64 === n.charCodeAt(i));\n        return r;\n    }\n}\nfunction type() {\n    var e1;\n    var r = 0;\n    while(91 === n.charCodeAt(i)){\n        r++;\n        i++;\n        ignored();\n    }\n    if (null == (e1 = advance(a))) {\n        throw error(\"NamedType\");\n    }\n    ignored();\n    var t = {\n        kind: \"NamedType\",\n        name: {\n            kind: \"Name\",\n            value: e1\n        }\n    };\n    do {\n        if (33 === n.charCodeAt(i)) {\n            i++;\n            ignored();\n            t = {\n                kind: \"NonNullType\",\n                type: t\n            };\n        }\n        if (r) {\n            if (93 !== n.charCodeAt(i++)) {\n                throw error(\"NamedType\");\n            }\n            ignored();\n            t = {\n                kind: \"ListType\",\n                type: t\n            };\n        }\n    }while (r--);\n    return t;\n}\nvar d = new RegExp(\"(?:(\\\\.{3})|(\" + a.source + \"))\", \"y\");\nvar s = function(e1) {\n    e1[e1.Spread = 1] = \"Spread\";\n    e1[e1.Name = 2] = \"Name\";\n    return e1;\n}(s || {});\nfunction selectionSet() {\n    var e1 = [];\n    var r;\n    var t;\n    do {\n        d.lastIndex = i;\n        if (null != (t = d.exec(n))) {\n            i = d.lastIndex;\n            if (null != t[s.Spread]) {\n                ignored();\n                var l = advance(a);\n                if (null != l && \"on\" !== l) {\n                    ignored();\n                    e1.push({\n                        kind: \"FragmentSpread\",\n                        name: {\n                            kind: \"Name\",\n                            value: l\n                        },\n                        directives: directives(!1)\n                    });\n                } else {\n                    ignored();\n                    if (\"on\" === l) {\n                        if (null == (l = advance(a))) {\n                            throw error(\"NamedType\");\n                        }\n                        ignored();\n                    }\n                    var o = directives(!1);\n                    if (123 !== n.charCodeAt(i++)) {\n                        throw error(\"InlineFragment\");\n                    }\n                    ignored();\n                    e1.push({\n                        kind: \"InlineFragment\",\n                        typeCondition: l ? {\n                            kind: \"NamedType\",\n                            name: {\n                                kind: \"Name\",\n                                value: l\n                            }\n                        } : void 0,\n                        directives: o,\n                        selectionSet: selectionSet()\n                    });\n                }\n            } else if (null != (r = t[s.Name])) {\n                var u = void 0;\n                ignored();\n                if (58 === n.charCodeAt(i)) {\n                    i++;\n                    ignored();\n                    u = r;\n                    if (null == (r = advance(a))) {\n                        throw error(\"Field\");\n                    }\n                    ignored();\n                }\n                var v = arguments_(!1);\n                ignored();\n                var c = directives(!1);\n                var f = void 0;\n                if (123 === n.charCodeAt(i)) {\n                    i++;\n                    ignored();\n                    f = selectionSet();\n                }\n                e1.push({\n                    kind: \"Field\",\n                    alias: u ? {\n                        kind: \"Name\",\n                        value: u\n                    } : void 0,\n                    name: {\n                        kind: \"Name\",\n                        value: r\n                    },\n                    arguments: v,\n                    directives: c,\n                    selectionSet: f\n                });\n            }\n        } else {\n            throw error(\"SelectionSet\");\n        }\n    }while (125 !== n.charCodeAt(i));\n    i++;\n    ignored();\n    return {\n        kind: \"SelectionSet\",\n        selections: e1\n    };\n}\nfunction fragmentDefinition() {\n    var e1;\n    var r;\n    if (null == (e1 = advance(a))) {\n        throw error(\"FragmentDefinition\");\n    }\n    ignored();\n    if (\"on\" !== advance(a)) {\n        throw error(\"FragmentDefinition\");\n    }\n    ignored();\n    if (null == (r = advance(a))) {\n        throw error(\"FragmentDefinition\");\n    }\n    ignored();\n    var t = directives(!1);\n    if (123 !== n.charCodeAt(i++)) {\n        throw error(\"FragmentDefinition\");\n    }\n    ignored();\n    return {\n        kind: \"FragmentDefinition\",\n        name: {\n            kind: \"Name\",\n            value: e1\n        },\n        typeCondition: {\n            kind: \"NamedType\",\n            name: {\n                kind: \"Name\",\n                value: r\n            }\n        },\n        directives: t,\n        selectionSet: selectionSet()\n    };\n}\nvar v = /(?:query|mutation|subscription|fragment)/y;\nfunction operationDefinition(e1) {\n    var r;\n    var t;\n    var l;\n    if (e1) {\n        ignored();\n        r = advance(a);\n        t = function variableDefinitions() {\n            ignored();\n            if (40 === n.charCodeAt(i)) {\n                var e1 = [];\n                i++;\n                ignored();\n                var r;\n                do {\n                    if (36 !== n.charCodeAt(i++)) {\n                        throw error(\"Variable\");\n                    }\n                    if (null == (r = advance(a))) {\n                        throw error(\"Variable\");\n                    }\n                    ignored();\n                    if (58 !== n.charCodeAt(i++)) {\n                        throw error(\"VariableDefinition\");\n                    }\n                    ignored();\n                    var t = type();\n                    var l = void 0;\n                    if (61 === n.charCodeAt(i)) {\n                        i++;\n                        ignored();\n                        l = value(!0);\n                    }\n                    ignored();\n                    e1.push({\n                        kind: \"VariableDefinition\",\n                        variable: {\n                            kind: \"Variable\",\n                            name: {\n                                kind: \"Name\",\n                                value: r\n                            }\n                        },\n                        type: t,\n                        defaultValue: l,\n                        directives: directives(!0)\n                    });\n                }while (41 !== n.charCodeAt(i));\n                i++;\n                ignored();\n                return e1;\n            }\n        }();\n        l = directives(!1);\n    }\n    if (123 === n.charCodeAt(i)) {\n        i++;\n        ignored();\n        return {\n            kind: \"OperationDefinition\",\n            operation: e1 || \"query\",\n            name: r ? {\n                kind: \"Name\",\n                value: r\n            } : void 0,\n            variableDefinitions: t,\n            directives: l,\n            selectionSet: selectionSet()\n        };\n    }\n}\nfunction parse(e1, r) {\n    i = 0;\n    return function document(e1, r) {\n        var n;\n        var t;\n        ignored();\n        var a = [];\n        do {\n            if (\"fragment\" === (n = advance(v))) {\n                ignored();\n                a.push(fragmentDefinition());\n            } else if (null != (t = operationDefinition(n))) {\n                a.push(t);\n            } else {\n                throw error(\"Document\");\n            }\n        }while (i < e1.length);\n        if (!r) {\n            var l;\n            return {\n                kind: \"Document\",\n                definitions: a,\n                set loc (e){\n                    l = e;\n                },\n                get loc () {\n                    if (!l) {\n                        l = {\n                            start: 0,\n                            end: e1.length,\n                            startToken: void 0,\n                            endToken: void 0,\n                            source: {\n                                body: e1,\n                                name: \"graphql.web\",\n                                locationOffset: {\n                                    line: 1,\n                                    column: 1\n                                }\n                            }\n                        };\n                    }\n                    return l;\n                }\n            };\n        }\n        return {\n            kind: \"Document\",\n            definitions: a\n        };\n    }(n = \"string\" == typeof e1.body ? e1.body : e1, r && r.noLocation);\n}\nfunction parseValue(e1, r) {\n    n = \"string\" == typeof e1.body ? e1.body : e1;\n    i = 0;\n    ignored();\n    return value(!1);\n}\nfunction parseType(e1, r) {\n    n = \"string\" == typeof e1.body ? e1.body : e1;\n    i = 0;\n    return type();\n}\nvar c = {};\nfunction visit(e1, r) {\n    var n = [];\n    var i = [];\n    try {\n        var t = function traverse(e1, t, a) {\n            var l = !1;\n            var o = r[e1.kind] && r[e1.kind].enter || r[e1.kind] || r.enter;\n            var u = o && o.call(r, e1, t, a, i, n);\n            if (!1 === u) {\n                return e1;\n            } else if (null === u) {\n                return null;\n            } else if (u === c) {\n                throw c;\n            } else if (u && \"string\" == typeof u.kind) {\n                l = u !== e1;\n                e1 = u;\n            }\n            if (a) {\n                n.push(a);\n            }\n            var d;\n            var s = {\n                ...e1\n            };\n            for(var v in e1){\n                i.push(v);\n                var f = e1[v];\n                if (Array.isArray(f)) {\n                    var g = [];\n                    for(var m = 0; m < f.length; m++){\n                        if (null != f[m] && \"string\" == typeof f[m].kind) {\n                            n.push(e1);\n                            i.push(m);\n                            d = traverse(f[m], m, f);\n                            i.pop();\n                            n.pop();\n                            if (null == d) {\n                                l = !0;\n                            } else {\n                                l = l || d !== f[m];\n                                g.push(d);\n                            }\n                        }\n                    }\n                    f = g;\n                } else if (null != f && \"string\" == typeof f.kind) {\n                    if (void 0 !== (d = traverse(f, v, e1))) {\n                        l = l || f !== d;\n                        f = d;\n                    }\n                }\n                i.pop();\n                if (l) {\n                    s[v] = f;\n                }\n            }\n            if (a) {\n                n.pop();\n            }\n            var p = r[e1.kind] && r[e1.kind].leave || r.leave;\n            var h = p && p.call(r, e1, t, a, i, n);\n            if (h === c) {\n                throw c;\n            } else if (void 0 !== h) {\n                return h;\n            } else if (void 0 !== u) {\n                return l ? s : u;\n            } else {\n                return l ? s : e1;\n            }\n        }(e1);\n        return void 0 !== t && !1 !== t ? t : e1;\n    } catch (r) {\n        if (r !== c) {\n            throw r;\n        }\n        return e1;\n    }\n}\nfunction mapJoin(e1, r, n) {\n    var i = \"\";\n    for(var t = 0; t < e1.length; t++){\n        if (t) {\n            i += r;\n        }\n        i += n(e1[t]);\n    }\n    return i;\n}\nfunction printString(e1) {\n    return JSON.stringify(e1);\n}\nfunction printBlockString(e1) {\n    return '\"\"\"\\n' + e1.replace(/\"\"\"/g, '\\\\\"\"\"') + '\\n\"\"\"';\n}\nvar f = \"\\n\";\nvar g = {\n    OperationDefinition (e1) {\n        var r = e1.operation;\n        if (e1.name) {\n            r += \" \" + e1.name.value;\n        }\n        if (e1.variableDefinitions && e1.variableDefinitions.length) {\n            if (!e1.name) {\n                r += \" \";\n            }\n            r += \"(\" + mapJoin(e1.variableDefinitions, \", \", g.VariableDefinition) + \")\";\n        }\n        if (e1.directives && e1.directives.length) {\n            r += \" \" + mapJoin(e1.directives, \" \", g.Directive);\n        }\n        return \"query\" !== r ? r + \" \" + g.SelectionSet(e1.selectionSet) : g.SelectionSet(e1.selectionSet);\n    },\n    VariableDefinition (e1) {\n        var r = g.Variable(e1.variable) + \": \" + _print(e1.type);\n        if (e1.defaultValue) {\n            r += \" = \" + _print(e1.defaultValue);\n        }\n        if (e1.directives && e1.directives.length) {\n            r += \" \" + mapJoin(e1.directives, \" \", g.Directive);\n        }\n        return r;\n    },\n    Field (e1) {\n        var r = e1.alias ? e1.alias.value + \": \" + e1.name.value : e1.name.value;\n        if (e1.arguments && e1.arguments.length) {\n            var n = mapJoin(e1.arguments, \", \", g.Argument);\n            if (r.length + n.length + 2 > 80) {\n                r += \"(\" + (f += \"  \") + mapJoin(e1.arguments, f, g.Argument) + (f = f.slice(0, -2)) + \")\";\n            } else {\n                r += \"(\" + n + \")\";\n            }\n        }\n        if (e1.directives && e1.directives.length) {\n            r += \" \" + mapJoin(e1.directives, \" \", g.Directive);\n        }\n        if (e1.selectionSet && e1.selectionSet.selections.length) {\n            r += \" \" + g.SelectionSet(e1.selectionSet);\n        }\n        return r;\n    },\n    StringValue (e1) {\n        if (e1.block) {\n            return printBlockString(e1.value).replace(/\\n/g, f);\n        } else {\n            return printString(e1.value);\n        }\n    },\n    BooleanValue: (e1)=>\"\" + e1.value,\n    NullValue: (e1)=>\"null\",\n    IntValue: (e1)=>e1.value,\n    FloatValue: (e1)=>e1.value,\n    EnumValue: (e1)=>e1.value,\n    Name: (e1)=>e1.value,\n    Variable: (e1)=>\"$\" + e1.name.value,\n    ListValue: (e1)=>\"[\" + mapJoin(e1.values, \", \", _print) + \"]\",\n    ObjectValue: (e1)=>\"{\" + mapJoin(e1.fields, \", \", g.ObjectField) + \"}\",\n    ObjectField: (e1)=>e1.name.value + \": \" + _print(e1.value),\n    Document (e1) {\n        if (!e1.definitions || !e1.definitions.length) {\n            return \"\";\n        }\n        return mapJoin(e1.definitions, \"\\n\\n\", _print);\n    },\n    SelectionSet: (e1)=>\"{\" + (f += \"  \") + mapJoin(e1.selections, f, _print) + (f = f.slice(0, -2)) + \"}\",\n    Argument: (e1)=>e1.name.value + \": \" + _print(e1.value),\n    FragmentSpread (e1) {\n        var r = \"...\" + e1.name.value;\n        if (e1.directives && e1.directives.length) {\n            r += \" \" + mapJoin(e1.directives, \" \", g.Directive);\n        }\n        return r;\n    },\n    InlineFragment (e1) {\n        var r = \"...\";\n        if (e1.typeCondition) {\n            r += \" on \" + e1.typeCondition.name.value;\n        }\n        if (e1.directives && e1.directives.length) {\n            r += \" \" + mapJoin(e1.directives, \" \", g.Directive);\n        }\n        return r += \" \" + g.SelectionSet(e1.selectionSet);\n    },\n    FragmentDefinition (e1) {\n        var r = \"fragment \" + e1.name.value;\n        r += \" on \" + e1.typeCondition.name.value;\n        if (e1.directives && e1.directives.length) {\n            r += \" \" + mapJoin(e1.directives, \" \", g.Directive);\n        }\n        return r + \" \" + g.SelectionSet(e1.selectionSet);\n    },\n    Directive (e1) {\n        var r = \"@\" + e1.name.value;\n        if (e1.arguments && e1.arguments.length) {\n            r += \"(\" + mapJoin(e1.arguments, \", \", g.Argument) + \")\";\n        }\n        return r;\n    },\n    NamedType: (e1)=>e1.name.value,\n    ListType: (e1)=>\"[\" + _print(e1.type) + \"]\",\n    NonNullType: (e1)=>_print(e1.type) + \"!\"\n};\nvar _print = (e1)=>g[e1.kind](e1);\nfunction print(e1) {\n    f = \"\\n\";\n    return g[e1.kind] ? g[e1.kind](e1) : \"\";\n}\nfunction valueFromASTUntyped(e1, r) {\n    switch(e1.kind){\n        case \"NullValue\":\n            return null;\n        case \"IntValue\":\n            return parseInt(e1.value, 10);\n        case \"FloatValue\":\n            return parseFloat(e1.value);\n        case \"StringValue\":\n        case \"EnumValue\":\n        case \"BooleanValue\":\n            return e1.value;\n        case \"ListValue\":\n            var n = [];\n            for(var i = 0, t = e1.values.length; i < t; i++){\n                n.push(valueFromASTUntyped(e1.values[i], r));\n            }\n            return n;\n        case \"ObjectValue\":\n            var a = Object.create(null);\n            for(var l = 0, o = e1.fields.length; l < o; l++){\n                var u = e1.fields[l];\n                a[u.name.value] = valueFromASTUntyped(u.value, r);\n            }\n            return a;\n        case \"Variable\":\n            return r && r[e1.name.value];\n    }\n}\nfunction valueFromTypeNode(e1, r, n) {\n    if (\"Variable\" === e1.kind) {\n        return n ? valueFromTypeNode(n[e1.name.value], r, n) : void 0;\n    } else if (\"NonNullType\" === r.kind) {\n        return \"NullValue\" !== e1.kind ? valueFromTypeNode(e1, r, n) : void 0;\n    } else if (\"NullValue\" === e1.kind) {\n        return null;\n    } else if (\"ListType\" === r.kind) {\n        if (\"ListValue\" === e1.kind) {\n            var i = [];\n            for(var t = 0, a = e1.values.length; t < a; t++){\n                var l = valueFromTypeNode(e1.values[t], r.type, n);\n                if (void 0 === l) {\n                    return;\n                } else {\n                    i.push(l);\n                }\n            }\n            return i;\n        }\n    } else if (\"NamedType\" === r.kind) {\n        switch(r.name.value){\n            case \"Int\":\n            case \"Float\":\n            case \"String\":\n            case \"Bool\":\n                return r.name.value + \"Value\" === e1.kind ? valueFromASTUntyped(e1, n) : void 0;\n            default:\n                return valueFromASTUntyped(e1, n);\n        }\n    }\n}\nfunction isSelectionNode(e1) {\n    return \"Field\" === e1.kind || \"FragmentSpread\" === e1.kind || \"InlineFragment\" === e1.kind;\n}\nfunction Source(e1, r, n) {\n    return {\n        body: e1,\n        name: r,\n        locationOffset: n || {\n            line: 1,\n            column: 1\n        }\n    };\n}\n_c = Source;\n //# sourceMappingURL=graphql.web.mjs.map\nvar _c;\n$RefreshReg$(_c, \"Source\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@0no-co/graphql.web/dist/graphql.web.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@copilotkit/react-core/dist/chunk-2KCEHGSI.mjs":
/*!*********************************************************************!*\
  !*** ./node_modules/@copilotkit/react-core/dist/chunk-2KCEHGSI.mjs ***!
  \*********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ToastProvider: function() { return /* binding */ ToastProvider; },\n/* harmony export */   useToast: function() { return /* binding */ useToast; }\n/* harmony export */ });\n/* harmony import */ var _chunk_O7ARI5CV_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./chunk-O7ARI5CV.mjs */ \"(app-pages-browser)/./node_modules/@copilotkit/react-core/dist/chunk-O7ARI5CV.mjs\");\n/* harmony import */ var _chunk_SKC7AJIV_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./chunk-SKC7AJIV.mjs */ \"(app-pages-browser)/./node_modules/@copilotkit/react-core/dist/chunk-SKC7AJIV.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react/jsx-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-runtime.js\");\nvar _s = $RefreshSig$(), _s1 = $RefreshSig$();\n\n\n// src/components/toast/toast-provider.tsx\n\n\nvar ToastContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(void 0);\nfunction useToast() {\n    _s();\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(ToastContext);\n    if (!context) {\n        throw new Error(\"useToast must be used within a ToastProvider\");\n    }\n    return context;\n}\n_s(useToast, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nfunction ToastProvider(param) {\n    let { enabled, children } = param;\n    _s1();\n    const [toasts, setToasts] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);\n    const addToast = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((toast)=>{\n        const id = Math.random().toString(36).substring(2, 9);\n        setToasts((currentToasts)=>[\n                ...currentToasts,\n                (0,_chunk_SKC7AJIV_mjs__WEBPACK_IMPORTED_MODULE_2__.__spreadProps)((0,_chunk_SKC7AJIV_mjs__WEBPACK_IMPORTED_MODULE_2__.__spreadValues)({}, toast), {\n                    id\n                })\n            ]);\n        if (toast.duration) {\n            setTimeout(()=>{\n                removeToast(id);\n            }, toast.duration);\n        }\n    }, []);\n    const addGraphQLErrorsToast = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((errors)=>{\n        const errorsToRender = errors.map((error, idx)=>{\n            var _a;\n            const message = error.message;\n            const code = (_a = error.extensions) == null ? void 0 : _a.code;\n            return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"div\", {\n                style: {\n                    marginTop: idx === 0 ? 0 : 10,\n                    marginBottom: 14\n                },\n                children: [\n                    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_chunk_O7ARI5CV_mjs__WEBPACK_IMPORTED_MODULE_3__.ExclamationMarkIcon, {\n                        style: {\n                            marginBottom: 4\n                        }\n                    }),\n                    code && /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"div\", {\n                        style: {\n                            fontWeight: \"600\",\n                            marginBottom: 4\n                        },\n                        children: [\n                            \"Copilot Cloud Error:\",\n                            \" \",\n                            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"span\", {\n                                style: {\n                                    fontFamily: \"monospace\",\n                                    fontWeight: \"normal\"\n                                },\n                                children: code\n                            })\n                        ]\n                    }),\n                    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\", {\n                        children: message\n                    })\n                ]\n            }, idx);\n        });\n        addToast({\n            type: \"error\",\n            message: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"div\", {\n                style: {\n                    fontSize: \"13px\",\n                    maxWidth: \"600px\"\n                },\n                children: [\n                    errorsToRender,\n                    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\", {\n                        style: {\n                            fontSize: \"11px\",\n                            opacity: 0.75\n                        },\n                        children: \"NOTE: This is a Copilot Cloud error, and it only displays during local development.\"\n                    })\n                ]\n            })\n        });\n    }, []);\n    const removeToast = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((id)=>{\n        setToasts((currentToasts)=>currentToasts.filter((toast)=>toast.id !== id));\n    }, []);\n    const value = {\n        toasts,\n        addToast,\n        addGraphQLErrorsToast,\n        removeToast,\n        enabled\n    };\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(ToastContext.Provider, {\n        value,\n        children: [\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"div\", {\n                style: {\n                    position: \"fixed\",\n                    bottom: \"1rem\",\n                    left: \"50%\",\n                    transform: \"translateX(-50%)\",\n                    zIndex: 50,\n                    display: \"flex\",\n                    flexDirection: \"column\",\n                    gap: \"0.5rem\"\n                },\n                children: [\n                    toasts.length > 1 && /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\", {\n                        style: {\n                            textAlign: \"right\"\n                        },\n                        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"button\", {\n                            onClick: ()=>setToasts([]),\n                            style: {\n                                padding: \"4px 8px\",\n                                fontSize: \"12px\",\n                                cursor: \"pointer\",\n                                background: \"white\",\n                                border: \"1px solid rgba(0,0,0,0.2)\",\n                                borderRadius: \"4px\"\n                            },\n                            children: \"Close All\"\n                        })\n                    }),\n                    toasts.map((toast)=>/* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Toast, {\n                            message: toast.message,\n                            type: toast.type,\n                            onClose: ()=>removeToast(toast.id)\n                        }, toast.id))\n                ]\n            }),\n            children\n        ]\n    });\n}\n_s1(ToastProvider, \"FHGRW+8oXiVx6ZuKqNd228tGiH4=\");\n_c = ToastProvider;\nfunction Toast(param) {\n    let { message, type = \"info\", onClose } = param;\n    const bgColors = {\n        info: \"#3b82f6\",\n        success: \"#22c55e\",\n        warning: \"#eab308\",\n        error: \"#ef4444\"\n    };\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"div\", {\n        style: {\n            backgroundColor: bgColors[type],\n            color: \"white\",\n            padding: \"0.5rem 1rem\",\n            borderRadius: \"0.25rem\",\n            boxShadow: \"0 2px 4px rgba(0,0,0,0.1)\",\n            position: \"relative\",\n            minWidth: \"200px\"\n        },\n        children: [\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\", {\n                children: message\n            }),\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"button\", {\n                onClick: onClose,\n                style: {\n                    position: \"absolute\",\n                    top: \"0\",\n                    right: \"0\",\n                    background: \"none\",\n                    border: \"none\",\n                    color: \"white\",\n                    cursor: \"pointer\",\n                    padding: \"0.5rem\",\n                    fontSize: \"1rem\"\n                },\n                children: \"✕\"\n            })\n        ]\n    });\n}\n_c1 = Toast;\n //# sourceMappingURL=chunk-2KCEHGSI.mjs.map\nvar _c, _c1;\n$RefreshReg$(_c, \"ToastProvider\");\n$RefreshReg$(_c1, \"Toast\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@copilotkit/react-core/dist/chunk-2KCEHGSI.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@copilotkit/react-core/dist/chunk-5FHSUKQL.mjs":
/*!*********************************************************************!*\
  !*** ./node_modules/@copilotkit/react-core/dist/chunk-5FHSUKQL.mjs ***!
  \*********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   use_flat_category_store_default: function() { return /* binding */ use_flat_category_store_default; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var _copilotkit_shared__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @copilotkit/shared */ \"(app-pages-browser)/./node_modules/@copilotkit/shared/dist/chunk-RIPX6APP.mjs\");\n// src/hooks/use-flat-category-store.ts\nvar _s = $RefreshSig$();\n\n\nvar useFlatCategoryStore = ()=>{\n    _s();\n    const [elements, dispatch] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useReducer)(flatCategoryStoreReducer, /* @__PURE__ */ new Map());\n    const addElement = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((value, categories)=>{\n        const newId = (0,_copilotkit_shared__WEBPACK_IMPORTED_MODULE_1__.randomId)();\n        dispatch({\n            type: \"ADD_ELEMENT\",\n            value,\n            id: newId,\n            categories\n        });\n        return newId;\n    }, []);\n    const removeElement = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((id)=>{\n        dispatch({\n            type: \"REMOVE_ELEMENT\",\n            id\n        });\n    }, []);\n    const allElements = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((categories)=>{\n        const categoriesSet = new Set(categories);\n        const result = [];\n        elements.forEach((element)=>{\n            if (setsHaveIntersection(categoriesSet, element.categories)) {\n                result.push(element.value);\n            }\n        });\n        return result;\n    }, [\n        elements\n    ]);\n    return {\n        addElement,\n        removeElement,\n        allElements\n    };\n};\n_s(useFlatCategoryStore, \"SRajDKC9gM/DKGNoNrIDvmuVHpw=\");\nvar use_flat_category_store_default = useFlatCategoryStore;\nfunction flatCategoryStoreReducer(state, action) {\n    switch(action.type){\n        case \"ADD_ELEMENT\":\n            {\n                const { value, id, categories } = action;\n                const newElement = {\n                    id,\n                    value,\n                    categories: new Set(categories)\n                };\n                const newState = new Map(state);\n                newState.set(id, newElement);\n                return newState;\n            }\n        case \"REMOVE_ELEMENT\":\n            {\n                const newState = new Map(state);\n                newState.delete(action.id);\n                return newState;\n            }\n        default:\n            return state;\n    }\n}\nfunction setsHaveIntersection(setA, setB) {\n    const [smallerSet, largerSet] = setA.size <= setB.size ? [\n        setA,\n        setB\n    ] : [\n        setB,\n        setA\n    ];\n    for (let item of smallerSet){\n        if (largerSet.has(item)) {\n            return true;\n        }\n    }\n    return false;\n}\n //# sourceMappingURL=chunk-5FHSUKQL.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AY29waWxvdGtpdC9yZWFjdC1jb3JlL2Rpc3QvY2h1bmstNUZIU1VLUUwubWpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLHVDQUF1Qzs7QUFDUztBQUNGO0FBQzlDLElBQUlHLHVCQUF1Qjs7SUFDekIsTUFBTSxDQUFDQyxVQUFVQyxTQUFTLEdBQUdKLGlEQUFVQSxDQUFDSywwQkFBMEIsYUFBYSxHQUFHLElBQUlDO0lBQ3RGLE1BQU1DLGFBQWFSLGtEQUFXQSxDQUFDLENBQUNTLE9BQU9DO1FBQ3JDLE1BQU1DLFFBQVFULDREQUFRQTtRQUN0QkcsU0FBUztZQUNQTyxNQUFNO1lBQ05IO1lBQ0FJLElBQUlGO1lBQ0pEO1FBQ0Y7UUFDQSxPQUFPQztJQUNULEdBQUcsRUFBRTtJQUNMLE1BQU1HLGdCQUFnQmQsa0RBQVdBLENBQUMsQ0FBQ2E7UUFDakNSLFNBQVM7WUFBRU8sTUFBTTtZQUFrQkM7UUFBRztJQUN4QyxHQUFHLEVBQUU7SUFDTCxNQUFNRSxjQUFjZixrREFBV0EsQ0FDN0IsQ0FBQ1U7UUFDQyxNQUFNTSxnQkFBZ0IsSUFBSUMsSUFBSVA7UUFDOUIsTUFBTVEsU0FBUyxFQUFFO1FBQ2pCZCxTQUFTZSxPQUFPLENBQUMsQ0FBQ0M7WUFDaEIsSUFBSUMscUJBQXFCTCxlQUFlSSxRQUFRVixVQUFVLEdBQUc7Z0JBQzNEUSxPQUFPSSxJQUFJLENBQUNGLFFBQVFYLEtBQUs7WUFDM0I7UUFDRjtRQUNBLE9BQU9TO0lBQ1QsR0FDQTtRQUFDZDtLQUFTO0lBRVosT0FBTztRQUFFSTtRQUFZTTtRQUFlQztJQUFZO0FBQ2xEO0dBN0JJWjtBQThCSixJQUFJb0Isa0NBQWtDcEI7QUFDdEMsU0FBU0cseUJBQXlCa0IsS0FBSyxFQUFFQyxNQUFNO0lBQzdDLE9BQVFBLE9BQU9iLElBQUk7UUFDakIsS0FBSztZQUFlO2dCQUNsQixNQUFNLEVBQUVILEtBQUssRUFBRUksRUFBRSxFQUFFSCxVQUFVLEVBQUUsR0FBR2U7Z0JBQ2xDLE1BQU1DLGFBQWE7b0JBQ2pCYjtvQkFDQUo7b0JBQ0FDLFlBQVksSUFBSU8sSUFBSVA7Z0JBQ3RCO2dCQUNBLE1BQU1pQixXQUFXLElBQUlwQixJQUFJaUI7Z0JBQ3pCRyxTQUFTQyxHQUFHLENBQUNmLElBQUlhO2dCQUNqQixPQUFPQztZQUNUO1FBQ0EsS0FBSztZQUFrQjtnQkFDckIsTUFBTUEsV0FBVyxJQUFJcEIsSUFBSWlCO2dCQUN6QkcsU0FBU0UsTUFBTSxDQUFDSixPQUFPWixFQUFFO2dCQUN6QixPQUFPYztZQUNUO1FBQ0E7WUFDRSxPQUFPSDtJQUNYO0FBQ0Y7QUFDQSxTQUFTSCxxQkFBcUJTLElBQUksRUFBRUMsSUFBSTtJQUN0QyxNQUFNLENBQUNDLFlBQVlDLFVBQVUsR0FBR0gsS0FBS0ksSUFBSSxJQUFJSCxLQUFLRyxJQUFJLEdBQUc7UUFBQ0o7UUFBTUM7S0FBSyxHQUFHO1FBQUNBO1FBQU1EO0tBQUs7SUFDcEYsS0FBSyxJQUFJSyxRQUFRSCxXQUFZO1FBQzNCLElBQUlDLFVBQVVHLEdBQUcsQ0FBQ0QsT0FBTztZQUN2QixPQUFPO1FBQ1Q7SUFDRjtJQUNBLE9BQU87QUFDVDtBQUlFLENBQ0YsMkNBQTJDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9AY29waWxvdGtpdC9yZWFjdC1jb3JlL2Rpc3QvY2h1bmstNUZIU1VLUUwubWpzPzUzZjkiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gc3JjL2hvb2tzL3VzZS1mbGF0LWNhdGVnb3J5LXN0b3JlLnRzXG5pbXBvcnQgeyB1c2VDYWxsYmFjaywgdXNlUmVkdWNlciB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgcmFuZG9tSWQgfSBmcm9tIFwiQGNvcGlsb3RraXQvc2hhcmVkXCI7XG52YXIgdXNlRmxhdENhdGVnb3J5U3RvcmUgPSAoKSA9PiB7XG4gIGNvbnN0IFtlbGVtZW50cywgZGlzcGF0Y2hdID0gdXNlUmVkdWNlcihmbGF0Q2F0ZWdvcnlTdG9yZVJlZHVjZXIsIC8qIEBfX1BVUkVfXyAqLyBuZXcgTWFwKCkpO1xuICBjb25zdCBhZGRFbGVtZW50ID0gdXNlQ2FsbGJhY2soKHZhbHVlLCBjYXRlZ29yaWVzKSA9PiB7XG4gICAgY29uc3QgbmV3SWQgPSByYW5kb21JZCgpO1xuICAgIGRpc3BhdGNoKHtcbiAgICAgIHR5cGU6IFwiQUREX0VMRU1FTlRcIixcbiAgICAgIHZhbHVlLFxuICAgICAgaWQ6IG5ld0lkLFxuICAgICAgY2F0ZWdvcmllc1xuICAgIH0pO1xuICAgIHJldHVybiBuZXdJZDtcbiAgfSwgW10pO1xuICBjb25zdCByZW1vdmVFbGVtZW50ID0gdXNlQ2FsbGJhY2soKGlkKSA9PiB7XG4gICAgZGlzcGF0Y2goeyB0eXBlOiBcIlJFTU9WRV9FTEVNRU5UXCIsIGlkIH0pO1xuICB9LCBbXSk7XG4gIGNvbnN0IGFsbEVsZW1lbnRzID0gdXNlQ2FsbGJhY2soXG4gICAgKGNhdGVnb3JpZXMpID0+IHtcbiAgICAgIGNvbnN0IGNhdGVnb3JpZXNTZXQgPSBuZXcgU2V0KGNhdGVnb3JpZXMpO1xuICAgICAgY29uc3QgcmVzdWx0ID0gW107XG4gICAgICBlbGVtZW50cy5mb3JFYWNoKChlbGVtZW50KSA9PiB7XG4gICAgICAgIGlmIChzZXRzSGF2ZUludGVyc2VjdGlvbihjYXRlZ29yaWVzU2V0LCBlbGVtZW50LmNhdGVnb3JpZXMpKSB7XG4gICAgICAgICAgcmVzdWx0LnB1c2goZWxlbWVudC52YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9LFxuICAgIFtlbGVtZW50c11cbiAgKTtcbiAgcmV0dXJuIHsgYWRkRWxlbWVudCwgcmVtb3ZlRWxlbWVudCwgYWxsRWxlbWVudHMgfTtcbn07XG52YXIgdXNlX2ZsYXRfY2F0ZWdvcnlfc3RvcmVfZGVmYXVsdCA9IHVzZUZsYXRDYXRlZ29yeVN0b3JlO1xuZnVuY3Rpb24gZmxhdENhdGVnb3J5U3RvcmVSZWR1Y2VyKHN0YXRlLCBhY3Rpb24pIHtcbiAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICAgIGNhc2UgXCJBRERfRUxFTUVOVFwiOiB7XG4gICAgICBjb25zdCB7IHZhbHVlLCBpZCwgY2F0ZWdvcmllcyB9ID0gYWN0aW9uO1xuICAgICAgY29uc3QgbmV3RWxlbWVudCA9IHtcbiAgICAgICAgaWQsXG4gICAgICAgIHZhbHVlLFxuICAgICAgICBjYXRlZ29yaWVzOiBuZXcgU2V0KGNhdGVnb3JpZXMpXG4gICAgICB9O1xuICAgICAgY29uc3QgbmV3U3RhdGUgPSBuZXcgTWFwKHN0YXRlKTtcbiAgICAgIG5ld1N0YXRlLnNldChpZCwgbmV3RWxlbWVudCk7XG4gICAgICByZXR1cm4gbmV3U3RhdGU7XG4gICAgfVxuICAgIGNhc2UgXCJSRU1PVkVfRUxFTUVOVFwiOiB7XG4gICAgICBjb25zdCBuZXdTdGF0ZSA9IG5ldyBNYXAoc3RhdGUpO1xuICAgICAgbmV3U3RhdGUuZGVsZXRlKGFjdGlvbi5pZCk7XG4gICAgICByZXR1cm4gbmV3U3RhdGU7XG4gICAgfVxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gc3RhdGU7XG4gIH1cbn1cbmZ1bmN0aW9uIHNldHNIYXZlSW50ZXJzZWN0aW9uKHNldEEsIHNldEIpIHtcbiAgY29uc3QgW3NtYWxsZXJTZXQsIGxhcmdlclNldF0gPSBzZXRBLnNpemUgPD0gc2V0Qi5zaXplID8gW3NldEEsIHNldEJdIDogW3NldEIsIHNldEFdO1xuICBmb3IgKGxldCBpdGVtIG9mIHNtYWxsZXJTZXQpIHtcbiAgICBpZiAobGFyZ2VyU2V0LmhhcyhpdGVtKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxuZXhwb3J0IHtcbiAgdXNlX2ZsYXRfY2F0ZWdvcnlfc3RvcmVfZGVmYXVsdFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNodW5rLTVGSFNVS1FMLm1qcy5tYXAiXSwibmFtZXMiOlsidXNlQ2FsbGJhY2siLCJ1c2VSZWR1Y2VyIiwicmFuZG9tSWQiLCJ1c2VGbGF0Q2F0ZWdvcnlTdG9yZSIsImVsZW1lbnRzIiwiZGlzcGF0Y2giLCJmbGF0Q2F0ZWdvcnlTdG9yZVJlZHVjZXIiLCJNYXAiLCJhZGRFbGVtZW50IiwidmFsdWUiLCJjYXRlZ29yaWVzIiwibmV3SWQiLCJ0eXBlIiwiaWQiLCJyZW1vdmVFbGVtZW50IiwiYWxsRWxlbWVudHMiLCJjYXRlZ29yaWVzU2V0IiwiU2V0IiwicmVzdWx0IiwiZm9yRWFjaCIsImVsZW1lbnQiLCJzZXRzSGF2ZUludGVyc2VjdGlvbiIsInB1c2giLCJ1c2VfZmxhdF9jYXRlZ29yeV9zdG9yZV9kZWZhdWx0Iiwic3RhdGUiLCJhY3Rpb24iLCJuZXdFbGVtZW50IiwibmV3U3RhdGUiLCJzZXQiLCJkZWxldGUiLCJzZXRBIiwic2V0QiIsInNtYWxsZXJTZXQiLCJsYXJnZXJTZXQiLCJzaXplIiwiaXRlbSIsImhhcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@copilotkit/react-core/dist/chunk-5FHSUKQL.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@copilotkit/react-core/dist/chunk-6U3UH3KO.mjs":
/*!*********************************************************************!*\
  !*** ./node_modules/@copilotkit/react-core/dist/chunk-6U3UH3KO.mjs ***!
  \*********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   use_tree_default: function() { return /* binding */ use_tree_default; }\n/* harmony export */ });\n/* harmony import */ var _chunk_SKC7AJIV_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./chunk-SKC7AJIV.mjs */ \"(app-pages-browser)/./node_modules/@copilotkit/react-core/dist/chunk-SKC7AJIV.mjs\");\n/* harmony import */ var _copilotkit_shared__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @copilotkit/shared */ \"(app-pages-browser)/./node_modules/@copilotkit/shared/dist/chunk-RIPX6APP.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\nvar _s = $RefreshSig$();\n\n// src/hooks/use-tree.ts\n\n\nvar removeNode = (nodes, id)=>{\n    return nodes.reduce((result, node)=>{\n        if (node.id !== id) {\n            const newNode = (0,_chunk_SKC7AJIV_mjs__WEBPACK_IMPORTED_MODULE_1__.__spreadProps)((0,_chunk_SKC7AJIV_mjs__WEBPACK_IMPORTED_MODULE_1__.__spreadValues)({}, node), {\n                children: removeNode(node.children, id)\n            });\n            result.push(newNode);\n        }\n        return result;\n    }, []);\n};\nvar addNode = (nodes, newNode, parentId)=>{\n    if (!parentId) {\n        return [\n            ...nodes,\n            newNode\n        ];\n    }\n    return nodes.map((node)=>{\n        if (node.id === parentId) {\n            return (0,_chunk_SKC7AJIV_mjs__WEBPACK_IMPORTED_MODULE_1__.__spreadProps)((0,_chunk_SKC7AJIV_mjs__WEBPACK_IMPORTED_MODULE_1__.__spreadValues)({}, node), {\n                children: [\n                    ...node.children,\n                    newNode\n                ]\n            });\n        } else if (node.children.length) {\n            return (0,_chunk_SKC7AJIV_mjs__WEBPACK_IMPORTED_MODULE_1__.__spreadProps)((0,_chunk_SKC7AJIV_mjs__WEBPACK_IMPORTED_MODULE_1__.__spreadValues)({}, node), {\n                children: addNode(node.children, newNode, parentId)\n            });\n        }\n        return node;\n    });\n};\nvar treeIndentationRepresentation = (index, indentLevel)=>{\n    if (indentLevel === 0) {\n        return (index + 1).toString();\n    } else if (indentLevel === 1) {\n        return String.fromCharCode(65 + index);\n    } else if (indentLevel === 2) {\n        return String.fromCharCode(97 + index);\n    } else {\n        return \"-\";\n    }\n};\nvar printNode = function(node) {\n    let prefix = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"\", indentLevel = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0;\n    const indent = \" \".repeat(3).repeat(indentLevel);\n    const prefixPlusIndentLength = prefix.length + indent.length;\n    const subsequentLinesPrefix = \" \".repeat(prefixPlusIndentLength);\n    const valueLines = node.value.split(\"\\n\");\n    const outputFirstLine = \"\".concat(indent).concat(prefix).concat(valueLines[0]);\n    const outputSubsequentLines = valueLines.slice(1).map((line)=>\"\".concat(subsequentLinesPrefix).concat(line)).join(\"\\n\");\n    let output = \"\".concat(outputFirstLine, \"\\n\");\n    if (outputSubsequentLines) {\n        output += \"\".concat(outputSubsequentLines, \"\\n\");\n    }\n    const childPrePrefix = \" \".repeat(prefix.length);\n    node.children.forEach((child, index)=>output += printNode(child, \"\".concat(childPrePrefix).concat(treeIndentationRepresentation(index, indentLevel + 1), \". \"), indentLevel + 1));\n    return output;\n};\nfunction treeReducer(state, action) {\n    switch(action.type){\n        case \"ADD_NODE\":\n            {\n                const { value, parentId, id: newNodeId } = action;\n                const newNode = {\n                    id: newNodeId,\n                    value,\n                    children: [],\n                    categories: new Set(action.categories)\n                };\n                try {\n                    return addNode(state, newNode, parentId);\n                } catch (error) {\n                    console.error(\"Error while adding node with id \".concat(newNodeId, \": \").concat(error));\n                    return state;\n                }\n            }\n        case \"REMOVE_NODE\":\n            return removeNode(state, action.id);\n        default:\n            return state;\n    }\n}\nvar useTree = ()=>{\n    _s();\n    const [tree, dispatch] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useReducer)(treeReducer, []);\n    const addElement = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((value, categories, parentId)=>{\n        const newNodeId = (0,_copilotkit_shared__WEBPACK_IMPORTED_MODULE_2__.randomId)();\n        dispatch({\n            type: \"ADD_NODE\",\n            value,\n            parentId,\n            id: newNodeId,\n            categories\n        });\n        return newNodeId;\n    }, []);\n    const removeElement = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((id)=>{\n        dispatch({\n            type: \"REMOVE_NODE\",\n            id\n        });\n    }, []);\n    const printTree = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((categories)=>{\n        const categoriesSet = new Set(categories);\n        let output = \"\";\n        tree.forEach((node, index)=>{\n            if (!setsHaveIntersection(categoriesSet, node.categories)) {\n                return;\n            }\n            if (index !== 0) {\n                output += \"\\n\";\n            }\n            output += printNode(node, \"\".concat(treeIndentationRepresentation(index, 0), \". \"));\n        });\n        return output;\n    }, [\n        tree\n    ]);\n    return {\n        tree,\n        addElement,\n        printTree,\n        removeElement\n    };\n};\n_s(useTree, \"syhTzskYNnGza679qT6eNUFPwzo=\");\nvar use_tree_default = useTree;\nfunction setsHaveIntersection(setA, setB) {\n    const [smallerSet, largerSet] = setA.size <= setB.size ? [\n        setA,\n        setB\n    ] : [\n        setB,\n        setA\n    ];\n    for (let item of smallerSet){\n        if (largerSet.has(item)) {\n            return true;\n        }\n    }\n    return false;\n}\n //# sourceMappingURL=chunk-6U3UH3KO.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@copilotkit/react-core/dist/chunk-6U3UH3KO.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@copilotkit/react-core/dist/chunk-AG7FH7OD.mjs":
/*!*********************************************************************!*\
  !*** ./node_modules/@copilotkit/react-core/dist/chunk-AG7FH7OD.mjs ***!
  \*********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useCopilotReadable: function() { return /* binding */ useCopilotReadable; }\n/* harmony export */ });\n/* harmony import */ var _chunk_XQFVXX6R_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./chunk-XQFVXX6R.mjs */ \"(app-pages-browser)/./node_modules/@copilotkit/react-core/dist/chunk-XQFVXX6R.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\nvar _s = $RefreshSig$();\n\n// src/hooks/use-copilot-readable.ts\n\nfunction convertToJSON(description, value) {\n    return \"\".concat(description, \": \").concat(typeof value === \"string\" ? value : JSON.stringify(value));\n}\nfunction useCopilotReadable(param, dependencies) {\n    let { description, value, parentId, categories, convert } = param;\n    _s();\n    const { addContext, removeContext } = (0,_chunk_XQFVXX6R_mjs__WEBPACK_IMPORTED_MODULE_1__.useCopilotContext)();\n    const idRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)();\n    convert = convert || convertToJSON;\n    const information = convert(description, value);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        const id = addContext(information, parentId, categories);\n        idRef.current = id;\n        return ()=>{\n            removeContext(id);\n        };\n    }, [\n        information,\n        parentId,\n        addContext,\n        removeContext,\n        ...dependencies || []\n    ]);\n    return idRef.current;\n}\n_s(useCopilotReadable, \"Hb0onANHEQg18mw+h9y7ggTGP7c=\", false, function() {\n    return [\n        _chunk_XQFVXX6R_mjs__WEBPACK_IMPORTED_MODULE_1__.useCopilotContext\n    ];\n});\n //# sourceMappingURL=chunk-AG7FH7OD.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AY29waWxvdGtpdC9yZWFjdC1jb3JlL2Rpc3QvY2h1bmstQUc3Rkg3T0QubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFFOEI7QUFFOUIsb0NBQW9DO0FBQ007QUFDMUMsU0FBU0csY0FBY0MsV0FBVyxFQUFFQyxLQUFLO0lBQ3ZDLE9BQU8sR0FBbUIsT0FBaEJELGFBQVksTUFBOEQsT0FBMUQsT0FBT0MsVUFBVSxXQUFXQSxRQUFRQyxLQUFLQyxTQUFTLENBQUNGO0FBQy9FO0FBQ0EsU0FBU0csbUJBQW1CLEtBQXFELEVBQUVDLFlBQVk7UUFBbkUsRUFBRUwsV0FBVyxFQUFFQyxLQUFLLEVBQUVLLFFBQVEsRUFBRUMsVUFBVSxFQUFFQyxPQUFPLEVBQUUsR0FBckQ7O0lBQzFCLE1BQU0sRUFBRUMsVUFBVSxFQUFFQyxhQUFhLEVBQUUsR0FBR2Qsc0VBQWlCQTtJQUN2RCxNQUFNZSxRQUFRYiw2Q0FBTUE7SUFDcEJVLFVBQVVBLFdBQVdUO0lBQ3JCLE1BQU1hLGNBQWNKLFFBQVFSLGFBQWFDO0lBQ3pDSixnREFBU0EsQ0FBQztRQUNSLE1BQU1nQixLQUFLSixXQUFXRyxhQUFhTixVQUFVQztRQUM3Q0ksTUFBTUcsT0FBTyxHQUFHRDtRQUNoQixPQUFPO1lBQ0xILGNBQWNHO1FBQ2hCO0lBQ0YsR0FBRztRQUFDRDtRQUFhTjtRQUFVRztRQUFZQztXQUFrQkwsZ0JBQWdCLEVBQUU7S0FBQztJQUM1RSxPQUFPTSxNQUFNRyxPQUFPO0FBQ3RCO0dBYlNWOztRQUMrQlIsa0VBQWlCQTs7O0FBZ0J2RCxDQUNGLDJDQUEyQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQGNvcGlsb3RraXQvcmVhY3QtY29yZS9kaXN0L2NodW5rLUFHN0ZIN09ELm1qcz83ZTMzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIHVzZUNvcGlsb3RDb250ZXh0XG59IGZyb20gXCIuL2NodW5rLVhRRlZYWDZSLm1qc1wiO1xuXG4vLyBzcmMvaG9va3MvdXNlLWNvcGlsb3QtcmVhZGFibGUudHNcbmltcG9ydCB7IHVzZUVmZmVjdCwgdXNlUmVmIH0gZnJvbSBcInJlYWN0XCI7XG5mdW5jdGlvbiBjb252ZXJ0VG9KU09OKGRlc2NyaXB0aW9uLCB2YWx1ZSkge1xuICByZXR1cm4gYCR7ZGVzY3JpcHRpb259OiAke3R5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiA/IHZhbHVlIDogSlNPTi5zdHJpbmdpZnkodmFsdWUpfWA7XG59XG5mdW5jdGlvbiB1c2VDb3BpbG90UmVhZGFibGUoeyBkZXNjcmlwdGlvbiwgdmFsdWUsIHBhcmVudElkLCBjYXRlZ29yaWVzLCBjb252ZXJ0IH0sIGRlcGVuZGVuY2llcykge1xuICBjb25zdCB7IGFkZENvbnRleHQsIHJlbW92ZUNvbnRleHQgfSA9IHVzZUNvcGlsb3RDb250ZXh0KCk7XG4gIGNvbnN0IGlkUmVmID0gdXNlUmVmKCk7XG4gIGNvbnZlcnQgPSBjb252ZXJ0IHx8IGNvbnZlcnRUb0pTT047XG4gIGNvbnN0IGluZm9ybWF0aW9uID0gY29udmVydChkZXNjcmlwdGlvbiwgdmFsdWUpO1xuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGNvbnN0IGlkID0gYWRkQ29udGV4dChpbmZvcm1hdGlvbiwgcGFyZW50SWQsIGNhdGVnb3JpZXMpO1xuICAgIGlkUmVmLmN1cnJlbnQgPSBpZDtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgcmVtb3ZlQ29udGV4dChpZCk7XG4gICAgfTtcbiAgfSwgW2luZm9ybWF0aW9uLCBwYXJlbnRJZCwgYWRkQ29udGV4dCwgcmVtb3ZlQ29udGV4dCwgLi4uZGVwZW5kZW5jaWVzIHx8IFtdXSk7XG4gIHJldHVybiBpZFJlZi5jdXJyZW50O1xufVxuXG5leHBvcnQge1xuICB1c2VDb3BpbG90UmVhZGFibGVcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jaHVuay1BRzdGSDdPRC5tanMubWFwIl0sIm5hbWVzIjpbInVzZUNvcGlsb3RDb250ZXh0IiwidXNlRWZmZWN0IiwidXNlUmVmIiwiY29udmVydFRvSlNPTiIsImRlc2NyaXB0aW9uIiwidmFsdWUiLCJKU09OIiwic3RyaW5naWZ5IiwidXNlQ29waWxvdFJlYWRhYmxlIiwiZGVwZW5kZW5jaWVzIiwicGFyZW50SWQiLCJjYXRlZ29yaWVzIiwiY29udmVydCIsImFkZENvbnRleHQiLCJyZW1vdmVDb250ZXh0IiwiaWRSZWYiLCJpbmZvcm1hdGlvbiIsImlkIiwiY3VycmVudCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@copilotkit/react-core/dist/chunk-AG7FH7OD.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@copilotkit/react-core/dist/chunk-DCTJZ742.mjs":
/*!*********************************************************************!*\
  !*** ./node_modules/@copilotkit/react-core/dist/chunk-DCTJZ742.mjs ***!
  \*********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CopilotMessagesContext: function() { return /* binding */ CopilotMessagesContext; },\n/* harmony export */   useCopilotMessagesContext: function() { return /* binding */ useCopilotMessagesContext; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n// src/context/copilot-messages-context.tsx\nvar _s = $RefreshSig$();\n\nvar emptyCopilotContext = {\n    messages: [],\n    setMessages: ()=>[]\n};\nvar CopilotMessagesContext = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createContext(emptyCopilotContext);\nfunction useCopilotMessagesContext() {\n    _s();\n    const context = react__WEBPACK_IMPORTED_MODULE_0__.useContext(CopilotMessagesContext);\n    if (context === emptyCopilotContext) {\n        throw new Error(\"A messages consuming component was not wrapped with `<CopilotMessages> {...} </CopilotMessages>`\");\n    }\n    return context;\n}\n_s(useCopilotMessagesContext, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n //# sourceMappingURL=chunk-DCTJZ742.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AY29waWxvdGtpdC9yZWFjdC1jb3JlL2Rpc3QvY2h1bmstRENUSlo3NDIubWpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLDJDQUEyQzs7QUFDakI7QUFDMUIsSUFBSUMsc0JBQXNCO0lBQ3hCQyxVQUFVLEVBQUU7SUFDWkMsYUFBYSxJQUFNLEVBQUU7QUFDdkI7QUFDQSxJQUFJQyx1Q0FBeUJKLGdEQUFtQixDQUFDQztBQUNqRCxTQUFTSzs7SUFDUCxNQUFNQyxVQUFVUCw2Q0FBZ0IsQ0FBQ0k7SUFDakMsSUFBSUcsWUFBWU4scUJBQXFCO1FBQ25DLE1BQU0sSUFBSVEsTUFDUjtJQUVKO0lBQ0EsT0FBT0Y7QUFDVDtHQVJTRDtBQWFQLENBQ0YsMkNBQTJDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9AY29waWxvdGtpdC9yZWFjdC1jb3JlL2Rpc3QvY2h1bmstRENUSlo3NDIubWpzPzJkNDMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gc3JjL2NvbnRleHQvY29waWxvdC1tZXNzYWdlcy1jb250ZXh0LnRzeFxuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xudmFyIGVtcHR5Q29waWxvdENvbnRleHQgPSB7XG4gIG1lc3NhZ2VzOiBbXSxcbiAgc2V0TWVzc2FnZXM6ICgpID0+IFtdXG59O1xudmFyIENvcGlsb3RNZXNzYWdlc0NvbnRleHQgPSBSZWFjdC5jcmVhdGVDb250ZXh0KGVtcHR5Q29waWxvdENvbnRleHQpO1xuZnVuY3Rpb24gdXNlQ29waWxvdE1lc3NhZ2VzQ29udGV4dCgpIHtcbiAgY29uc3QgY29udGV4dCA9IFJlYWN0LnVzZUNvbnRleHQoQ29waWxvdE1lc3NhZ2VzQ29udGV4dCk7XG4gIGlmIChjb250ZXh0ID09PSBlbXB0eUNvcGlsb3RDb250ZXh0KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgXCJBIG1lc3NhZ2VzIGNvbnN1bWluZyBjb21wb25lbnQgd2FzIG5vdCB3cmFwcGVkIHdpdGggYDxDb3BpbG90TWVzc2FnZXM+IHsuLi59IDwvQ29waWxvdE1lc3NhZ2VzPmBcIlxuICAgICk7XG4gIH1cbiAgcmV0dXJuIGNvbnRleHQ7XG59XG5cbmV4cG9ydCB7XG4gIENvcGlsb3RNZXNzYWdlc0NvbnRleHQsXG4gIHVzZUNvcGlsb3RNZXNzYWdlc0NvbnRleHRcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jaHVuay1EQ1RKWjc0Mi5tanMubWFwIl0sIm5hbWVzIjpbIlJlYWN0IiwiZW1wdHlDb3BpbG90Q29udGV4dCIsIm1lc3NhZ2VzIiwic2V0TWVzc2FnZXMiLCJDb3BpbG90TWVzc2FnZXNDb250ZXh0IiwiY3JlYXRlQ29udGV4dCIsInVzZUNvcGlsb3RNZXNzYWdlc0NvbnRleHQiLCJjb250ZXh0IiwidXNlQ29udGV4dCIsIkVycm9yIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@copilotkit/react-core/dist/chunk-DCTJZ742.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@copilotkit/react-core/dist/chunk-DHGXL5PC.mjs":
/*!*********************************************************************!*\
  !*** ./node_modules/@copilotkit/react-core/dist/chunk-DHGXL5PC.mjs ***!
  \*********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CopilotKit: function() { return /* binding */ CopilotKit; },\n/* harmony export */   CopilotKitInternal: function() { return /* binding */ CopilotKitInternal; },\n/* harmony export */   defaultCopilotContextCategories: function() { return /* binding */ defaultCopilotContextCategories; },\n/* harmony export */   extract: function() { return /* binding */ extract; }\n/* harmony export */ });\n/* harmony import */ var _chunk_MLAS4QUR_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./chunk-MLAS4QUR.mjs */ \"(app-pages-browser)/./node_modules/@copilotkit/react-core/dist/chunk-MLAS4QUR.mjs\");\n/* harmony import */ var _chunk_XXR4QFAQ_mjs__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./chunk-XXR4QFAQ.mjs */ \"(app-pages-browser)/./node_modules/@copilotkit/react-core/dist/chunk-XXR4QFAQ.mjs\");\n/* harmony import */ var _chunk_5FHSUKQL_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./chunk-5FHSUKQL.mjs */ \"(app-pages-browser)/./node_modules/@copilotkit/react-core/dist/chunk-5FHSUKQL.mjs\");\n/* harmony import */ var _chunk_6U3UH3KO_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./chunk-6U3UH3KO.mjs */ \"(app-pages-browser)/./node_modules/@copilotkit/react-core/dist/chunk-6U3UH3KO.mjs\");\n/* harmony import */ var _chunk_ODN4H66E_mjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./chunk-ODN4H66E.mjs */ \"(app-pages-browser)/./node_modules/@copilotkit/react-core/dist/chunk-ODN4H66E.mjs\");\n/* harmony import */ var _chunk_2KCEHGSI_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./chunk-2KCEHGSI.mjs */ \"(app-pages-browser)/./node_modules/@copilotkit/react-core/dist/chunk-2KCEHGSI.mjs\");\n/* harmony import */ var _chunk_XQFVXX6R_mjs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./chunk-XQFVXX6R.mjs */ \"(app-pages-browser)/./node_modules/@copilotkit/react-core/dist/chunk-XQFVXX6R.mjs\");\n/* harmony import */ var _chunk_SKC7AJIV_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./chunk-SKC7AJIV.mjs */ \"(app-pages-browser)/./node_modules/@copilotkit/react-core/dist/chunk-SKC7AJIV.mjs\");\n/* harmony import */ var _copilotkit_shared__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @copilotkit/shared */ \"(app-pages-browser)/./node_modules/@copilotkit/shared/dist/chunk-JP2M4U4G.mjs\");\n/* harmony import */ var _copilotkit_runtime_client_gql__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @copilotkit/runtime-client-gql */ \"(app-pages-browser)/./node_modules/@copilotkit/runtime-client-gql/dist/chunk-OGFO6ZEP.mjs\");\n/* harmony import */ var _copilotkit_runtime_client_gql__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @copilotkit/runtime-client-gql */ \"(app-pages-browser)/./node_modules/@copilotkit/runtime-client-gql/dist/chunk-GD5NLJQE.mjs\");\n/* harmony import */ var _copilotkit_runtime_client_gql__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @copilotkit/runtime-client-gql */ \"(app-pages-browser)/./node_modules/@copilotkit/runtime-client-gql/dist/chunk-ZWVRRYBP.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-dom */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react-dom/index.js\");\n/* harmony import */ var _copilotkit_shared__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @copilotkit/shared */ \"(app-pages-browser)/./node_modules/@copilotkit/shared/dist/chunk-GYZIHHE6.mjs\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react/jsx-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-runtime.js\");\nvar _s = $RefreshSig$();\n\n\n\n\n\n\n\n\n// src/utils/extract.ts\n\n\n// src/components/copilot-provider/copilotkit.tsx\n\n\n\n\nfunction CopilotKit(_a) {\n    var _b = _a, { children } = _b, props = (0,_chunk_SKC7AJIV_mjs__WEBPACK_IMPORTED_MODULE_3__.__objRest)(_b, [\n        \"children\"\n    ]);\n    const showDevConsole = props.showDevConsole === void 0 ? \"auto\" : props.showDevConsole;\n    const enabled = (0,_chunk_MLAS4QUR_mjs__WEBPACK_IMPORTED_MODULE_4__.shouldShowDevConsole)(showDevConsole);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_chunk_2KCEHGSI_mjs__WEBPACK_IMPORTED_MODULE_5__.ToastProvider, {\n        enabled,\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(CopilotKitInternal, (0,_chunk_SKC7AJIV_mjs__WEBPACK_IMPORTED_MODULE_3__.__spreadProps)((0,_chunk_SKC7AJIV_mjs__WEBPACK_IMPORTED_MODULE_3__.__spreadValues)({}, props), {\n            children\n        }))\n    });\n}\n_c = CopilotKit;\nfunction CopilotKitInternal(_a) {\n    _s();\n    var _b = _a, { children } = _b, props = (0,_chunk_SKC7AJIV_mjs__WEBPACK_IMPORTED_MODULE_3__.__objRest)(_b, [\n        \"children\"\n    ]);\n    if (!props.runtimeUrl && !props.publicApiKey) {\n        throw new Error(\"Please provide either a runtimeUrl or a publicApiKey to the CopilotKit component.\");\n    }\n    const chatApiEndpoint = props.runtimeUrl || _copilotkit_shared__WEBPACK_IMPORTED_MODULE_6__.COPILOT_CLOUD_CHAT_URL;\n    const [actions, setActions] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)({});\n    const [coAgentStateRenders, setCoAgentStateRenders] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)({});\n    const chatComponentsCache = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)({\n        actions: {},\n        coAgentStateRenders: {}\n    });\n    const { addElement, removeElement, printTree } = (0,_chunk_6U3UH3KO_mjs__WEBPACK_IMPORTED_MODULE_7__.use_tree_default)();\n    const [isLoading, setIsLoading] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [chatInstructions, setChatInstructions] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"\");\n    const { addElement: addDocument, removeElement: removeDocument, allElements: allDocuments } = (0,_chunk_5FHSUKQL_mjs__WEBPACK_IMPORTED_MODULE_8__.use_flat_category_store_default)();\n    const setAction = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((id, action)=>{\n        setActions((prevPoints)=>{\n            return (0,_chunk_SKC7AJIV_mjs__WEBPACK_IMPORTED_MODULE_3__.__spreadProps)((0,_chunk_SKC7AJIV_mjs__WEBPACK_IMPORTED_MODULE_3__.__spreadValues)({}, prevPoints), {\n                [id]: action\n            });\n        });\n    }, []);\n    const removeAction = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((id)=>{\n        setActions((prevPoints)=>{\n            const newPoints = (0,_chunk_SKC7AJIV_mjs__WEBPACK_IMPORTED_MODULE_3__.__spreadValues)({}, prevPoints);\n            delete newPoints[id];\n            return newPoints;\n        });\n    }, []);\n    const setCoAgentStateRender = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((id, stateRender)=>{\n        setCoAgentStateRenders((prevPoints)=>{\n            return (0,_chunk_SKC7AJIV_mjs__WEBPACK_IMPORTED_MODULE_3__.__spreadProps)((0,_chunk_SKC7AJIV_mjs__WEBPACK_IMPORTED_MODULE_3__.__spreadValues)({}, prevPoints), {\n                [id]: stateRender\n            });\n        });\n    }, []);\n    const removeCoAgentStateRender = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((id)=>{\n        setCoAgentStateRenders((prevPoints)=>{\n            const newPoints = (0,_chunk_SKC7AJIV_mjs__WEBPACK_IMPORTED_MODULE_3__.__spreadValues)({}, prevPoints);\n            delete newPoints[id];\n            return newPoints;\n        });\n    }, []);\n    const getContextString = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((documents, categories)=>{\n        const documentsString = documents.map((document)=>{\n            return \"\".concat(document.name, \" (\").concat(document.sourceApplication, \"):\\n\").concat(document.getContents());\n        }).join(\"\\n\\n\");\n        const nonDocumentStrings = printTree(categories);\n        return \"\".concat(documentsString, \"\\n\\n\").concat(nonDocumentStrings);\n    }, [\n        printTree\n    ]);\n    const addContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function(context, parentId) {\n        let categories = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : defaultCopilotContextCategories;\n        return addElement(context, categories, parentId);\n    }, [\n        addElement\n    ]);\n    const removeContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((id)=>{\n        removeElement(id);\n    }, [\n        removeElement\n    ]);\n    const getFunctionCallHandler = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((customEntryPoints)=>{\n        return entryPointsToFunctionCallHandler(Object.values(customEntryPoints || actions));\n    }, [\n        actions\n    ]);\n    const getDocumentsContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((categories)=>{\n        return allDocuments(categories);\n    }, [\n        allDocuments\n    ]);\n    const addDocumentContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function(documentPointer) {\n        let categories = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : defaultCopilotContextCategories;\n        return addDocument(documentPointer, categories);\n    }, [\n        addDocument\n    ]);\n    const removeDocumentContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((documentId)=>{\n        removeDocument(documentId);\n    }, [\n        removeDocument\n    ]);\n    if (!props.publicApiKey) {\n        if (props.cloudRestrictToTopic) {\n            throw new Error(\"To use the cloudRestrictToTopic feature, please sign up at https://copilotkit.ai and provide a publicApiKey.\");\n        }\n    }\n    const copilotApiConfig = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{\n        var _a2, _b2;\n        let cloud = void 0;\n        if (props.publicApiKey) {\n            cloud = {\n                guardrails: {\n                    input: {\n                        restrictToTopic: {\n                            enabled: props.cloudRestrictToTopic ? true : false,\n                            validTopics: ((_a2 = props.cloudRestrictToTopic) == null ? void 0 : _a2.validTopics) || [],\n                            invalidTopics: ((_b2 = props.cloudRestrictToTopic) == null ? void 0 : _b2.invalidTopics) || []\n                        }\n                    }\n                }\n            };\n        }\n        return (0,_chunk_SKC7AJIV_mjs__WEBPACK_IMPORTED_MODULE_3__.__spreadProps)((0,_chunk_SKC7AJIV_mjs__WEBPACK_IMPORTED_MODULE_3__.__spreadValues)({\n            publicApiKey: props.publicApiKey\n        }, cloud ? {\n            cloud\n        } : {}), {\n            chatApiEndpoint,\n            headers: props.headers || {},\n            properties: props.properties || {},\n            transcribeAudioUrl: props.transcribeAudioUrl,\n            textToSpeechUrl: props.textToSpeechUrl,\n            credentials: props.credentials\n        });\n    }, [\n        props.publicApiKey,\n        props.headers,\n        props.properties,\n        props.transcribeAudioUrl,\n        props.textToSpeechUrl,\n        props.credentials,\n        props.cloudRestrictToTopic\n    ]);\n    const headers = (0,_chunk_SKC7AJIV_mjs__WEBPACK_IMPORTED_MODULE_3__.__spreadValues)((0,_chunk_SKC7AJIV_mjs__WEBPACK_IMPORTED_MODULE_3__.__spreadValues)({}, copilotApiConfig.headers || {}), copilotApiConfig.publicApiKey ? {\n        [_copilotkit_shared__WEBPACK_IMPORTED_MODULE_6__.COPILOT_CLOUD_PUBLIC_API_KEY_HEADER]: copilotApiConfig.publicApiKey\n    } : {});\n    const runtimeClient = (0,_chunk_ODN4H66E_mjs__WEBPACK_IMPORTED_MODULE_9__.useCopilotRuntimeClient)({\n        url: copilotApiConfig.chatApiEndpoint,\n        publicApiKey: copilotApiConfig.publicApiKey,\n        headers,\n        credentials: copilotApiConfig.credentials\n    });\n    const [chatSuggestionConfiguration, setChatSuggestionConfiguration] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)({});\n    const addChatSuggestionConfiguration = (id, suggestion)=>{\n        setChatSuggestionConfiguration((prev)=>(0,_chunk_SKC7AJIV_mjs__WEBPACK_IMPORTED_MODULE_3__.__spreadProps)((0,_chunk_SKC7AJIV_mjs__WEBPACK_IMPORTED_MODULE_3__.__spreadValues)({}, prev), {\n                [id]: suggestion\n            }));\n    };\n    const removeChatSuggestionConfiguration = (id)=>{\n        setChatSuggestionConfiguration((prev)=>{\n            const _a2 = prev, { [id]: _ } = _a2, rest = (0,_chunk_SKC7AJIV_mjs__WEBPACK_IMPORTED_MODULE_3__.__objRest)(_a2, [\n                (0,_chunk_SKC7AJIV_mjs__WEBPACK_IMPORTED_MODULE_3__.__restKey)(id)\n            ]);\n            return rest;\n        });\n    };\n    const [coagentStates, setCoagentStates] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)({});\n    const coagentStatesRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)({});\n    const setCoagentStatesWithRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((value)=>{\n        const newValue = typeof value === \"function\" ? value(coagentStatesRef.current) : value;\n        coagentStatesRef.current = newValue;\n        setCoagentStates((prev)=>{\n            return newValue;\n        });\n    }, []);\n    let initialAgentSession = null;\n    if (props.agent) {\n        initialAgentSession = {\n            agentName: props.agent\n        };\n    }\n    const [agentSession, setAgentSession] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(initialAgentSession);\n    const showDevConsole = props.showDevConsole === void 0 ? \"auto\" : props.showDevConsole;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_chunk_XQFVXX6R_mjs__WEBPACK_IMPORTED_MODULE_10__.CopilotContext.Provider, {\n        value: {\n            actions,\n            chatComponentsCache,\n            getFunctionCallHandler,\n            setAction,\n            removeAction,\n            coAgentStateRenders,\n            setCoAgentStateRender,\n            removeCoAgentStateRender,\n            getContextString,\n            addContext,\n            removeContext,\n            getDocumentsContext,\n            addDocumentContext,\n            removeDocumentContext,\n            copilotApiConfig,\n            isLoading,\n            setIsLoading,\n            chatSuggestionConfiguration,\n            addChatSuggestionConfiguration,\n            removeChatSuggestionConfiguration,\n            chatInstructions,\n            setChatInstructions,\n            showDevConsole,\n            coagentStates,\n            setCoagentStates,\n            coagentStatesRef,\n            setCoagentStatesWithRef,\n            agentSession,\n            setAgentSession,\n            runtimeClient\n        },\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_chunk_XXR4QFAQ_mjs__WEBPACK_IMPORTED_MODULE_11__.CopilotMessages, {\n            children\n        })\n    });\n}\n_s(CopilotKitInternal, \"lzwsKxrpgHcVSDnRO70z8odhXS4=\", false, function() {\n    return [\n        _chunk_ODN4H66E_mjs__WEBPACK_IMPORTED_MODULE_9__.useCopilotRuntimeClient\n    ];\n});\n_c1 = CopilotKitInternal;\nvar defaultCopilotContextCategories = [\n    \"global\"\n];\nfunction entryPointsToFunctionCallHandler(actions) {\n    return (_0)=>(0,_chunk_SKC7AJIV_mjs__WEBPACK_IMPORTED_MODULE_3__.__async)(this, [\n            _0\n        ], function*(param) {\n            let { messages, name, args } = param;\n            let actionsByFunctionName = {};\n            for (let action2 of actions){\n                actionsByFunctionName[action2.name] = action2;\n            }\n            const action = actionsByFunctionName[name];\n            let result = void 0;\n            if (action) {\n                yield new Promise((resolve, reject)=>{\n                    (0,react_dom__WEBPACK_IMPORTED_MODULE_1__.flushSync)(()=>(0,_chunk_SKC7AJIV_mjs__WEBPACK_IMPORTED_MODULE_3__.__async)(this, null, function*() {\n                            var _a;\n                            try {\n                                result = yield (_a = action.handler) == null ? void 0 : _a.call(action, args);\n                                resolve();\n                            } catch (error) {\n                                reject(error);\n                            }\n                        }));\n                });\n                yield new Promise((resolve)=>setTimeout(resolve, 20));\n            }\n            return result;\n        });\n}\n// src/utils/extract.ts\n\nfunction extract(_0) {\n    return (0,_chunk_SKC7AJIV_mjs__WEBPACK_IMPORTED_MODULE_3__.__async)(this, arguments, function*(param) {\n        let { context, instructions, parameters, include, data, abortSignal, stream, requestType = _copilotkit_runtime_client_gql__WEBPACK_IMPORTED_MODULE_12__.CopilotRequestType.Task } = param;\n        var _a, _b;\n        const { messages } = context;\n        const action = {\n            name: \"extract\",\n            description: instructions,\n            parameters,\n            handler: (args)=>{}\n        };\n        const includeReadable = (_a = include == null ? void 0 : include.readable) != null ? _a : false;\n        const includeMessages = (_b = include == null ? void 0 : include.messages) != null ? _b : false;\n        let contextString = \"\";\n        if (data) {\n            contextString = (typeof data === \"string\" ? data : JSON.stringify(data)) + \"\\n\\n\";\n        }\n        if (includeReadable) {\n            contextString += context.getContextString([], defaultCopilotContextCategories);\n        }\n        const systemMessage = new _copilotkit_runtime_client_gql__WEBPACK_IMPORTED_MODULE_13__.TextMessage({\n            content: makeSystemMessage(contextString, instructions),\n            role: _copilotkit_runtime_client_gql__WEBPACK_IMPORTED_MODULE_13__.Role.System\n        });\n        const instructionsMessage = new _copilotkit_runtime_client_gql__WEBPACK_IMPORTED_MODULE_13__.TextMessage({\n            content: makeInstructionsMessage(instructions),\n            role: _copilotkit_runtime_client_gql__WEBPACK_IMPORTED_MODULE_13__.Role.User\n        });\n        const response = context.runtimeClient.asStream(context.runtimeClient.generateCopilotResponse({\n            data: {\n                frontend: {\n                    actions: [\n                        {\n                            name: action.name,\n                            description: action.description || \"\",\n                            jsonSchema: JSON.stringify((0,_copilotkit_shared__WEBPACK_IMPORTED_MODULE_14__.actionParametersToJsonSchema)(action.parameters || []))\n                        }\n                    ],\n                    url: window.location.href\n                },\n                messages: (0,_copilotkit_runtime_client_gql__WEBPACK_IMPORTED_MODULE_15__.convertMessagesToGqlInput)(includeMessages ? [\n                    systemMessage,\n                    instructionsMessage,\n                    ...(0,_copilotkit_runtime_client_gql__WEBPACK_IMPORTED_MODULE_15__.filterAgentStateMessages)(messages)\n                ] : [\n                    systemMessage,\n                    instructionsMessage\n                ]),\n                metadata: {\n                    requestType\n                },\n                forwardedParameters: {\n                    toolChoice: \"function\",\n                    toolChoiceFunctionName: action.name\n                }\n            },\n            properties: context.copilotApiConfig.properties,\n            signal: abortSignal\n        }));\n        const reader = response.getReader();\n        let isInitial = true;\n        let actionExecutionMessage = void 0;\n        while(true){\n            const { done, value } = yield reader.read();\n            if (done) {\n                break;\n            }\n            if (abortSignal == null ? void 0 : abortSignal.aborted) {\n                throw new Error(\"Aborted\");\n            }\n            actionExecutionMessage = (0,_copilotkit_runtime_client_gql__WEBPACK_IMPORTED_MODULE_15__.convertGqlOutputToMessages)(value.generateCopilotResponse.messages).find((msg)=>msg.isActionExecutionMessage());\n            if (!actionExecutionMessage) {\n                continue;\n            }\n            stream == null ? void 0 : stream({\n                status: isInitial ? \"initial\" : \"inProgress\",\n                args: actionExecutionMessage.arguments\n            });\n            isInitial = false;\n        }\n        if (!actionExecutionMessage) {\n            throw new Error(\"extract() failed: No function call occurred\");\n        }\n        stream == null ? void 0 : stream({\n            status: \"complete\",\n            args: actionExecutionMessage.arguments\n        });\n        return actionExecutionMessage.arguments;\n    });\n}\nfunction makeInstructionsMessage(instructions) {\n    return \"\\nThe user has given you the following task to complete:\\n\\n```\\n\".concat(instructions, \"\\n```\\n\\nAny additional messages provided are for providing context only and should not be used to ask questions or engage in conversation.\\n\");\n}\nfunction makeSystemMessage(contextString, instructions) {\n    return \"\\nPlease act as an efficient, competent, conscientious, and industrious professional assistant.\\n\\nHelp the user achieve their goals, and you do so in a way that is as efficient as possible, without unnecessary fluff, but also without sacrificing professionalism.\\nAlways be polite and respectful, and prefer brevity over verbosity.\\n\\nThe user has provided you with the following context:\\n```\\n\".concat(contextString, \"\\n```\\n\\nThey have also provided you with a function called extract you MUST call to initiate actions on their behalf.\\n\\nPlease assist them as best you can.\\n\\nThis is not a conversation, so please do not ask questions. Just call the function without saying anything else.\\n\");\n}\n //# sourceMappingURL=chunk-DHGXL5PC.mjs.map\nvar _c, _c1;\n$RefreshReg$(_c, \"CopilotKit\");\n$RefreshReg$(_c1, \"CopilotKitInternal\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@copilotkit/react-core/dist/chunk-DHGXL5PC.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@copilotkit/react-core/dist/chunk-EUIBVFV6.mjs":
/*!*********************************************************************!*\
  !*** ./node_modules/@copilotkit/react-core/dist/chunk-EUIBVFV6.mjs ***!
  \*********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useChat: function() { return /* binding */ useChat; }\n/* harmony export */ });\n/* harmony import */ var _chunk_ODN4H66E_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./chunk-ODN4H66E.mjs */ \"(app-pages-browser)/./node_modules/@copilotkit/react-core/dist/chunk-ODN4H66E.mjs\");\n/* harmony import */ var _chunk_2KCEHGSI_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./chunk-2KCEHGSI.mjs */ \"(app-pages-browser)/./node_modules/@copilotkit/react-core/dist/chunk-2KCEHGSI.mjs\");\n/* harmony import */ var _chunk_SKC7AJIV_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./chunk-SKC7AJIV.mjs */ \"(app-pages-browser)/./node_modules/@copilotkit/react-core/dist/chunk-SKC7AJIV.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var _copilotkit_shared__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @copilotkit/shared */ \"(app-pages-browser)/./node_modules/@copilotkit/shared/dist/chunk-GYZIHHE6.mjs\");\n/* harmony import */ var _copilotkit_shared__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @copilotkit/shared */ \"(app-pages-browser)/./node_modules/@copilotkit/shared/dist/chunk-JP2M4U4G.mjs\");\n/* harmony import */ var _copilotkit_runtime_client_gql__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @copilotkit/runtime-client-gql */ \"(app-pages-browser)/./node_modules/@copilotkit/runtime-client-gql/dist/chunk-GD5NLJQE.mjs\");\n/* harmony import */ var _copilotkit_runtime_client_gql__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @copilotkit/runtime-client-gql */ \"(app-pages-browser)/./node_modules/@copilotkit/runtime-client-gql/dist/chunk-OGFO6ZEP.mjs\");\n/* harmony import */ var _copilotkit_runtime_client_gql__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @copilotkit/runtime-client-gql */ \"(app-pages-browser)/./node_modules/@copilotkit/runtime-client-gql/dist/chunk-ZWVRRYBP.mjs\");\nvar _s = $RefreshSig$();\n\n\n\n// src/hooks/use-chat.ts\n\n\n\nfunction useChat(options) {\n    _s();\n    const { messages, setMessages, makeSystemMessageCallback, copilotConfig, setIsLoading, initialMessages, isLoading, actions, onFunctionCall, onCoAgentStateRender, setCoagentStatesWithRef, coagentStatesRef, agentSession, setAgentSession } = options;\n    const abortControllerRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)();\n    const threadIdRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const runIdRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const { addGraphQLErrorsToast } = (0,_chunk_2KCEHGSI_mjs__WEBPACK_IMPORTED_MODULE_1__.useToast)();\n    const runChatCompletionRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)();\n    const agentSessionRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(agentSession);\n    agentSessionRef.current = agentSession;\n    const publicApiKey = copilotConfig.publicApiKey;\n    const headers = (0,_chunk_SKC7AJIV_mjs__WEBPACK_IMPORTED_MODULE_2__.__spreadValues)((0,_chunk_SKC7AJIV_mjs__WEBPACK_IMPORTED_MODULE_2__.__spreadValues)({}, copilotConfig.headers || {}), publicApiKey ? {\n        [_copilotkit_shared__WEBPACK_IMPORTED_MODULE_3__.COPILOT_CLOUD_PUBLIC_API_KEY_HEADER]: publicApiKey\n    } : {});\n    const runtimeClient = (0,_chunk_ODN4H66E_mjs__WEBPACK_IMPORTED_MODULE_4__.useCopilotRuntimeClient)({\n        url: copilotConfig.chatApiEndpoint,\n        publicApiKey: copilotConfig.publicApiKey,\n        headers,\n        credentials: copilotConfig.credentials\n    });\n    const runChatCompletion = (previousMessages)=>(0,_chunk_SKC7AJIV_mjs__WEBPACK_IMPORTED_MODULE_2__.__async)(this, null, function*() {\n            var _a, _b, _c, _d, _e, _f, _g, _h, _i;\n            setIsLoading(true);\n            let newMessages = [\n                new _copilotkit_runtime_client_gql__WEBPACK_IMPORTED_MODULE_5__.TextMessage({\n                    content: \"\",\n                    role: _copilotkit_runtime_client_gql__WEBPACK_IMPORTED_MODULE_5__.Role.Assistant\n                })\n            ];\n            const abortController = new AbortController();\n            abortControllerRef.current = abortController;\n            setMessages([\n                ...previousMessages,\n                ...newMessages\n            ]);\n            const systemMessage = makeSystemMessageCallback();\n            const messagesWithContext = [\n                systemMessage,\n                ...initialMessages || [],\n                ...previousMessages\n            ];\n            const stream = runtimeClient.asStream(runtimeClient.generateCopilotResponse({\n                data: (0,_chunk_SKC7AJIV_mjs__WEBPACK_IMPORTED_MODULE_2__.__spreadProps)((0,_chunk_SKC7AJIV_mjs__WEBPACK_IMPORTED_MODULE_2__.__spreadValues)((0,_chunk_SKC7AJIV_mjs__WEBPACK_IMPORTED_MODULE_2__.__spreadProps)((0,_chunk_SKC7AJIV_mjs__WEBPACK_IMPORTED_MODULE_2__.__spreadValues)({\n                    frontend: {\n                        actions: actions.filter((action)=>action.available !== _copilotkit_runtime_client_gql__WEBPACK_IMPORTED_MODULE_6__.ActionInputAvailability.Disabled || !action.disabled).map((action)=>{\n                            let available = _copilotkit_runtime_client_gql__WEBPACK_IMPORTED_MODULE_6__.ActionInputAvailability.Enabled;\n                            if (action.disabled) {\n                                available = _copilotkit_runtime_client_gql__WEBPACK_IMPORTED_MODULE_6__.ActionInputAvailability.Disabled;\n                            } else if (action.available === \"disabled\") {\n                                available = _copilotkit_runtime_client_gql__WEBPACK_IMPORTED_MODULE_6__.ActionInputAvailability.Disabled;\n                            } else if (action.available === \"remote\") {\n                                available = _copilotkit_runtime_client_gql__WEBPACK_IMPORTED_MODULE_6__.ActionInputAvailability.Remote;\n                            }\n                            return {\n                                name: action.name,\n                                description: action.description || \"\",\n                                jsonSchema: JSON.stringify((0,_copilotkit_shared__WEBPACK_IMPORTED_MODULE_7__.actionParametersToJsonSchema)(action.parameters || [])),\n                                available\n                            };\n                        }),\n                        url: window.location.href\n                    },\n                    threadId: threadIdRef.current,\n                    runId: runIdRef.current,\n                    messages: (0,_copilotkit_runtime_client_gql__WEBPACK_IMPORTED_MODULE_8__.convertMessagesToGqlInput)((0,_copilotkit_runtime_client_gql__WEBPACK_IMPORTED_MODULE_8__.filterAgentStateMessages)(messagesWithContext))\n                }, copilotConfig.cloud ? {\n                    cloud: (0,_chunk_SKC7AJIV_mjs__WEBPACK_IMPORTED_MODULE_2__.__spreadValues)({}, ((_c = (_b = (_a = copilotConfig.cloud.guardrails) == null ? void 0 : _a.input) == null ? void 0 : _b.restrictToTopic) == null ? void 0 : _c.enabled) ? {\n                        guardrails: {\n                            inputValidationRules: {\n                                allowList: copilotConfig.cloud.guardrails.input.restrictToTopic.validTopics,\n                                denyList: copilotConfig.cloud.guardrails.input.restrictToTopic.invalidTopics\n                            }\n                        }\n                    } : {})\n                } : {}), {\n                    metadata: {\n                        requestType: _copilotkit_runtime_client_gql__WEBPACK_IMPORTED_MODULE_6__.CopilotRequestType.Chat\n                    }\n                }), agentSessionRef.current ? {\n                    agentSession: agentSessionRef.current\n                } : {}), {\n                    agentStates: Object.values(coagentStatesRef.current).map((state)=>({\n                            agentName: state.name,\n                            state: JSON.stringify(state.state)\n                        }))\n                }),\n                properties: copilotConfig.properties,\n                signal: (_d = abortControllerRef.current) == null ? void 0 : _d.signal\n            }));\n            const guardrailsEnabled = ((_g = (_f = (_e = copilotConfig.cloud) == null ? void 0 : _e.guardrails) == null ? void 0 : _f.input) == null ? void 0 : _g.restrictToTopic.enabled) || false;\n            const reader = stream.getReader();\n            let actionResults = {};\n            let executedCoAgentStateRenders = [];\n            let followUp = void 0;\n            try {\n                while(true){\n                    let done, value;\n                    try {\n                        const readResult = yield reader.read();\n                        done = readResult.done;\n                        value = readResult.value;\n                    } catch (readError) {\n                        break;\n                    }\n                    if (done) {\n                        break;\n                    }\n                    if (!(value == null ? void 0 : value.generateCopilotResponse)) {\n                        continue;\n                    }\n                    threadIdRef.current = value.generateCopilotResponse.threadId || null;\n                    runIdRef.current = value.generateCopilotResponse.runId || null;\n                    const messages2 = (0,_copilotkit_runtime_client_gql__WEBPACK_IMPORTED_MODULE_8__.convertGqlOutputToMessages)((0,_copilotkit_runtime_client_gql__WEBPACK_IMPORTED_MODULE_8__.filterAdjacentAgentStateMessages)(value.generateCopilotResponse.messages));\n                    if (messages2.length === 0) {\n                        continue;\n                    }\n                    newMessages = [];\n                    if (((_h = value.generateCopilotResponse.status) == null ? void 0 : _h.__typename) === \"FailedResponseStatus\" && value.generateCopilotResponse.status.reason === \"GUARDRAILS_VALIDATION_FAILED\") {\n                        newMessages = [\n                            new _copilotkit_runtime_client_gql__WEBPACK_IMPORTED_MODULE_5__.TextMessage({\n                                role: _copilotkit_runtime_client_gql__WEBPACK_IMPORTED_MODULE_6__.MessageRole.Assistant,\n                                content: ((_i = value.generateCopilotResponse.status.details) == null ? void 0 : _i.guardrailsReason) || \"\"\n                            })\n                        ];\n                    } else {\n                        for (const message of messages2){\n                            newMessages.push(message);\n                            if (message.isActionExecutionMessage() && message.status.code !== _copilotkit_runtime_client_gql__WEBPACK_IMPORTED_MODULE_6__.MessageStatusCode.Pending && message.scope === \"client\" && onFunctionCall) {\n                                if (!(message.id in actionResults)) {\n                                    if (guardrailsEnabled && value.generateCopilotResponse.status === void 0) {\n                                        break;\n                                    }\n                                    try {\n                                        setMessages([\n                                            ...previousMessages,\n                                            ...newMessages\n                                        ]);\n                                        const action = actions.find((action2)=>action2.name === message.name);\n                                        if (action) {\n                                            followUp = action.followUp;\n                                        }\n                                        const result = yield onFunctionCall({\n                                            messages: previousMessages,\n                                            name: message.name,\n                                            args: message.arguments\n                                        });\n                                        actionResults[message.id] = result;\n                                    } catch (e) {\n                                        actionResults[message.id] = \"Failed to execute action \".concat(message.name);\n                                        console.error(\"Failed to execute action \".concat(message.name, \": \").concat(e));\n                                    }\n                                }\n                                newMessages.push(new _copilotkit_runtime_client_gql__WEBPACK_IMPORTED_MODULE_5__.ResultMessage({\n                                    result: _copilotkit_runtime_client_gql__WEBPACK_IMPORTED_MODULE_5__.ResultMessage.encodeResult(actionResults[message.id]),\n                                    actionExecutionId: message.id,\n                                    actionName: message.name\n                                }));\n                            }\n                            if (message.isAgentStateMessage() && !message.active && !executedCoAgentStateRenders.includes(message.id) && onCoAgentStateRender) {\n                                if (guardrailsEnabled && value.generateCopilotResponse.status === void 0) {\n                                    break;\n                                }\n                                yield onCoAgentStateRender({\n                                    name: message.agentName,\n                                    nodeName: message.nodeName,\n                                    state: message.state\n                                });\n                                executedCoAgentStateRenders.push(message.id);\n                            }\n                        }\n                        const lastAgentStateMessage = [\n                            ...messages2\n                        ].reverse().find((message)=>message.isAgentStateMessage());\n                        if (lastAgentStateMessage) {\n                            setCoagentStatesWithRef((prevAgentStates)=>(0,_chunk_SKC7AJIV_mjs__WEBPACK_IMPORTED_MODULE_2__.__spreadProps)((0,_chunk_SKC7AJIV_mjs__WEBPACK_IMPORTED_MODULE_2__.__spreadValues)({}, prevAgentStates), {\n                                    [lastAgentStateMessage.agentName]: {\n                                        name: lastAgentStateMessage.agentName,\n                                        state: lastAgentStateMessage.state,\n                                        running: lastAgentStateMessage.running,\n                                        active: lastAgentStateMessage.active,\n                                        threadId: lastAgentStateMessage.threadId,\n                                        nodeName: lastAgentStateMessage.nodeName,\n                                        runId: lastAgentStateMessage.runId\n                                    }\n                                }));\n                            if (lastAgentStateMessage.running) {\n                                setAgentSession({\n                                    threadId: lastAgentStateMessage.threadId,\n                                    agentName: lastAgentStateMessage.agentName,\n                                    nodeName: lastAgentStateMessage.nodeName\n                                });\n                            } else {\n                                setAgentSession(null);\n                            }\n                        }\n                    }\n                    if (newMessages.length > 0) {\n                        setMessages([\n                            ...previousMessages,\n                            ...newMessages\n                        ]);\n                    }\n                }\n                if (// if followUp is not explicitly false\n                followUp !== false && // if we have client side results\n                (Object.values(actionResults).length || // or the last message we received is a result\n                newMessages.length && newMessages[newMessages.length - 1].isResultMessage())) {\n                    yield new Promise((resolve)=>setTimeout(resolve, 10));\n                    return yield runChatCompletionRef.current([\n                        ...previousMessages,\n                        ...newMessages\n                    ]);\n                } else {\n                    return newMessages.slice();\n                }\n            } finally{\n                setIsLoading(false);\n            }\n        });\n    runChatCompletionRef.current = runChatCompletion;\n    const runChatCompletionAndHandleFunctionCall = (messages2)=>(0,_chunk_SKC7AJIV_mjs__WEBPACK_IMPORTED_MODULE_2__.__async)(this, null, function*() {\n            yield runChatCompletionRef.current(messages2);\n        });\n    const append = (message)=>(0,_chunk_SKC7AJIV_mjs__WEBPACK_IMPORTED_MODULE_2__.__async)(this, null, function*() {\n            if (isLoading) {\n                return;\n            }\n            const newMessages = [\n                ...messages,\n                message\n            ];\n            setMessages(newMessages);\n            return runChatCompletionAndHandleFunctionCall(newMessages);\n        });\n    const reload = ()=>(0,_chunk_SKC7AJIV_mjs__WEBPACK_IMPORTED_MODULE_2__.__async)(this, null, function*() {\n            if (isLoading || messages.length === 0) {\n                return;\n            }\n            let newMessages = [\n                ...messages\n            ];\n            const lastMessage = messages[messages.length - 1];\n            if (lastMessage.isTextMessage() && lastMessage.role === \"assistant\") {\n                newMessages = newMessages.slice(0, -1);\n            }\n            setMessages(newMessages);\n            return runChatCompletionAndHandleFunctionCall(newMessages);\n        });\n    const stop = ()=>{\n        var _a;\n        (_a = abortControllerRef.current) == null ? void 0 : _a.abort();\n    };\n    return {\n        append,\n        reload,\n        stop,\n        runChatCompletion: ()=>runChatCompletionRef.current(messages)\n    };\n}\n_s(useChat, \"wwNNbrm80Jp2DIMsEPYmEmRxU90=\", false, function() {\n    return [\n        _chunk_2KCEHGSI_mjs__WEBPACK_IMPORTED_MODULE_1__.useToast,\n        _chunk_ODN4H66E_mjs__WEBPACK_IMPORTED_MODULE_4__.useCopilotRuntimeClient\n    ];\n});\n //# sourceMappingURL=chunk-EUIBVFV6.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@copilotkit/react-core/dist/chunk-EUIBVFV6.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@copilotkit/react-core/dist/chunk-JHEAUB3Z.mjs":
/*!*********************************************************************!*\
  !*** ./node_modules/@copilotkit/react-core/dist/chunk-JHEAUB3Z.mjs ***!
  \*********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useCoAgentStateRender: function() { return /* binding */ useCoAgentStateRender; }\n/* harmony export */ });\n/* harmony import */ var _chunk_XQFVXX6R_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./chunk-XQFVXX6R.mjs */ \"(app-pages-browser)/./node_modules/@copilotkit/react-core/dist/chunk-XQFVXX6R.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var _copilotkit_shared__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @copilotkit/shared */ \"(app-pages-browser)/./node_modules/@copilotkit/shared/dist/chunk-RIPX6APP.mjs\");\nvar _s = $RefreshSig$();\n\n// src/hooks/use-coagent-state-render.ts\n\n\nfunction useCoAgentStateRender(action, dependencies) {\n    _s();\n    const { setCoAgentStateRender, removeCoAgentStateRender, coAgentStateRenders, chatComponentsCache } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(_chunk_XQFVXX6R_mjs__WEBPACK_IMPORTED_MODULE_1__.CopilotContext);\n    const idRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)((0,_copilotkit_shared__WEBPACK_IMPORTED_MODULE_2__.randomId)());\n    const key = \"\".concat(action.name, \"-\").concat(action.nodeName || \"global\");\n    if (dependencies === void 0) {\n        if (coAgentStateRenders[idRef.current]) {\n            coAgentStateRenders[idRef.current].handler = action.handler;\n            if (typeof action.render === \"function\") {\n                if (chatComponentsCache.current !== null) {\n                    chatComponentsCache.current.coAgentStateRenders[key] = action.render;\n                }\n            }\n        }\n    }\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        setCoAgentStateRender(idRef.current, action);\n        if (chatComponentsCache.current !== null && action.render !== void 0) {\n            chatComponentsCache.current.coAgentStateRenders[key] = action.render;\n        }\n        return ()=>{\n            removeCoAgentStateRender(idRef.current);\n        };\n    }, [\n        setCoAgentStateRender,\n        removeCoAgentStateRender,\n        action.name,\n        // include render only if it's a string\n        typeof action.render === \"string\" ? action.render : void 0,\n        // dependencies set by the developer\n        ...dependencies || []\n    ]);\n}\n_s(useCoAgentStateRender, \"TYOiwXiQPTgrEO46ypU7AhIL9wQ=\");\n //# sourceMappingURL=chunk-JHEAUB3Z.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AY29waWxvdGtpdC9yZWFjdC1jb3JlL2Rpc3QvY2h1bmstSkhFQVVCM1oubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBRThCO0FBRTlCLHdDQUF3QztBQUNjO0FBQ1I7QUFDOUMsU0FBU0ssc0JBQXNCQyxNQUFNLEVBQUVDLFlBQVk7O0lBQ2pELE1BQU0sRUFDSkMscUJBQXFCLEVBQ3JCQyx3QkFBd0IsRUFDeEJDLG1CQUFtQixFQUNuQkMsbUJBQW1CLEVBQ3BCLEdBQUdULGlEQUFVQSxDQUFDRiwrREFBY0E7SUFDN0IsTUFBTVksUUFBUVgsNkNBQU1BLENBQUNHLDREQUFRQTtJQUM3QixNQUFNUyxNQUFNLEdBQWtCUCxPQUFmQSxPQUFPUSxJQUFJLEVBQUMsS0FBK0IsT0FBNUJSLE9BQU9TLFFBQVEsSUFBSTtJQUNqRCxJQUFJUixpQkFBaUIsS0FBSyxHQUFHO1FBQzNCLElBQUlHLG1CQUFtQixDQUFDRSxNQUFNSSxPQUFPLENBQUMsRUFBRTtZQUN0Q04sbUJBQW1CLENBQUNFLE1BQU1JLE9BQU8sQ0FBQyxDQUFDQyxPQUFPLEdBQUdYLE9BQU9XLE9BQU87WUFDM0QsSUFBSSxPQUFPWCxPQUFPWSxNQUFNLEtBQUssWUFBWTtnQkFDdkMsSUFBSVAsb0JBQW9CSyxPQUFPLEtBQUssTUFBTTtvQkFDeENMLG9CQUFvQkssT0FBTyxDQUFDTixtQkFBbUIsQ0FBQ0csSUFBSSxHQUFHUCxPQUFPWSxNQUFNO2dCQUN0RTtZQUNGO1FBQ0Y7SUFDRjtJQUNBZixnREFBU0EsQ0FBQztRQUNSSyxzQkFBc0JJLE1BQU1JLE9BQU8sRUFBRVY7UUFDckMsSUFBSUssb0JBQW9CSyxPQUFPLEtBQUssUUFBUVYsT0FBT1ksTUFBTSxLQUFLLEtBQUssR0FBRztZQUNwRVAsb0JBQW9CSyxPQUFPLENBQUNOLG1CQUFtQixDQUFDRyxJQUFJLEdBQUdQLE9BQU9ZLE1BQU07UUFDdEU7UUFDQSxPQUFPO1lBQ0xULHlCQUF5QkcsTUFBTUksT0FBTztRQUN4QztJQUNGLEdBQUc7UUFDRFI7UUFDQUM7UUFDQUgsT0FBT1EsSUFBSTtRQUNYLHVDQUF1QztRQUN2QyxPQUFPUixPQUFPWSxNQUFNLEtBQUssV0FBV1osT0FBT1ksTUFBTSxHQUFHLEtBQUs7UUFDekQsb0NBQW9DO1dBQ2pDWCxnQkFBZ0IsRUFBRTtLQUN0QjtBQUNIO0dBcENTRjtBQXdDUCxDQUNGLDJDQUEyQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQGNvcGlsb3RraXQvcmVhY3QtY29yZS9kaXN0L2NodW5rLUpIRUFVQjNaLm1qcz9lNzJmIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIENvcGlsb3RDb250ZXh0XG59IGZyb20gXCIuL2NodW5rLVhRRlZYWDZSLm1qc1wiO1xuXG4vLyBzcmMvaG9va3MvdXNlLWNvYWdlbnQtc3RhdGUtcmVuZGVyLnRzXG5pbXBvcnQgeyB1c2VSZWYsIHVzZUNvbnRleHQsIHVzZUVmZmVjdCB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgcmFuZG9tSWQgfSBmcm9tIFwiQGNvcGlsb3RraXQvc2hhcmVkXCI7XG5mdW5jdGlvbiB1c2VDb0FnZW50U3RhdGVSZW5kZXIoYWN0aW9uLCBkZXBlbmRlbmNpZXMpIHtcbiAgY29uc3Qge1xuICAgIHNldENvQWdlbnRTdGF0ZVJlbmRlcixcbiAgICByZW1vdmVDb0FnZW50U3RhdGVSZW5kZXIsXG4gICAgY29BZ2VudFN0YXRlUmVuZGVycyxcbiAgICBjaGF0Q29tcG9uZW50c0NhY2hlXG4gIH0gPSB1c2VDb250ZXh0KENvcGlsb3RDb250ZXh0KTtcbiAgY29uc3QgaWRSZWYgPSB1c2VSZWYocmFuZG9tSWQoKSk7XG4gIGNvbnN0IGtleSA9IGAke2FjdGlvbi5uYW1lfS0ke2FjdGlvbi5ub2RlTmFtZSB8fCBcImdsb2JhbFwifWA7XG4gIGlmIChkZXBlbmRlbmNpZXMgPT09IHZvaWQgMCkge1xuICAgIGlmIChjb0FnZW50U3RhdGVSZW5kZXJzW2lkUmVmLmN1cnJlbnRdKSB7XG4gICAgICBjb0FnZW50U3RhdGVSZW5kZXJzW2lkUmVmLmN1cnJlbnRdLmhhbmRsZXIgPSBhY3Rpb24uaGFuZGxlcjtcbiAgICAgIGlmICh0eXBlb2YgYWN0aW9uLnJlbmRlciA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIGlmIChjaGF0Q29tcG9uZW50c0NhY2hlLmN1cnJlbnQgIT09IG51bGwpIHtcbiAgICAgICAgICBjaGF0Q29tcG9uZW50c0NhY2hlLmN1cnJlbnQuY29BZ2VudFN0YXRlUmVuZGVyc1trZXldID0gYWN0aW9uLnJlbmRlcjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIHNldENvQWdlbnRTdGF0ZVJlbmRlcihpZFJlZi5jdXJyZW50LCBhY3Rpb24pO1xuICAgIGlmIChjaGF0Q29tcG9uZW50c0NhY2hlLmN1cnJlbnQgIT09IG51bGwgJiYgYWN0aW9uLnJlbmRlciAhPT0gdm9pZCAwKSB7XG4gICAgICBjaGF0Q29tcG9uZW50c0NhY2hlLmN1cnJlbnQuY29BZ2VudFN0YXRlUmVuZGVyc1trZXldID0gYWN0aW9uLnJlbmRlcjtcbiAgICB9XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIHJlbW92ZUNvQWdlbnRTdGF0ZVJlbmRlcihpZFJlZi5jdXJyZW50KTtcbiAgICB9O1xuICB9LCBbXG4gICAgc2V0Q29BZ2VudFN0YXRlUmVuZGVyLFxuICAgIHJlbW92ZUNvQWdlbnRTdGF0ZVJlbmRlcixcbiAgICBhY3Rpb24ubmFtZSxcbiAgICAvLyBpbmNsdWRlIHJlbmRlciBvbmx5IGlmIGl0J3MgYSBzdHJpbmdcbiAgICB0eXBlb2YgYWN0aW9uLnJlbmRlciA9PT0gXCJzdHJpbmdcIiA/IGFjdGlvbi5yZW5kZXIgOiB2b2lkIDAsXG4gICAgLy8gZGVwZW5kZW5jaWVzIHNldCBieSB0aGUgZGV2ZWxvcGVyXG4gICAgLi4uZGVwZW5kZW5jaWVzIHx8IFtdXG4gIF0pO1xufVxuXG5leHBvcnQge1xuICB1c2VDb0FnZW50U3RhdGVSZW5kZXJcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jaHVuay1KSEVBVUIzWi5tanMubWFwIl0sIm5hbWVzIjpbIkNvcGlsb3RDb250ZXh0IiwidXNlUmVmIiwidXNlQ29udGV4dCIsInVzZUVmZmVjdCIsInJhbmRvbUlkIiwidXNlQ29BZ2VudFN0YXRlUmVuZGVyIiwiYWN0aW9uIiwiZGVwZW5kZW5jaWVzIiwic2V0Q29BZ2VudFN0YXRlUmVuZGVyIiwicmVtb3ZlQ29BZ2VudFN0YXRlUmVuZGVyIiwiY29BZ2VudFN0YXRlUmVuZGVycyIsImNoYXRDb21wb25lbnRzQ2FjaGUiLCJpZFJlZiIsImtleSIsIm5hbWUiLCJub2RlTmFtZSIsImN1cnJlbnQiLCJoYW5kbGVyIiwicmVuZGVyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@copilotkit/react-core/dist/chunk-JHEAUB3Z.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@copilotkit/react-core/dist/chunk-MLAS4QUR.mjs":
/*!*********************************************************************!*\
  !*** ./node_modules/@copilotkit/react-core/dist/chunk-MLAS4QUR.mjs ***!
  \*********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   shouldShowDevConsole: function() { return /* binding */ shouldShowDevConsole; }\n/* harmony export */ });\n// src/utils/dev-console.ts\nfunction shouldShowDevConsole(showDevConsole) {\n    if (typeof showDevConsole === \"boolean\") {\n        return showDevConsole;\n    }\n    return getHostname() === \"localhost\" || getHostname() === \"127.0.0.1\" || getHostname() === \"0.0.0.0\" || getHostname() === \"::1\";\n}\nfunction getHostname() {\n    if ( true && window.location) {\n        return window.location.hostname;\n    }\n    return \"\";\n}\n //# sourceMappingURL=chunk-MLAS4QUR.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AY29waWxvdGtpdC9yZWFjdC1jb3JlL2Rpc3QvY2h1bmstTUxBUzRRVVIubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSwyQkFBMkI7QUFDM0IsU0FBU0EscUJBQXFCQyxjQUFjO0lBQzFDLElBQUksT0FBT0EsbUJBQW1CLFdBQVc7UUFDdkMsT0FBT0E7SUFDVDtJQUNBLE9BQU9DLGtCQUFrQixlQUFlQSxrQkFBa0IsZUFBZUEsa0JBQWtCLGFBQWFBLGtCQUFrQjtBQUM1SDtBQUNBLFNBQVNBO0lBQ1AsSUFBSSxLQUE2QixJQUFJQyxPQUFPQyxRQUFRLEVBQUU7UUFDcEQsT0FBT0QsT0FBT0MsUUFBUSxDQUFDQyxRQUFRO0lBQ2pDO0lBQ0EsT0FBTztBQUNUO0FBSUUsQ0FDRiwyQ0FBMkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0Bjb3BpbG90a2l0L3JlYWN0LWNvcmUvZGlzdC9jaHVuay1NTEFTNFFVUi5tanM/ZGE5OCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBzcmMvdXRpbHMvZGV2LWNvbnNvbGUudHNcbmZ1bmN0aW9uIHNob3VsZFNob3dEZXZDb25zb2xlKHNob3dEZXZDb25zb2xlKSB7XG4gIGlmICh0eXBlb2Ygc2hvd0RldkNvbnNvbGUgPT09IFwiYm9vbGVhblwiKSB7XG4gICAgcmV0dXJuIHNob3dEZXZDb25zb2xlO1xuICB9XG4gIHJldHVybiBnZXRIb3N0bmFtZSgpID09PSBcImxvY2FsaG9zdFwiIHx8IGdldEhvc3RuYW1lKCkgPT09IFwiMTI3LjAuMC4xXCIgfHwgZ2V0SG9zdG5hbWUoKSA9PT0gXCIwLjAuMC4wXCIgfHwgZ2V0SG9zdG5hbWUoKSA9PT0gXCI6OjFcIjtcbn1cbmZ1bmN0aW9uIGdldEhvc3RuYW1lKCkge1xuICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiAmJiB3aW5kb3cubG9jYXRpb24pIHtcbiAgICByZXR1cm4gd2luZG93LmxvY2F0aW9uLmhvc3RuYW1lO1xuICB9XG4gIHJldHVybiBcIlwiO1xufVxuXG5leHBvcnQge1xuICBzaG91bGRTaG93RGV2Q29uc29sZVxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNodW5rLU1MQVM0UVVSLm1qcy5tYXAiXSwibmFtZXMiOlsic2hvdWxkU2hvd0RldkNvbnNvbGUiLCJzaG93RGV2Q29uc29sZSIsImdldEhvc3RuYW1lIiwid2luZG93IiwibG9jYXRpb24iLCJob3N0bmFtZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@copilotkit/react-core/dist/chunk-MLAS4QUR.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@copilotkit/react-core/dist/chunk-O22KGHOQ.mjs":
/*!*********************************************************************!*\
  !*** ./node_modules/@copilotkit/react-core/dist/chunk-O22KGHOQ.mjs ***!
  \*********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useCoAgent: function() { return /* binding */ useCoAgent; }\n/* harmony export */ });\n/* harmony import */ var _chunk_XBVKTDXP_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./chunk-XBVKTDXP.mjs */ \"(app-pages-browser)/./node_modules/@copilotkit/react-core/dist/chunk-XBVKTDXP.mjs\");\n/* harmony import */ var _chunk_DCTJZ742_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./chunk-DCTJZ742.mjs */ \"(app-pages-browser)/./node_modules/@copilotkit/react-core/dist/chunk-DCTJZ742.mjs\");\n/* harmony import */ var _chunk_XQFVXX6R_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./chunk-XQFVXX6R.mjs */ \"(app-pages-browser)/./node_modules/@copilotkit/react-core/dist/chunk-XQFVXX6R.mjs\");\n/* harmony import */ var _chunk_SKC7AJIV_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./chunk-SKC7AJIV.mjs */ \"(app-pages-browser)/./node_modules/@copilotkit/react-core/dist/chunk-SKC7AJIV.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\nvar _s = $RefreshSig$();\n\n\n\n\n// src/hooks/use-coagent.ts\n\nfunction useCoAgent(options) {\n    _s();\n    const isExternalStateManagement = (options2)=>{\n        return \"state\" in options2 && \"setState\" in options2;\n    };\n    const { name } = options;\n    const isInternalStateManagementWithInitial = (options2)=>{\n        return \"initialState\" in options2;\n    };\n    const generalContext = (0,_chunk_XQFVXX6R_mjs__WEBPACK_IMPORTED_MODULE_1__.useCopilotContext)();\n    const messagesContext = (0,_chunk_DCTJZ742_mjs__WEBPACK_IMPORTED_MODULE_2__.useCopilotMessagesContext)();\n    const context = (0,_chunk_SKC7AJIV_mjs__WEBPACK_IMPORTED_MODULE_3__.__spreadValues)((0,_chunk_SKC7AJIV_mjs__WEBPACK_IMPORTED_MODULE_3__.__spreadValues)({}, generalContext), messagesContext);\n    const { coagentStates, coagentStatesRef, setCoagentStatesWithRef } = context;\n    const { appendMessage, runChatCompletion } = (0,_chunk_XBVKTDXP_mjs__WEBPACK_IMPORTED_MODULE_4__.useCopilotChat)();\n    const getCoagentState = (coagentStates2, name2)=>{\n        if (coagentStates2[name2]) {\n            return coagentStates2[name2];\n        } else {\n            return {\n                name: name2,\n                state: isInternalStateManagementWithInitial(options) ? options.initialState : {},\n                running: false,\n                active: false,\n                threadId: void 0,\n                nodeName: void 0,\n                runId: void 0\n            };\n        }\n    };\n    const setState = (newState)=>{\n        let coagentState2 = getCoagentState(coagentStatesRef.current || {}, name);\n        const updatedState = typeof newState === \"function\" ? newState(coagentState2.state) : newState;\n        setCoagentStatesWithRef((0,_chunk_SKC7AJIV_mjs__WEBPACK_IMPORTED_MODULE_3__.__spreadProps)((0,_chunk_SKC7AJIV_mjs__WEBPACK_IMPORTED_MODULE_3__.__spreadValues)({}, coagentStatesRef.current), {\n            [name]: (0,_chunk_SKC7AJIV_mjs__WEBPACK_IMPORTED_MODULE_3__.__spreadProps)((0,_chunk_SKC7AJIV_mjs__WEBPACK_IMPORTED_MODULE_3__.__spreadValues)({}, coagentState2), {\n                state: updatedState\n            })\n        }));\n    };\n    const coagentState = getCoagentState(coagentStates, name);\n    const state = isExternalStateManagement(options) ? options.state : coagentState.state;\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (isExternalStateManagement(options)) {\n            setState(options.state);\n        } else if (coagentStates[name] === void 0) {\n            setState(options.initialState === void 0 ? {} : options.initialState);\n        }\n    }, [\n        isExternalStateManagement(options) ? JSON.stringify(options.state) : void 0\n    ]);\n    return {\n        name,\n        nodeName: coagentState.nodeName,\n        state,\n        setState,\n        running: coagentState.running,\n        start: ()=>{\n            startAgent(name, context);\n        },\n        stop: ()=>{\n            stopAgent(name, context);\n        },\n        run: (hint)=>{\n            return runAgent(name, context, appendMessage, runChatCompletion, hint);\n        }\n    };\n}\n_s(useCoAgent, \"7WQC0MPnYKn8VNPLYR+7+KA9iP0=\", false, function() {\n    return [\n        _chunk_XQFVXX6R_mjs__WEBPACK_IMPORTED_MODULE_1__.useCopilotContext,\n        _chunk_DCTJZ742_mjs__WEBPACK_IMPORTED_MODULE_2__.useCopilotMessagesContext,\n        _chunk_XBVKTDXP_mjs__WEBPACK_IMPORTED_MODULE_4__.useCopilotChat\n    ];\n});\nfunction startAgent(name, context) {\n    const { setAgentSession } = context;\n    setAgentSession({\n        agentName: name\n    });\n}\nfunction stopAgent(name, context) {\n    const { agentSession, setAgentSession } = context;\n    if (agentSession && agentSession.agentName === name) {\n        setAgentSession(null);\n    } else {\n        console.warn(\"No agent session found for \".concat(name));\n    }\n}\nfunction runAgent(name, context, appendMessage, runChatCompletion, hint) {\n    return (0,_chunk_SKC7AJIV_mjs__WEBPACK_IMPORTED_MODULE_3__.__async)(this, null, function*() {\n        var _a, _b;\n        const { agentSession, setAgentSession } = context;\n        if (!agentSession || agentSession.agentName !== name) {\n            setAgentSession({\n                agentName: name\n            });\n        }\n        let previousState = null;\n        for(let i = context.messages.length - 1; i >= 0; i--){\n            const message = context.messages[i];\n            if (message.isAgentStateMessage() && message.agentName === name) {\n                previousState = message.state;\n            }\n        }\n        let state = ((_b = (_a = context.coagentStatesRef.current) == null ? void 0 : _a[name]) == null ? void 0 : _b.state) || {};\n        if (hint) {\n            const hintMessage = hint({\n                previousState,\n                currentState: state\n            });\n            if (hintMessage) {\n                yield appendMessage(hintMessage);\n            } else {\n                yield runChatCompletion();\n            }\n        } else {\n            yield runChatCompletion();\n        }\n    });\n}\n //# sourceMappingURL=chunk-O22KGHOQ.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AY29waWxvdGtpdC9yZWFjdC1jb3JlL2Rpc3QvY2h1bmstTzIyS0dIT1EubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFFOEI7QUFHQTtBQUdBO0FBS0E7QUFFOUIsMkJBQTJCO0FBQ087QUFDbEMsU0FBU08sV0FBV0MsT0FBTzs7SUFDekIsTUFBTUMsNEJBQTRCLENBQUNDO1FBQ2pDLE9BQU8sV0FBV0EsWUFBWSxjQUFjQTtJQUM5QztJQUNBLE1BQU0sRUFBRUMsSUFBSSxFQUFFLEdBQUdIO0lBQ2pCLE1BQU1JLHVDQUF1QyxDQUFDRjtRQUM1QyxPQUFPLGtCQUFrQkE7SUFDM0I7SUFDQSxNQUFNRyxpQkFBaUJYLHNFQUFpQkE7SUFDeEMsTUFBTVksa0JBQWtCYiw4RUFBeUJBO0lBQ2pELE1BQU1jLFVBQVVWLG1FQUFjQSxDQUFDQSxtRUFBY0EsQ0FBQyxDQUFDLEdBQUdRLGlCQUFpQkM7SUFDbkUsTUFBTSxFQUFFRSxhQUFhLEVBQUVDLGdCQUFnQixFQUFFQyx1QkFBdUIsRUFBRSxHQUFHSDtJQUNyRSxNQUFNLEVBQUVJLGFBQWEsRUFBRUMsaUJBQWlCLEVBQUUsR0FBR3BCLG1FQUFjQTtJQUMzRCxNQUFNcUIsa0JBQWtCLENBQUNDLGdCQUFnQkM7UUFDdkMsSUFBSUQsY0FBYyxDQUFDQyxNQUFNLEVBQUU7WUFDekIsT0FBT0QsY0FBYyxDQUFDQyxNQUFNO1FBQzlCLE9BQU87WUFDTCxPQUFPO2dCQUNMWixNQUFNWTtnQkFDTkMsT0FBT1oscUNBQXFDSixXQUFXQSxRQUFRaUIsWUFBWSxHQUFHLENBQUM7Z0JBQy9FQyxTQUFTO2dCQUNUQyxRQUFRO2dCQUNSQyxVQUFVLEtBQUs7Z0JBQ2ZDLFVBQVUsS0FBSztnQkFDZkMsT0FBTyxLQUFLO1lBQ2Q7UUFDRjtJQUNGO0lBQ0EsTUFBTUMsV0FBVyxDQUFDQztRQUNoQixJQUFJQyxnQkFBZ0JaLGdCQUFnQkosaUJBQWlCaUIsT0FBTyxJQUFJLENB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QUssSUFBSXlDLEdBQUc1QixLQUFLLEtBQUssQ0FBQztRQUN6SCxJQUFJb0IsTUFBTTtZQUNSLE1BQU1lLGNBQWNmLEtBQUs7Z0JBQUVTO2dCQUFlTyxjQUFjcEM7WUFBTTtZQUM5RCxJQUFJbUMsYUFBYTtnQkFDZixNQUFNeEMsY0FBY3dDO1lBQ3RCLE9BQU87Z0JBQ0wsTUFBTXZDO1lBQ1I7UUFDRixPQUFPO1lBQ0wsTUFBTUE7UUFDUjtJQUNGO0FBQ0Y7QUFJRSxDQUNGLDJDQUEyQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQGNvcGlsb3RraXQvcmVhY3QtY29yZS9kaXN0L2NodW5rLU8yMktHSE9RLm1qcz9mNDcxIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIHVzZUNvcGlsb3RDaGF0XG59IGZyb20gXCIuL2NodW5rLVhCVktURFhQLm1qc1wiO1xuaW1wb3J0IHtcbiAgdXNlQ29waWxvdE1lc3NhZ2VzQ29udGV4dFxufSBmcm9tIFwiLi9jaHVuay1EQ1RKWjc0Mi5tanNcIjtcbmltcG9ydCB7XG4gIHVzZUNvcGlsb3RDb250ZXh0XG59IGZyb20gXCIuL2NodW5rLVhRRlZYWDZSLm1qc1wiO1xuaW1wb3J0IHtcbiAgX19hc3luYyxcbiAgX19zcHJlYWRQcm9wcyxcbiAgX19zcHJlYWRWYWx1ZXNcbn0gZnJvbSBcIi4vY2h1bmstU0tDN0FKSVYubWpzXCI7XG5cbi8vIHNyYy9ob29rcy91c2UtY29hZ2VudC50c1xuaW1wb3J0IHsgdXNlRWZmZWN0IH0gZnJvbSBcInJlYWN0XCI7XG5mdW5jdGlvbiB1c2VDb0FnZW50KG9wdGlvbnMpIHtcbiAgY29uc3QgaXNFeHRlcm5hbFN0YXRlTWFuYWdlbWVudCA9IChvcHRpb25zMikgPT4ge1xuICAgIHJldHVybiBcInN0YXRlXCIgaW4gb3B0aW9uczIgJiYgXCJzZXRTdGF0ZVwiIGluIG9wdGlvbnMyO1xuICB9O1xuICBjb25zdCB7IG5hbWUgfSA9IG9wdGlvbnM7XG4gIGNvbnN0IGlzSW50ZXJuYWxTdGF0ZU1hbmFnZW1lbnRXaXRoSW5pdGlhbCA9IChvcHRpb25zMikgPT4ge1xuICAgIHJldHVybiBcImluaXRpYWxTdGF0ZVwiIGluIG9wdGlvbnMyO1xuICB9O1xuICBjb25zdCBnZW5lcmFsQ29udGV4dCA9IHVzZUNvcGlsb3RDb250ZXh0KCk7XG4gIGNvbnN0IG1lc3NhZ2VzQ29udGV4dCA9IHVzZUNvcGlsb3RNZXNzYWdlc0NvbnRleHQoKTtcbiAgY29uc3QgY29udGV4dCA9IF9fc3ByZWFkVmFsdWVzKF9fc3ByZWFkVmFsdWVzKHt9LCBnZW5lcmFsQ29udGV4dCksIG1lc3NhZ2VzQ29udGV4dCk7XG4gIGNvbnN0IHsgY29hZ2VudFN0YXRlcywgY29hZ2VudFN0YXRlc1JlZiwgc2V0Q29hZ2VudFN0YXRlc1dpdGhSZWYgfSA9IGNvbnRleHQ7XG4gIGNvbnN0IHsgYXBwZW5kTWVzc2FnZSwgcnVuQ2hhdENvbXBsZXRpb24gfSA9IHVzZUNvcGlsb3RDaGF0KCk7XG4gIGNvbnN0IGdldENvYWdlbnRTdGF0ZSA9IChjb2FnZW50U3RhdGVzMiwgbmFtZTIpID0+IHtcbiAgICBpZiAoY29hZ2VudFN0YXRlczJbbmFtZTJdKSB7XG4gICAgICByZXR1cm4gY29hZ2VudFN0YXRlczJbbmFtZTJdO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBuYW1lOiBuYW1lMixcbiAgICAgICAgc3RhdGU6IGlzSW50ZXJuYWxTdGF0ZU1hbmFnZW1lbnRXaXRoSW5pdGlhbChvcHRpb25zKSA/IG9wdGlvbnMuaW5pdGlhbFN0YXRlIDoge30sXG4gICAgICAgIHJ1bm5pbmc6IGZhbHNlLFxuICAgICAgICBhY3RpdmU6IGZhbHNlLFxuICAgICAgICB0aHJlYWRJZDogdm9pZCAwLFxuICAgICAgICBub2RlTmFtZTogdm9pZCAwLFxuICAgICAgICBydW5JZDogdm9pZCAwXG4gICAgICB9O1xuICAgIH1cbiAgfTtcbiAgY29uc3Qgc2V0U3RhdGUgPSAobmV3U3RhdGUpID0+IHtcbiAgICBsZXQgY29hZ2VudFN0YXRlMiA9IGdldENvYWdlbnRTdGF0ZShjb2FnZW50U3RhdGVzUmVmLmN1cnJlbnQgfHwge30sIG5hbWUpO1xuICAgIGNvbnN0IHVwZGF0ZWRTdGF0ZSA9IHR5cGVvZiBuZXdTdGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gbmV3U3RhdGUoY29hZ2VudFN0YXRlMi5zdGF0ZSkgOiBuZXdTdGF0ZTtcbiAgICBzZXRDb2FnZW50U3RhdGVzV2l0aFJlZihfX3NwcmVhZFByb3BzKF9fc3ByZWFkVmFsdWVzKHt9LCBjb2FnZW50U3RhdGVzUmVmLmN1cnJlbnQpLCB7XG4gICAgICBbbmFtZV06IF9fc3ByZWFkUHJvcHMoX19zcHJlYWRWYWx1ZXMoe30sIGNvYWdlbnRTdGF0ZTIpLCB7XG4gICAgICAgIHN0YXRlOiB1cGRhdGVkU3RhdGVcbiAgICAgIH0pXG4gICAgfSkpO1xuICB9O1xuICBjb25zdCBjb2FnZW50U3RhdGUgPSBnZXRDb2FnZW50U3RhdGUoY29hZ2VudFN0YXRlcywgbmFtZSk7XG4gIGNvbnN0IHN0YXRlID0gaXNFeHRlcm5hbFN0YXRlTWFuYWdlbWVudChvcHRpb25zKSA/IG9wdGlvbnMuc3RhdGUgOiBjb2FnZW50U3RhdGUuc3RhdGU7XG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKGlzRXh0ZXJuYWxTdGF0ZU1hbmFnZW1lbnQob3B0aW9ucykpIHtcbiAgICAgIHNldFN0YXRlKG9wdGlvbnMuc3RhdGUpO1xuICAgIH0gZWxzZSBpZiAoY29hZ2VudFN0YXRlc1tuYW1lXSA9PT0gdm9pZCAwKSB7XG4gICAgICBzZXRTdGF0ZShvcHRpb25zLmluaXRpYWxTdGF0ZSA9PT0gdm9pZCAwID8ge30gOiBvcHRpb25zLmluaXRpYWxTdGF0ZSk7XG4gICAgfVxuICB9LCBbaXNFeHRlcm5hbFN0YXRlTWFuYWdlbWVudChvcHRpb25zKSA/IEpTT04uc3RyaW5naWZ5KG9wdGlvbnMuc3RhdGUpIDogdm9pZCAwXSk7XG4gIHJldHVybiB7XG4gICAgbmFtZSxcbiAgICBub2RlTmFtZTogY29hZ2VudFN0YXRlLm5vZGVOYW1lLFxuICAgIHN0YXRlLFxuICAgIHNldFN0YXRlLFxuICAgIHJ1bm5pbmc6IGNvYWdlbnRTdGF0ZS5ydW5uaW5nLFxuICAgIHN0YXJ0OiAoKSA9PiB7XG4gICAgICBzdGFydEFnZW50KG5hbWUsIGNvbnRleHQpO1xuICAgIH0sXG4gICAgc3RvcDogKCkgPT4ge1xuICAgICAgc3RvcEFnZW50KG5hbWUsIGNvbnRleHQpO1xuICAgIH0sXG4gICAgcnVuOiAoaGludCkgPT4ge1xuICAgICAgcmV0dXJuIHJ1bkFnZW50KG5hbWUsIGNvbnRleHQsIGFwcGVuZE1lc3NhZ2UsIHJ1bkNoYXRDb21wbGV0aW9uLCBoaW50KTtcbiAgICB9XG4gIH07XG59XG5mdW5jdGlvbiBzdGFydEFnZW50KG5hbWUsIGNvbnRleHQpIHtcbiAgY29uc3QgeyBzZXRBZ2VudFNlc3Npb24gfSA9IGNvbnRleHQ7XG4gIHNldEFnZW50U2Vzc2lvbih7XG4gICAgYWdlbnROYW1lOiBuYW1lXG4gIH0pO1xufVxuZnVuY3Rpb24gc3RvcEFnZW50KG5hbWUsIGNvbnRleHQpIHtcbiAgY29uc3QgeyBhZ2VudFNlc3Npb24sIHNldEFnZW50U2Vzc2lvbiB9ID0gY29udGV4dDtcbiAgaWYgKGFnZW50U2Vzc2lvbiAmJiBhZ2VudFNlc3Npb24uYWdlbnROYW1lID09PSBuYW1lKSB7XG4gICAgc2V0QWdlbnRTZXNzaW9uKG51bGwpO1xuICB9IGVsc2Uge1xuICAgIGNvbnNvbGUud2FybihgTm8gYWdlbnQgc2Vzc2lvbiBmb3VuZCBmb3IgJHtuYW1lfWApO1xuICB9XG59XG5mdW5jdGlvbiBydW5BZ2VudChuYW1lLCBjb250ZXh0LCBhcHBlbmRNZXNzYWdlLCBydW5DaGF0Q29tcGxldGlvbiwgaGludCkge1xuICByZXR1cm4gX19hc3luYyh0aGlzLCBudWxsLCBmdW5jdGlvbiogKCkge1xuICAgIHZhciBfYSwgX2I7XG4gICAgY29uc3QgeyBhZ2VudFNlc3Npb24sIHNldEFnZW50U2Vzc2lvbiB9ID0gY29udGV4dDtcbiAgICBpZiAoIWFnZW50U2Vzc2lvbiB8fCBhZ2VudFNlc3Npb24uYWdlbnROYW1lICE9PSBuYW1lKSB7XG4gICAgICBzZXRBZ2VudFNlc3Npb24oe1xuICAgICAgICBhZ2VudE5hbWU6IG5hbWVcbiAgICAgIH0pO1xuICAgIH1cbiAgICBsZXQgcHJldmlvdXNTdGF0ZSA9IG51bGw7XG4gICAgZm9yIChsZXQgaSA9IGNvbnRleHQubWVzc2FnZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjb250ZXh0Lm1lc3NhZ2VzW2ldO1xuICAgICAgaWYgKG1lc3NhZ2UuaXNBZ2VudFN0YXRlTWVzc2FnZSgpICYmIG1lc3NhZ2UuYWdlbnROYW1lID09PSBuYW1lKSB7XG4gICAgICAgIHByZXZpb3VzU3RhdGUgPSBtZXNzYWdlLnN0YXRlO1xuICAgICAgfVxuICAgIH1cbiAgICBsZXQgc3RhdGUgPSAoKF9iID0gKF9hID0gY29udGV4dC5jb2FnZW50U3RhdGVzUmVmLmN1cnJlbnQpID09IG51bGwgPyB2b2lkIDAgOiBfYVtuYW1lXSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9iLnN0YXRlKSB8fCB7fTtcbiAgICBpZiAoaGludCkge1xuICAgICAgY29uc3QgaGludE1lc3NhZ2UgPSBoaW50KHsgcHJldmlvdXNTdGF0ZSwgY3VycmVudFN0YXRlOiBzdGF0ZSB9KTtcbiAgICAgIGlmIChoaW50TWVzc2FnZSkge1xuICAgICAgICB5aWVsZCBhcHBlbmRNZXNzYWdlKGhpbnRNZXNzYWdlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHlpZWxkIHJ1bkNoYXRDb21wbGV0aW9uKCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHlpZWxkIHJ1bkNoYXRDb21wbGV0aW9uKCk7XG4gICAgfVxuICB9KTtcbn1cblxuZXhwb3J0IHtcbiAgdXNlQ29BZ2VudFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNodW5rLU8yMktHSE9RLm1qcy5tYXAiXSwibmFtZXMiOlsidXNlQ29waWxvdENoYXQiLCJ1c2VDb3BpbG90TWVzc2FnZXNDb250ZXh0IiwidXNlQ29waWxvdENvbnRleHQiLCJfX2FzeW5jIiwiX19zcHJlYWRQcm9wcyIsIl9fc3ByZWFkVmFsdWVzIiwidXNlRWZmZWN0IiwidXNlQ29BZ2VudCIsIm9wdGlvbnMiLCJpc0V4dGVybmFsU3RhdGVNYW5hZ2VtZW50Iiwib3B0aW9uczIiLCJuYW1lIiwiaXNJbnRlcm5hbFN0YXRlTWFuYWdlbWVudFdpdGhJbml0aWFsIiwiZ2VuZXJhbENvbnRleHQiLCJtZXNzYWdlc0NvbnRleHQiLCJjb250ZXh0IiwiY29hZ2VudFN0YXRlcyIsImNvYWdlbnRTdGF0ZXNSZWYiLCJzZXRDb2FnZW50U3RhdGVzV2l0aFJlZiIsImFwcGVuZE1lc3NhZ2UiLCJydW5DaGF0Q29tcGxldGlvbiIsImdldENvYWdlbnRTdGF0ZSIsImNvYWdlbnRTdGF0ZXMyIiwibmFtZTIiLCJzdGF0ZSIsImluaXRpYWxTdGF0ZSIsInJ1bm5pbmciLCJhY3RpdmUiLCJ0aHJlYWRJZCIsIm5vZGVOYW1lIiwicnVuSWQiLCJzZXRTdGF0ZSIsIm5ld1N0YXRlIiwiY29hZ2VudFN0YXRlMiIsImN1cnJlbnQiLCJ1cGRhdGVkU3RhdGUiLCJjb2FnZW50U3RhdGUiLCJKU09OIiwic3RyaW5naWZ5Iiwic3RhcnQiLCJzdGFydEFnZW50Iiwic3RvcCIsInN0b3BBZ2VudCIsInJ1biIsImhpbnQiLCJydW5BZ2VudCIsInNldEFnZW50U2Vzc2lvbiIsImFnZW50TmFtZSIsImFnZW50U2Vzc2lvbiIsImNvbnNvbGUiLCJ3YXJuIiwiX2EiLCJfYiIsInByZXZpb3VzU3RhdGUiLCJpIiwibWVzc2FnZXMiLCJsZW5ndGgiLCJtZXNzYWdlIiwiaXNBZ2VudFN0YXRlTWVzc2FnZSIsImhpbnRNZXNzYWdlIiwiY3VycmVudFN0YXRlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@copilotkit/react-core/dist/chunk-O22KGHOQ.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@copilotkit/react-core/dist/chunk-O7ARI5CV.mjs":
/*!*********************************************************************!*\
  !*** ./node_modules/@copilotkit/react-core/dist/chunk-O7ARI5CV.mjs ***!
  \*********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ExclamationMarkIcon: function() { return /* binding */ ExclamationMarkIcon; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-runtime.js\");\n// src/components/toast/exclamation-mark-icon.tsx\n\nvar ExclamationMarkIcon = (param)=>{\n    let { className, style } = param;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"svg\", {\n        xmlns: \"http://www.w3.org/2000/svg\",\n        width: \"24\",\n        height: \"24\",\n        viewBox: \"0 0 24 24\",\n        fill: \"none\",\n        stroke: \"currentColor\",\n        strokeWidth: \"2\",\n        strokeLinecap: \"round\",\n        strokeLinejoin: \"round\",\n        className: \"lucide lucide-circle-alert \".concat(className ? className : \"\"),\n        style,\n        children: [\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"circle\", {\n                cx: \"12\",\n                cy: \"12\",\n                r: \"10\"\n            }),\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"line\", {\n                x1: \"12\",\n                x2: \"12\",\n                y1: \"8\",\n                y2: \"12\"\n            }),\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"line\", {\n                x1: \"12\",\n                x2: \"12.01\",\n                y1: \"16\",\n                y2: \"16\"\n            })\n        ]\n    });\n};\n_c = ExclamationMarkIcon;\n //# sourceMappingURL=chunk-O7ARI5CV.mjs.map\nvar _c;\n$RefreshReg$(_c, \"ExclamationMarkIcon\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AY29waWxvdGtpdC9yZWFjdC1jb3JlL2Rpc3QvY2h1bmstTzdBUkk1Q1YubWpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsaURBQWlEO0FBQ0g7QUFDOUMsSUFBSUUsc0JBQXNCO1FBQUMsRUFDekJDLFNBQVMsRUFDVEMsS0FBSyxFQUNOO1dBQUssYUFBYSxHQUFHSCx1REFBSUEsQ0FDeEIsT0FDQTtRQUNFSSxPQUFPO1FBQ1BDLE9BQU87UUFDUEMsUUFBUTtRQUNSQyxTQUFTO1FBQ1RDLE1BQU07UUFDTkMsUUFBUTtRQUNSQyxhQUFhO1FBQ2JDLGVBQWU7UUFDZkMsZ0JBQWdCO1FBQ2hCVixXQUFXLDhCQUF5RCxPQUEzQkEsWUFBWUEsWUFBWTtRQUNqRUM7UUFDQVUsVUFBVTtZQUNSLGFBQWEsR0FBR2Qsc0RBQUdBLENBQUMsVUFBVTtnQkFBRWUsSUFBSTtnQkFBTUMsSUFBSTtnQkFBTUMsR0FBRztZQUFLO1lBQzVELGFBQWEsR0FBR2pCLHNEQUFHQSxDQUFDLFFBQVE7Z0JBQUVrQixJQUFJO2dCQUFNQyxJQUFJO2dCQUFNQyxJQUFJO2dCQUFLQyxJQUFJO1lBQUs7WUFDcEUsYUFBYSxHQUFHckIsc0RBQUdBLENBQUMsUUFBUTtnQkFBRWtCLElBQUk7Z0JBQU1DLElBQUk7Z0JBQVNDLElBQUk7Z0JBQU1DLElBQUk7WUFBSztTQUN6RTtJQUNIOztLQXRCRW5CO0FBMkJGLENBQ0YsMkNBQTJDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9AY29waWxvdGtpdC9yZWFjdC1jb3JlL2Rpc3QvY2h1bmstTzdBUkk1Q1YubWpzPzZlNzciXSwic291cmNlc0NvbnRlbnQiOlsiLy8gc3JjL2NvbXBvbmVudHMvdG9hc3QvZXhjbGFtYXRpb24tbWFyay1pY29uLnRzeFxuaW1wb3J0IHsganN4LCBqc3hzIH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG52YXIgRXhjbGFtYXRpb25NYXJrSWNvbiA9ICh7XG4gIGNsYXNzTmFtZSxcbiAgc3R5bGVcbn0pID0+IC8qIEBfX1BVUkVfXyAqLyBqc3hzKFxuICBcInN2Z1wiLFxuICB7XG4gICAgeG1sbnM6IFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIixcbiAgICB3aWR0aDogXCIyNFwiLFxuICAgIGhlaWdodDogXCIyNFwiLFxuICAgIHZpZXdCb3g6IFwiMCAwIDI0IDI0XCIsXG4gICAgZmlsbDogXCJub25lXCIsXG4gICAgc3Ryb2tlOiBcImN1cnJlbnRDb2xvclwiLFxuICAgIHN0cm9rZVdpZHRoOiBcIjJcIixcbiAgICBzdHJva2VMaW5lY2FwOiBcInJvdW5kXCIsXG4gICAgc3Ryb2tlTGluZWpvaW46IFwicm91bmRcIixcbiAgICBjbGFzc05hbWU6IGBsdWNpZGUgbHVjaWRlLWNpcmNsZS1hbGVydCAke2NsYXNzTmFtZSA/IGNsYXNzTmFtZSA6IFwiXCJ9YCxcbiAgICBzdHlsZSxcbiAgICBjaGlsZHJlbjogW1xuICAgICAgLyogQF9fUFVSRV9fICovIGpzeChcImNpcmNsZVwiLCB7IGN4OiBcIjEyXCIsIGN5OiBcIjEyXCIsIHI6IFwiMTBcIiB9KSxcbiAgICAgIC8qIEBfX1BVUkVfXyAqLyBqc3goXCJsaW5lXCIsIHsgeDE6IFwiMTJcIiwgeDI6IFwiMTJcIiwgeTE6IFwiOFwiLCB5MjogXCIxMlwiIH0pLFxuICAgICAgLyogQF9fUFVSRV9fICovIGpzeChcImxpbmVcIiwgeyB4MTogXCIxMlwiLCB4MjogXCIxMi4wMVwiLCB5MTogXCIxNlwiLCB5MjogXCIxNlwiIH0pXG4gICAgXVxuICB9XG4pO1xuXG5leHBvcnQge1xuICBFeGNsYW1hdGlvbk1hcmtJY29uXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2h1bmstTzdBUkk1Q1YubWpzLm1hcCJdLCJuYW1lcyI6WyJqc3giLCJqc3hzIiwiRXhjbGFtYXRpb25NYXJrSWNvbiIsImNsYXNzTmFtZSIsInN0eWxlIiwieG1sbnMiLCJ3aWR0aCIsImhlaWdodCIsInZpZXdCb3giLCJmaWxsIiwic3Ryb2tlIiwic3Ryb2tlV2lkdGgiLCJzdHJva2VMaW5lY2FwIiwic3Ryb2tlTGluZWpvaW4iLCJjaGlsZHJlbiIsImN4IiwiY3kiLCJyIiwieDEiLCJ4MiIsInkxIiwieTIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@copilotkit/react-core/dist/chunk-O7ARI5CV.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@copilotkit/react-core/dist/chunk-ODN4H66E.mjs":
/*!*********************************************************************!*\
  !*** ./node_modules/@copilotkit/react-core/dist/chunk-ODN4H66E.mjs ***!
  \*********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useCopilotRuntimeClient: function() { return /* binding */ useCopilotRuntimeClient; }\n/* harmony export */ });\n/* harmony import */ var _chunk_2KCEHGSI_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./chunk-2KCEHGSI.mjs */ \"(app-pages-browser)/./node_modules/@copilotkit/react-core/dist/chunk-2KCEHGSI.mjs\");\n/* harmony import */ var _chunk_SKC7AJIV_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./chunk-SKC7AJIV.mjs */ \"(app-pages-browser)/./node_modules/@copilotkit/react-core/dist/chunk-SKC7AJIV.mjs\");\n/* harmony import */ var _copilotkit_runtime_client_gql__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @copilotkit/runtime-client-gql */ \"(app-pages-browser)/./node_modules/@copilotkit/runtime-client-gql/dist/chunk-6IG33H2Z.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\nvar _s = $RefreshSig$();\n\n\n// src/hooks/use-copilot-runtime-client.ts\n\n\nvar useCopilotRuntimeClient = (options)=>{\n    _s();\n    const { addGraphQLErrorsToast } = (0,_chunk_2KCEHGSI_mjs__WEBPACK_IMPORTED_MODULE_1__.useToast)();\n    const runtimeClient = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{\n        return new _copilotkit_runtime_client_gql__WEBPACK_IMPORTED_MODULE_2__.CopilotRuntimeClient((0,_chunk_SKC7AJIV_mjs__WEBPACK_IMPORTED_MODULE_3__.__spreadProps)((0,_chunk_SKC7AJIV_mjs__WEBPACK_IMPORTED_MODULE_3__.__spreadValues)({}, options), {\n            handleGQLErrors: (error)=>{\n                if (error.graphQLErrors.length) {\n                    addGraphQLErrorsToast(error.graphQLErrors);\n                }\n            }\n        }));\n    }, [\n        options,\n        addGraphQLErrorsToast\n    ]);\n    return runtimeClient;\n};\n_s(useCopilotRuntimeClient, \"zTt5NKVfWM/b60ZHVvkmX1VaNtQ=\", false, function() {\n    return [\n        _chunk_2KCEHGSI_mjs__WEBPACK_IMPORTED_MODULE_1__.useToast\n    ];\n});\n //# sourceMappingURL=chunk-ODN4H66E.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AY29waWxvdGtpdC9yZWFjdC1jb3JlL2Rpc3QvY2h1bmstT0RONEg2NkUubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUU4QjtBQUlBO0FBRTlCLDBDQUEwQztBQUdGO0FBQ1I7QUFDaEMsSUFBSUssMEJBQTBCLENBQUNDOztJQUM3QixNQUFNLEVBQUVDLHFCQUFxQixFQUFFLEdBQUdQLDZEQUFRQTtJQUMxQyxNQUFNUSxnQkFBZ0JKLDhDQUFPQSxDQUFDO1FBQzVCLE9BQU8sSUFBSUQsZ0ZBQW9CQSxDQUFDRixrRUFBYUEsQ0FBQ0MsbUVBQWNBLENBQUMsQ0FBQyxHQUFHSSxVQUFVO1lBQ3pFRyxpQkFBaUIsQ0FBQ0M7Z0JBQ2hCLElBQUlBLE1BQU1DLGFBQWEsQ0FBQ0MsTUFBTSxFQUFFO29CQUM5Qkwsc0JBQXNCRyxNQUFNQyxhQUFhO2dCQUMzQztZQUNGO1FBQ0Y7SUFDRixHQUFHO1FBQUNMO1FBQVNDO0tBQXNCO0lBQ25DLE9BQU9DO0FBQ1Q7R0FaSUg7O1FBQ2dDTCx5REFBUUE7OztBQWUxQyxDQUNGLDJDQUEyQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQGNvcGlsb3RraXQvcmVhY3QtY29yZS9kaXN0L2NodW5rLU9ETjRINjZFLm1qcz9iNTJkIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIHVzZVRvYXN0XG59IGZyb20gXCIuL2NodW5rLTJLQ0VIR1NJLm1qc1wiO1xuaW1wb3J0IHtcbiAgX19zcHJlYWRQcm9wcyxcbiAgX19zcHJlYWRWYWx1ZXNcbn0gZnJvbSBcIi4vY2h1bmstU0tDN0FKSVYubWpzXCI7XG5cbi8vIHNyYy9ob29rcy91c2UtY29waWxvdC1ydW50aW1lLWNsaWVudC50c1xuaW1wb3J0IHtcbiAgQ29waWxvdFJ1bnRpbWVDbGllbnRcbn0gZnJvbSBcIkBjb3BpbG90a2l0L3J1bnRpbWUtY2xpZW50LWdxbFwiO1xuaW1wb3J0IHsgdXNlTWVtbyB9IGZyb20gXCJyZWFjdFwiO1xudmFyIHVzZUNvcGlsb3RSdW50aW1lQ2xpZW50ID0gKG9wdGlvbnMpID0+IHtcbiAgY29uc3QgeyBhZGRHcmFwaFFMRXJyb3JzVG9hc3QgfSA9IHVzZVRvYXN0KCk7XG4gIGNvbnN0IHJ1bnRpbWVDbGllbnQgPSB1c2VNZW1vKCgpID0+IHtcbiAgICByZXR1cm4gbmV3IENvcGlsb3RSdW50aW1lQ2xpZW50KF9fc3ByZWFkUHJvcHMoX19zcHJlYWRWYWx1ZXMoe30sIG9wdGlvbnMpLCB7XG4gICAgICBoYW5kbGVHUUxFcnJvcnM6IChlcnJvcikgPT4ge1xuICAgICAgICBpZiAoZXJyb3IuZ3JhcGhRTEVycm9ycy5sZW5ndGgpIHtcbiAgICAgICAgICBhZGRHcmFwaFFMRXJyb3JzVG9hc3QoZXJyb3IuZ3JhcGhRTEVycm9ycyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KSk7XG4gIH0sIFtvcHRpb25zLCBhZGRHcmFwaFFMRXJyb3JzVG9hc3RdKTtcbiAgcmV0dXJuIHJ1bnRpbWVDbGllbnQ7XG59O1xuXG5leHBvcnQge1xuICB1c2VDb3BpbG90UnVudGltZUNsaWVudFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNodW5rLU9ETjRINjZFLm1qcy5tYXAiXSwibmFtZXMiOlsidXNlVG9hc3QiLCJfX3NwcmVhZFByb3BzIiwiX19zcHJlYWRWYWx1ZXMiLCJDb3BpbG90UnVudGltZUNsaWVudCIsInVzZU1lbW8iLCJ1c2VDb3BpbG90UnVudGltZUNsaWVudCIsIm9wdGlvbnMiLCJhZGRHcmFwaFFMRXJyb3JzVG9hc3QiLCJydW50aW1lQ2xpZW50IiwiaGFuZGxlR1FMRXJyb3JzIiwiZXJyb3IiLCJncmFwaFFMRXJyb3JzIiwibGVuZ3RoIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@copilotkit/react-core/dist/chunk-ODN4H66E.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@copilotkit/react-core/dist/chunk-OT67R4NB.mjs":
/*!*********************************************************************!*\
  !*** ./node_modules/@copilotkit/react-core/dist/chunk-OT67R4NB.mjs ***!
  \*********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CopilotTask: function() { return /* binding */ CopilotTask; }\n/* harmony export */ });\n/* harmony import */ var _chunk_DHGXL5PC_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./chunk-DHGXL5PC.mjs */ \"(app-pages-browser)/./node_modules/@copilotkit/react-core/dist/chunk-DHGXL5PC.mjs\");\n/* harmony import */ var _chunk_SKC7AJIV_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunk-SKC7AJIV.mjs */ \"(app-pages-browser)/./node_modules/@copilotkit/react-core/dist/chunk-SKC7AJIV.mjs\");\n/* harmony import */ var _copilotkit_runtime_client_gql__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @copilotkit/runtime-client-gql */ \"(app-pages-browser)/./node_modules/@copilotkit/runtime-client-gql/dist/chunk-GD5NLJQE.mjs\");\n/* harmony import */ var _copilotkit_runtime_client_gql__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @copilotkit/runtime-client-gql */ \"(app-pages-browser)/./node_modules/@copilotkit/runtime-client-gql/dist/chunk-6IG33H2Z.mjs\");\n/* harmony import */ var _copilotkit_runtime_client_gql__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @copilotkit/runtime-client-gql */ \"(app-pages-browser)/./node_modules/@copilotkit/runtime-client-gql/dist/chunk-ZWVRRYBP.mjs\");\n/* harmony import */ var _copilotkit_runtime_client_gql__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @copilotkit/runtime-client-gql */ \"(app-pages-browser)/./node_modules/@copilotkit/runtime-client-gql/dist/chunk-OGFO6ZEP.mjs\");\n/* harmony import */ var _copilotkit_shared__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @copilotkit/shared */ \"(app-pages-browser)/./node_modules/@copilotkit/shared/dist/chunk-JP2M4U4G.mjs\");\n\n\n// src/lib/copilot-task.ts\n\n\nvar CopilotTask = class {\n    /**\n   * Run the task.\n   * @param context The CopilotContext to use for the task. Use `useCopilotContext` to obtain the current context.\n   * @param data The data to use for the task.\n   */ run(context, data) {\n        return (0,_chunk_SKC7AJIV_mjs__WEBPACK_IMPORTED_MODULE_0__.__async)(this, null, function*() {\n            var _a, _b;\n            const actions = this.includeCopilotActions ? Object.assign({}, context.actions) : {};\n            for (const fn of this.actions){\n                actions[fn.name] = fn;\n            }\n            let contextString = \"\";\n            if (data) {\n                contextString = (typeof data === \"string\" ? data : JSON.stringify(data)) + \"\\n\\n\";\n            }\n            if (this.includeCopilotReadable) {\n                contextString += context.getContextString([], _chunk_DHGXL5PC_mjs__WEBPACK_IMPORTED_MODULE_1__.defaultCopilotContextCategories);\n            }\n            const systemMessage = new _copilotkit_runtime_client_gql__WEBPACK_IMPORTED_MODULE_2__.TextMessage({\n                content: taskSystemMessage(contextString, this.instructions),\n                role: _copilotkit_runtime_client_gql__WEBPACK_IMPORTED_MODULE_2__.Role.System\n            });\n            const messages = [\n                systemMessage\n            ];\n            const runtimeClient = new _copilotkit_runtime_client_gql__WEBPACK_IMPORTED_MODULE_3__.CopilotRuntimeClient({\n                url: context.copilotApiConfig.chatApiEndpoint,\n                publicApiKey: context.copilotApiConfig.publicApiKey,\n                headers: context.copilotApiConfig.headers,\n                credentials: context.copilotApiConfig.credentials\n            });\n            const response = yield runtimeClient.generateCopilotResponse({\n                data: {\n                    frontend: {\n                        actions: Object.values(actions).map((action)=>({\n                                name: action.name,\n                                description: action.description || \"\",\n                                jsonSchema: JSON.stringify((0,_copilotkit_shared__WEBPACK_IMPORTED_MODULE_4__.actionParametersToJsonSchema)(action.parameters || []))\n                            })),\n                        url: window.location.href\n                    },\n                    messages: (0,_copilotkit_runtime_client_gql__WEBPACK_IMPORTED_MODULE_5__.convertMessagesToGqlInput)((0,_copilotkit_runtime_client_gql__WEBPACK_IMPORTED_MODULE_5__.filterAgentStateMessages)(messages)),\n                    metadata: {\n                        requestType: _copilotkit_runtime_client_gql__WEBPACK_IMPORTED_MODULE_6__.CopilotRequestType.Task\n                    },\n                    forwardedParameters: {\n                        toolChoice: \"required\"\n                    }\n                },\n                properties: context.copilotApiConfig.properties\n            }).toPromise();\n            const functionCallHandler = context.getFunctionCallHandler(actions);\n            const functionCalls = (0,_copilotkit_runtime_client_gql__WEBPACK_IMPORTED_MODULE_5__.convertGqlOutputToMessages)(((_b = (_a = response.data) == null ? void 0 : _a.generateCopilotResponse) == null ? void 0 : _b.messages) || []).filter((m)=>m.isActionExecutionMessage());\n            for (const functionCall of functionCalls){\n                yield functionCallHandler({\n                    messages,\n                    name: functionCall.name,\n                    args: functionCall.arguments\n                });\n            }\n        });\n    }\n    constructor(config){\n        this.instructions = config.instructions;\n        this.actions = config.actions || [];\n        this.includeCopilotReadable = config.includeCopilotReadable !== false;\n        this.includeCopilotActions = config.includeCopilotActions !== false;\n    }\n};\nfunction taskSystemMessage(contextString, instructions) {\n    return \"\\nPlease act as an efficient, competent, conscientious, and industrious professional assistant.\\n\\nHelp the user achieve their goals, and you do so in a way that is as efficient as possible, without unnecessary fluff, but also without sacrificing professionalism.\\nAlways be polite and respectful, and prefer brevity over verbosity.\\n\\nThe user has provided you with the following context:\\n```\\n\".concat(contextString, \"\\n```\\n\\nThey have also provided you with functions you can call to initiate actions on their behalf.\\n\\nPlease assist them as best you can.\\n\\nThis is not a conversation, so please do not ask questions. Just call a function without saying anything else.\\n\\nThe user has given you the following task to complete:\\n\\n```\\n\").concat(instructions, \"\\n```\\n\");\n}\n //# sourceMappingURL=chunk-OT67R4NB.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@copilotkit/react-core/dist/chunk-OT67R4NB.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@copilotkit/react-core/dist/chunk-SKC7AJIV.mjs":
/*!*********************************************************************!*\
  !*** ./node_modules/@copilotkit/react-core/dist/chunk-SKC7AJIV.mjs ***!
  \*********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   __async: function() { return /* binding */ __async; },\n/* harmony export */   __objRest: function() { return /* binding */ __objRest; },\n/* harmony export */   __restKey: function() { return /* binding */ __restKey; },\n/* harmony export */   __spreadProps: function() { return /* binding */ __spreadProps; },\n/* harmony export */   __spreadValues: function() { return /* binding */ __spreadValues; }\n/* harmony export */ });\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __spreadValues = (a, b)=>{\n    for(var prop in b || (b = {}))if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n    if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)){\n        if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n    }\n    return a;\n};\nvar __spreadProps = (a, b)=>__defProps(a, __getOwnPropDescs(b));\nvar __restKey = (key)=>typeof key === \"symbol\" ? key : key + \"\";\nvar __objRest = (source, exclude)=>{\n    var target = {};\n    for(var prop in source)if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0) target[prop] = source[prop];\n    if (source != null && __getOwnPropSymbols) for (var prop of __getOwnPropSymbols(source)){\n        if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop)) target[prop] = source[prop];\n    }\n    return target;\n};\nvar __async = (__this, __arguments, generator)=>{\n    return new Promise((resolve, reject)=>{\n        var fulfilled = (value)=>{\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        };\n        var rejected = (value)=>{\n            try {\n                step(generator.throw(value));\n            } catch (e) {\n                reject(e);\n            }\n        };\n        var step = (x)=>x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);\n        step((generator = generator.apply(__this, __arguments)).next());\n    });\n};\n //# sourceMappingURL=chunk-SKC7AJIV.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AY29waWxvdGtpdC9yZWFjdC1jb3JlL2Rpc3QvY2h1bmstU0tDN0FKSVYubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUEsSUFBSUEsWUFBWUMsT0FBT0MsY0FBYztBQUNyQyxJQUFJQyxhQUFhRixPQUFPRyxnQkFBZ0I7QUFDeEMsSUFBSUMsb0JBQW9CSixPQUFPSyx5QkFBeUI7QUFDeEQsSUFBSUMsc0JBQXNCTixPQUFPTyxxQkFBcUI7QUFDdEQsSUFBSUMsZUFBZVIsT0FBT1MsU0FBUyxDQUFDQyxjQUFjO0FBQ2xELElBQUlDLGVBQWVYLE9BQU9TLFNBQVMsQ0FBQ0csb0JBQW9CO0FBQ3hELElBQUlDLGtCQUFrQixDQUFDQyxLQUFLQyxLQUFLQyxRQUFVRCxPQUFPRCxNQUFNZixVQUFVZSxLQUFLQyxLQUFLO1FBQUVFLFlBQVk7UUFBTUMsY0FBYztRQUFNQyxVQUFVO1FBQU1IO0lBQU0sS0FBS0YsR0FBRyxDQUFDQyxJQUFJLEdBQUdDO0FBQzFKLElBQUlJLGlCQUFpQixDQUFDQyxHQUFHQztJQUN2QixJQUFLLElBQUlDLFFBQVFELEtBQU1BLENBQUFBLElBQUksQ0FBQyxHQUMxQixJQUFJZCxhQUFhZ0IsSUFBSSxDQUFDRixHQUFHQyxPQUN2QlYsZ0JBQWdCUSxHQUFHRSxNQUFNRCxDQUFDLENBQUNDLEtBQUs7SUFDcEMsSUFBSWpCLHFCQUNGLEtBQUssSUFBSWlCLFFBQVFqQixvQkFBb0JnQixHQUFJO1FBQ3ZDLElBQUlYLGFBQWFhLElBQUksQ0FBQ0YsR0FBR0MsT0FDdkJWLGdCQUFnQlEsR0FBR0UsTUFBTUQsQ0FBQyxDQUFDQyxLQUFLO0lBQ3BDO0lBQ0YsT0FBT0Y7QUFDVDtBQUNBLElBQUlJLGdCQUFnQixDQUFDSixHQUFHQyxJQUFNcEIsV0FBV21CLEdBQUdqQixrQkFBa0JrQjtBQUM5RCxJQUFJSSxZQUFZLENBQUNYLE1BQVEsT0FBT0EsUUFBUSxXQUFXQSxNQUFNQSxNQUFNO0FBQy9ELElBQUlZLFlBQVksQ0FBQ0MsUUFBUUM7SUFDdkIsSUFBSUMsU0FBUyxDQUFDO0lBQ2QsSUFBSyxJQUFJUCxRQUFRSyxPQUNmLElBQUlwQixhQUFhZ0IsSUFBSSxDQUFDSSxRQUFRTCxTQUFTTSxRQUFRRSxPQUFPLENBQUNSLFFBQVEsR0FDN0RPLE1BQU0sQ0FBQ1AsS0FBSyxHQUFHSyxNQUFNLENBQUNMLEtBQUs7SUFDL0IsSUFBSUssVUFBVSxRQUFRdEIscUJBQ3BCLEtBQUssSUFBSWlCLFFBQVFqQixvQkFBb0JzQixRQUFTO1FBQzVDLElBQUlDLFFBQVFFLE9BQU8sQ0FBQ1IsUUFBUSxLQUFLWixhQUFhYSxJQUFJLENBQUNJLFFBQVFMLE9BQ3pETyxNQUFNLENBQUNQLEtBQUssR0FBR0ssTUFBTSxDQUFDTCxLQUFLO0lBQy9CO0lBQ0YsT0FBT087QUFDVDtBQUNBLElBQUlFLFVBQVUsQ0FBQ0MsUUFBUUMsYUFBYUM7SUFDbEMsT0FBTyxJQUFJQyxRQUFRLENBQUNDLFNBQVNDO1FBQzNCLElBQUlDLFlBQVksQ0FBQ3ZCO1lBQ2YsSUFBSTtnQkFDRndCLEtBQUtMLFVBQVVNLElBQUksQ0FBQ3pCO1lBQ3RCLEVBQUUsT0FBTzBCLEdBQUc7Z0JBQ1ZKLE9BQU9JO1lBQ1Q7UUFDRjtRQUNBLElBQUlDLFdBQVcsQ0FBQzNCO1lBQ2QsSUFBSTtnQkFDRndCLEtBQUtMLFVBQVVTLEtBQUssQ0FBQzVCO1lBQ3ZCLEVBQUUsT0FBTzBCLEdBQUc7Z0JBQ1ZKLE9BQU9JO1lBQ1Q7UUFDRjtRQUNBLElBQUlGLE9BQU8sQ0FBQ0ssSUFBTUEsRUFBRUMsSUFBSSxHQUFHVCxRQUFRUSxFQUFFN0IsS0FBSyxJQUFJb0IsUUFBUUMsT0FBTyxDQUFDUSxFQUFFN0IsS0FBSyxFQUFFK0IsSUFBSSxDQUFDUixXQUFXSTtRQUN2RkgsS0FBSyxDQUFDTCxZQUFZQSxVQUFVYSxLQUFLLENBQUNmLFFBQVFDLFlBQVcsRUFBR08sSUFBSTtJQUM5RDtBQUNGO0FBUUUsQ0FDRiwyQ0FBMkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0Bjb3BpbG90a2l0L3JlYWN0LWNvcmUvZGlzdC9jaHVuay1TS0M3QUpJVi5tanM/N2Q3MCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIF9fZGVmUHJvcHMgPSBPYmplY3QuZGVmaW5lUHJvcGVydGllcztcbnZhciBfX2dldE93blByb3BEZXNjcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzO1xudmFyIF9fZ2V0T3duUHJvcFN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xudmFyIF9faGFzT3duUHJvcCA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgX19wcm9wSXNFbnVtID0gT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcbnZhciBfX2RlZk5vcm1hbFByb3AgPSAob2JqLCBrZXksIHZhbHVlKSA9PiBrZXkgaW4gb2JqID8gX19kZWZQcm9wKG9iaiwga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUsIHZhbHVlIH0pIDogb2JqW2tleV0gPSB2YWx1ZTtcbnZhciBfX3NwcmVhZFZhbHVlcyA9IChhLCBiKSA9PiB7XG4gIGZvciAodmFyIHByb3AgaW4gYiB8fCAoYiA9IHt9KSlcbiAgICBpZiAoX19oYXNPd25Qcm9wLmNhbGwoYiwgcHJvcCkpXG4gICAgICBfX2RlZk5vcm1hbFByb3AoYSwgcHJvcCwgYltwcm9wXSk7XG4gIGlmIChfX2dldE93blByb3BTeW1ib2xzKVxuICAgIGZvciAodmFyIHByb3Agb2YgX19nZXRPd25Qcm9wU3ltYm9scyhiKSkge1xuICAgICAgaWYgKF9fcHJvcElzRW51bS5jYWxsKGIsIHByb3ApKVxuICAgICAgICBfX2RlZk5vcm1hbFByb3AoYSwgcHJvcCwgYltwcm9wXSk7XG4gICAgfVxuICByZXR1cm4gYTtcbn07XG52YXIgX19zcHJlYWRQcm9wcyA9IChhLCBiKSA9PiBfX2RlZlByb3BzKGEsIF9fZ2V0T3duUHJvcERlc2NzKGIpKTtcbnZhciBfX3Jlc3RLZXkgPSAoa2V5KSA9PiB0eXBlb2Yga2V5ID09PSBcInN5bWJvbFwiID8ga2V5IDoga2V5ICsgXCJcIjtcbnZhciBfX29ialJlc3QgPSAoc291cmNlLCBleGNsdWRlKSA9PiB7XG4gIHZhciB0YXJnZXQgPSB7fTtcbiAgZm9yICh2YXIgcHJvcCBpbiBzb3VyY2UpXG4gICAgaWYgKF9faGFzT3duUHJvcC5jYWxsKHNvdXJjZSwgcHJvcCkgJiYgZXhjbHVkZS5pbmRleE9mKHByb3ApIDwgMClcbiAgICAgIHRhcmdldFtwcm9wXSA9IHNvdXJjZVtwcm9wXTtcbiAgaWYgKHNvdXJjZSAhPSBudWxsICYmIF9fZ2V0T3duUHJvcFN5bWJvbHMpXG4gICAgZm9yICh2YXIgcHJvcCBvZiBfX2dldE93blByb3BTeW1ib2xzKHNvdXJjZSkpIHtcbiAgICAgIGlmIChleGNsdWRlLmluZGV4T2YocHJvcCkgPCAwICYmIF9fcHJvcElzRW51bS5jYWxsKHNvdXJjZSwgcHJvcCkpXG4gICAgICAgIHRhcmdldFtwcm9wXSA9IHNvdXJjZVtwcm9wXTtcbiAgICB9XG4gIHJldHVybiB0YXJnZXQ7XG59O1xudmFyIF9fYXN5bmMgPSAoX190aGlzLCBfX2FyZ3VtZW50cywgZ2VuZXJhdG9yKSA9PiB7XG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgdmFyIGZ1bGZpbGxlZCA9ICh2YWx1ZSkgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICByZWplY3QoZSk7XG4gICAgICB9XG4gICAgfTtcbiAgICB2YXIgcmVqZWN0ZWQgPSAodmFsdWUpID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHN0ZXAoZ2VuZXJhdG9yLnRocm93KHZhbHVlKSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJlamVjdChlKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHZhciBzdGVwID0gKHgpID0+IHguZG9uZSA/IHJlc29sdmUoeC52YWx1ZSkgOiBQcm9taXNlLnJlc29sdmUoeC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTtcbiAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkoX190aGlzLCBfX2FyZ3VtZW50cykpLm5leHQoKSk7XG4gIH0pO1xufTtcblxuZXhwb3J0IHtcbiAgX19zcHJlYWRWYWx1ZXMsXG4gIF9fc3ByZWFkUHJvcHMsXG4gIF9fcmVzdEtleSxcbiAgX19vYmpSZXN0LFxuICBfX2FzeW5jXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2h1bmstU0tDN0FKSVYubWpzLm1hcCJdLCJuYW1lcyI6WyJfX2RlZlByb3AiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsIl9fZGVmUHJvcHMiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiX19nZXRPd25Qcm9wRGVzY3MiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzIiwiX19nZXRPd25Qcm9wU3ltYm9scyIsImdldE93blByb3BlcnR5U3ltYm9scyIsIl9faGFzT3duUHJvcCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiX19wcm9wSXNFbnVtIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJfX2RlZk5vcm1hbFByb3AiLCJvYmoiLCJrZXkiLCJ2YWx1ZSIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsIl9fc3ByZWFkVmFsdWVzIiwiYSIsImIiLCJwcm9wIiwiY2FsbCIsIl9fc3ByZWFkUHJvcHMiLCJfX3Jlc3RLZXkiLCJfX29ialJlc3QiLCJzb3VyY2UiLCJleGNsdWRlIiwidGFyZ2V0IiwiaW5kZXhPZiIsIl9fYXN5bmMiLCJfX3RoaXMiLCJfX2FyZ3VtZW50cyIsImdlbmVyYXRvciIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiZnVsZmlsbGVkIiwic3RlcCIsIm5leHQiLCJlIiwicmVqZWN0ZWQiLCJ0aHJvdyIsIngiLCJkb25lIiwidGhlbiIsImFwcGx5Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@copilotkit/react-core/dist/chunk-SKC7AJIV.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@copilotkit/react-core/dist/chunk-UOVONDR6.mjs":
/*!*********************************************************************!*\
  !*** ./node_modules/@copilotkit/react-core/dist/chunk-UOVONDR6.mjs ***!
  \*********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useMakeCopilotDocumentReadable: function() { return /* binding */ useMakeCopilotDocumentReadable; }\n/* harmony export */ });\n/* harmony import */ var _chunk_XQFVXX6R_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./chunk-XQFVXX6R.mjs */ \"(app-pages-browser)/./node_modules/@copilotkit/react-core/dist/chunk-XQFVXX6R.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\nvar _s = $RefreshSig$();\n\n// src/hooks/use-make-copilot-document-readable.ts\n\nfunction useMakeCopilotDocumentReadable(document, categories) {\n    let dependencies = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : [];\n    _s();\n    const { addDocumentContext, removeDocumentContext } = (0,_chunk_XQFVXX6R_mjs__WEBPACK_IMPORTED_MODULE_1__.useCopilotContext)();\n    const idRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)();\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        const id = addDocumentContext(document, categories);\n        idRef.current = id;\n        return ()=>{\n            removeDocumentContext(id);\n        };\n    }, [\n        addDocumentContext,\n        removeDocumentContext,\n        ...dependencies\n    ]);\n    return idRef.current;\n}\n_s(useMakeCopilotDocumentReadable, \"PxLDlMFQ+bbFFnUQIVgvXe5VhB4=\", false, function() {\n    return [\n        _chunk_XQFVXX6R_mjs__WEBPACK_IMPORTED_MODULE_1__.useCopilotContext\n    ];\n});\n //# sourceMappingURL=chunk-UOVONDR6.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AY29waWxvdGtpdC9yZWFjdC1jb3JlL2Rpc3QvY2h1bmstVU9WT05EUjYubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFFOEI7QUFFOUIsa0RBQWtEO0FBQ1I7QUFDMUMsU0FBU0csK0JBQStCQyxRQUFRLEVBQUVDLFVBQVU7UUFBRUMsZUFBQUEsaUVBQWUsRUFBRTs7SUFDN0UsTUFBTSxFQUFFQyxrQkFBa0IsRUFBRUMscUJBQXFCLEVBQUUsR0FBR1Isc0VBQWlCQTtJQUN2RSxNQUFNUyxRQUFRUCw2Q0FBTUE7SUFDcEJELGdEQUFTQSxDQUFDO1FBQ1IsTUFBTVMsS0FBS0gsbUJBQW1CSCxVQUFVQztRQUN4Q0ksTUFBTUUsT0FBTyxHQUFHRDtRQUNoQixPQUFPO1lBQ0xGLHNCQUFzQkU7UUFDeEI7SUFDRixHQUFHO1FBQUNIO1FBQW9CQztXQUEwQkY7S0FBYTtJQUMvRCxPQUFPRyxNQUFNRSxPQUFPO0FBQ3RCO0dBWFNSOztRQUMrQ0gsa0VBQWlCQTs7O0FBY3ZFLENBQ0YsMkNBQTJDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9AY29waWxvdGtpdC9yZWFjdC1jb3JlL2Rpc3QvY2h1bmstVU9WT05EUjYubWpzPzA3OGYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgdXNlQ29waWxvdENvbnRleHRcbn0gZnJvbSBcIi4vY2h1bmstWFFGVlhYNlIubWpzXCI7XG5cbi8vIHNyYy9ob29rcy91c2UtbWFrZS1jb3BpbG90LWRvY3VtZW50LXJlYWRhYmxlLnRzXG5pbXBvcnQgeyB1c2VFZmZlY3QsIHVzZVJlZiB9IGZyb20gXCJyZWFjdFwiO1xuZnVuY3Rpb24gdXNlTWFrZUNvcGlsb3REb2N1bWVudFJlYWRhYmxlKGRvY3VtZW50LCBjYXRlZ29yaWVzLCBkZXBlbmRlbmNpZXMgPSBbXSkge1xuICBjb25zdCB7IGFkZERvY3VtZW50Q29udGV4dCwgcmVtb3ZlRG9jdW1lbnRDb250ZXh0IH0gPSB1c2VDb3BpbG90Q29udGV4dCgpO1xuICBjb25zdCBpZFJlZiA9IHVzZVJlZigpO1xuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGNvbnN0IGlkID0gYWRkRG9jdW1lbnRDb250ZXh0KGRvY3VtZW50LCBjYXRlZ29yaWVzKTtcbiAgICBpZFJlZi5jdXJyZW50ID0gaWQ7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIHJlbW92ZURvY3VtZW50Q29udGV4dChpZCk7XG4gICAgfTtcbiAgfSwgW2FkZERvY3VtZW50Q29udGV4dCwgcmVtb3ZlRG9jdW1lbnRDb250ZXh0LCAuLi5kZXBlbmRlbmNpZXNdKTtcbiAgcmV0dXJuIGlkUmVmLmN1cnJlbnQ7XG59XG5cbmV4cG9ydCB7XG4gIHVzZU1ha2VDb3BpbG90RG9jdW1lbnRSZWFkYWJsZVxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNodW5rLVVPVk9ORFI2Lm1qcy5tYXAiXSwibmFtZXMiOlsidXNlQ29waWxvdENvbnRleHQiLCJ1c2VFZmZlY3QiLCJ1c2VSZWYiLCJ1c2VNYWtlQ29waWxvdERvY3VtZW50UmVhZGFibGUiLCJkb2N1bWVudCIsImNhdGVnb3JpZXMiLCJkZXBlbmRlbmNpZXMiLCJhZGREb2N1bWVudENvbnRleHQiLCJyZW1vdmVEb2N1bWVudENvbnRleHQiLCJpZFJlZiIsImlkIiwiY3VycmVudCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@copilotkit/react-core/dist/chunk-UOVONDR6.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@copilotkit/react-core/dist/chunk-XBVKTDXP.mjs":
/*!*********************************************************************!*\
  !*** ./node_modules/@copilotkit/react-core/dist/chunk-XBVKTDXP.mjs ***!
  \*********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   defaultSystemMessage: function() { return /* binding */ defaultSystemMessage; },\n/* harmony export */   useCopilotChat: function() { return /* binding */ useCopilotChat; }\n/* harmony export */ });\n/* harmony import */ var _chunk_DHGXL5PC_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./chunk-DHGXL5PC.mjs */ \"(app-pages-browser)/./node_modules/@copilotkit/react-core/dist/chunk-DHGXL5PC.mjs\");\n/* harmony import */ var _chunk_DCTJZ742_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./chunk-DCTJZ742.mjs */ \"(app-pages-browser)/./node_modules/@copilotkit/react-core/dist/chunk-DCTJZ742.mjs\");\n/* harmony import */ var _chunk_EUIBVFV6_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./chunk-EUIBVFV6.mjs */ \"(app-pages-browser)/./node_modules/@copilotkit/react-core/dist/chunk-EUIBVFV6.mjs\");\n/* harmony import */ var _chunk_XQFVXX6R_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./chunk-XQFVXX6R.mjs */ \"(app-pages-browser)/./node_modules/@copilotkit/react-core/dist/chunk-XQFVXX6R.mjs\");\n/* harmony import */ var _chunk_SKC7AJIV_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./chunk-SKC7AJIV.mjs */ \"(app-pages-browser)/./node_modules/@copilotkit/react-core/dist/chunk-SKC7AJIV.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var _copilotkit_runtime_client_gql__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @copilotkit/runtime-client-gql */ \"(app-pages-browser)/./node_modules/@copilotkit/runtime-client-gql/dist/chunk-GD5NLJQE.mjs\");\nvar _s = $RefreshSig$(), _s1 = $RefreshSig$();\n\n\n\n\n\n// src/hooks/use-copilot-chat.ts\n\n\nfunction useCopilotChat() {\n    let _a = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n    _s();\n    var _b = _a, { makeSystemMessage } = _b, options = (0,_chunk_SKC7AJIV_mjs__WEBPACK_IMPORTED_MODULE_1__.__objRest)(_b, [\n        \"makeSystemMessage\"\n    ]);\n    const { getContextString, getFunctionCallHandler, copilotApiConfig, isLoading, setIsLoading, chatInstructions, actions, coagentStatesRef, setCoagentStatesWithRef, coAgentStateRenders, agentSession, setAgentSession } = (0,_chunk_XQFVXX6R_mjs__WEBPACK_IMPORTED_MODULE_2__.useCopilotContext)();\n    const { messages, setMessages } = (0,_chunk_DCTJZ742_mjs__WEBPACK_IMPORTED_MODULE_3__.useCopilotMessagesContext)();\n    const latestGetContextString = useUpdatedRef(getContextString);\n    const deleteMessage = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((messageId)=>{\n        setMessages((prev)=>prev.filter((message)=>message.id !== messageId));\n    }, [\n        setMessages\n    ]);\n    const makeSystemMessageCallback = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        const systemMessageMaker = makeSystemMessage || defaultSystemMessage;\n        const contextString = latestGetContextString.current([], _chunk_DHGXL5PC_mjs__WEBPACK_IMPORTED_MODULE_4__.defaultCopilotContextCategories);\n        return new _copilotkit_runtime_client_gql__WEBPACK_IMPORTED_MODULE_5__.TextMessage({\n            content: systemMessageMaker(contextString, chatInstructions),\n            role: _copilotkit_runtime_client_gql__WEBPACK_IMPORTED_MODULE_5__.Role.System\n        });\n    }, [\n        getContextString,\n        makeSystemMessage,\n        chatInstructions\n    ]);\n    const onCoAgentStateRender = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((args)=>(0,_chunk_SKC7AJIV_mjs__WEBPACK_IMPORTED_MODULE_1__.__async)(this, null, function*() {\n            var _a2;\n            const { name, nodeName, state } = args;\n            let action = Object.values(coAgentStateRenders).find((action2)=>action2.name === name && action2.nodeName === nodeName);\n            if (!action) {\n                action = Object.values(coAgentStateRenders).find((action2)=>action2.name === name && !action2.nodeName);\n            }\n            if (action) {\n                yield (_a2 = action.handler) == null ? void 0 : _a2.call(action, {\n                    state,\n                    nodeName\n                });\n            }\n        }), [\n        coAgentStateRenders\n    ]);\n    const { append, reload, stop, runChatCompletion } = (0,_chunk_EUIBVFV6_mjs__WEBPACK_IMPORTED_MODULE_6__.useChat)((0,_chunk_SKC7AJIV_mjs__WEBPACK_IMPORTED_MODULE_1__.__spreadProps)((0,_chunk_SKC7AJIV_mjs__WEBPACK_IMPORTED_MODULE_1__.__spreadValues)({}, options), {\n        actions: Object.values(actions),\n        copilotConfig: copilotApiConfig,\n        initialMessages: options.initialMessages || [],\n        onFunctionCall: getFunctionCallHandler(),\n        onCoAgentStateRender,\n        messages,\n        setMessages,\n        makeSystemMessageCallback,\n        isLoading,\n        setIsLoading,\n        coagentStatesRef,\n        setCoagentStatesWithRef,\n        agentSession,\n        setAgentSession\n    }));\n    const latestAppend = useUpdatedRef(append);\n    const latestAppendFunc = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((message)=>{\n        return latestAppend.current(message);\n    }, [\n        latestAppend\n    ]);\n    const latestReload = useUpdatedRef(reload);\n    const latestReloadFunc = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        return latestReload.current();\n    }, [\n        latestReload\n    ]);\n    const latestStop = useUpdatedRef(stop);\n    const latestStopFunc = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        return latestStop.current();\n    }, [\n        latestStop\n    ]);\n    const latestDelete = useUpdatedRef(deleteMessage);\n    const latestDeleteFunc = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((messageId)=>{\n        return latestDelete.current(messageId);\n    }, [\n        latestDelete\n    ]);\n    const latestSetMessages = useUpdatedRef(setMessages);\n    const latestSetMessagesFunc = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((messages2)=>{\n        return latestSetMessages.current(messages2);\n    }, [\n        latestSetMessages\n    ]);\n    const latestRunChatCompletion = useUpdatedRef(runChatCompletion);\n    const latestRunChatCompletionFunc = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        return latestRunChatCompletion.current();\n    }, [\n        latestRunChatCompletion\n    ]);\n    return {\n        visibleMessages: messages,\n        appendMessage: latestAppendFunc,\n        setMessages: latestSetMessagesFunc,\n        reloadMessages: latestReloadFunc,\n        stopGeneration: latestStopFunc,\n        deleteMessage: latestDeleteFunc,\n        runChatCompletion: latestRunChatCompletionFunc,\n        isLoading\n    };\n}\n_s(useCopilotChat, \"VCYUsD/iqLBMZ4cCT0Bvzpy5WHM=\", false, function() {\n    return [\n        _chunk_XQFVXX6R_mjs__WEBPACK_IMPORTED_MODULE_2__.useCopilotContext,\n        _chunk_DCTJZ742_mjs__WEBPACK_IMPORTED_MODULE_3__.useCopilotMessagesContext,\n        useUpdatedRef,\n        _chunk_EUIBVFV6_mjs__WEBPACK_IMPORTED_MODULE_6__.useChat,\n        useUpdatedRef,\n        useUpdatedRef,\n        useUpdatedRef,\n        useUpdatedRef,\n        useUpdatedRef,\n        useUpdatedRef\n    ];\n});\nfunction useUpdatedRef(value) {\n    _s1();\n    const ref = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(value);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        ref.current = value;\n    }, [\n        value\n    ]);\n    return ref;\n}\n_s1(useUpdatedRef, \"8uVE59eA/r6b92xF80p7sH8rXLk=\");\nfunction defaultSystemMessage(contextString, additionalInstructions) {\n    return \"\\nPlease act as an efficient, competent, conscientious, and industrious professional assistant.\\n\\nHelp the user achieve their goals, and you do so in a way that is as efficient as possible, without unnecessary fluff, but also without sacrificing professionalism.\\nAlways be polite and respectful, and prefer brevity over verbosity.\\n\\nThe user has provided you with the following context:\\n```\\n\".concat(contextString, \"\\n```\\n\\nThey have also provided you with functions you can call to initiate actions on their behalf, or functions you can call to receive more information.\\n\\nPlease assist them as best you can.\\n\\nYou can ask them for clarifying questions if needed, but don't be annoying about it. If you can reasonably 'fill in the blanks' yourself, do so.\\n\\nIf you would like to call a function, call it without saying anything else.\\n\") + (additionalInstructions ? \"\\n\\n\".concat(additionalInstructions) : \"\");\n}\n //# sourceMappingURL=chunk-XBVKTDXP.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@copilotkit/react-core/dist/chunk-XBVKTDXP.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@copilotkit/react-core/dist/chunk-XQFVXX6R.mjs":
/*!*********************************************************************!*\
  !*** ./node_modules/@copilotkit/react-core/dist/chunk-XQFVXX6R.mjs ***!
  \*********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CopilotContext: function() { return /* binding */ CopilotContext; },\n/* harmony export */   useCopilotContext: function() { return /* binding */ useCopilotContext; }\n/* harmony export */ });\n/* harmony import */ var _chunk_SKC7AJIV_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./chunk-SKC7AJIV.mjs */ \"(app-pages-browser)/./node_modules/@copilotkit/react-core/dist/chunk-SKC7AJIV.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\nvar _s = $RefreshSig$();\n\n// src/context/copilot-context.tsx\n\nvar emptyCopilotContext = {\n    actions: {},\n    setAction: ()=>{},\n    removeAction: ()=>{},\n    coAgentStateRenders: {},\n    setCoAgentStateRender: ()=>{},\n    removeCoAgentStateRender: ()=>{},\n    chatComponentsCache: {\n        current: {\n            actions: {},\n            coAgentStateRenders: {}\n        }\n    },\n    getContextString: (documents, categories)=>returnAndThrowInDebug(\"\"),\n    addContext: ()=>\"\",\n    removeContext: ()=>{},\n    getFunctionCallHandler: ()=>returnAndThrowInDebug(()=>(0,_chunk_SKC7AJIV_mjs__WEBPACK_IMPORTED_MODULE_1__.__async)(void 0, null, function*() {})),\n    isLoading: false,\n    setIsLoading: ()=>returnAndThrowInDebug(false),\n    chatInstructions: \"\",\n    setChatInstructions: ()=>returnAndThrowInDebug(\"\"),\n    getDocumentsContext: (categories)=>returnAndThrowInDebug([]),\n    addDocumentContext: ()=>returnAndThrowInDebug(\"\"),\n    removeDocumentContext: ()=>{},\n    runtimeClient: {},\n    copilotApiConfig: new class {\n        get chatApiEndpoint() {\n            throw new Error(\"Remember to wrap your app in a `<CopilotKit> {...} </CopilotKit>` !!!\");\n        }\n        get headers() {\n            return {};\n        }\n        get body() {\n            return {};\n        }\n    }(),\n    chatSuggestionConfiguration: {},\n    addChatSuggestionConfiguration: ()=>{},\n    removeChatSuggestionConfiguration: ()=>{},\n    showDevConsole: \"auto\",\n    coagentStates: {},\n    setCoagentStates: ()=>{},\n    coagentStatesRef: {\n        current: {}\n    },\n    setCoagentStatesWithRef: ()=>{},\n    agentSession: null,\n    setAgentSession: ()=>{}\n};\nvar CopilotContext = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createContext(emptyCopilotContext);\nfunction useCopilotContext() {\n    _s();\n    const context = react__WEBPACK_IMPORTED_MODULE_0__.useContext(CopilotContext);\n    if (context === emptyCopilotContext) {\n        throw new Error(\"Remember to wrap your app in a `<CopilotKit> {...} </CopilotKit>` !!!\");\n    }\n    return context;\n}\n_s(useCopilotContext, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nfunction returnAndThrowInDebug(value) {\n    throw new Error(\"Remember to wrap your app in a `<CopilotKit> {...} </CopilotKit>` !!!\");\n    return value;\n}\n //# sourceMappingURL=chunk-XQFVXX6R.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AY29waWxvdGtpdC9yZWFjdC1jb3JlL2Rpc3QvY2h1bmstWFFGVlhYNlIubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBRThCO0FBRTlCLGtDQUFrQztBQUNSO0FBQzFCLElBQUlFLHNCQUFzQjtJQUN4QkMsU0FBUyxDQUFDO0lBQ1ZDLFdBQVcsS0FDWDtJQUNBQyxjQUFjLEtBQ2Q7SUFDQUMscUJBQXFCLENBQUM7SUFDdEJDLHVCQUF1QixLQUN2QjtJQUNBQywwQkFBMEIsS0FDMUI7SUFDQUMscUJBQXFCO1FBQUVDLFNBQVM7WUFBRVAsU0FBUyxDQUFDO1lBQUdHLHFCQUFxQixDQUFDO1FBQUU7SUFBRTtJQUN6RUssa0JBQWtCLENBQUNDLFdBQVdDLGFBQWVDLHNCQUFzQjtJQUNuRUMsWUFBWSxJQUFNO0lBQ2xCQyxlQUFlLEtBQ2Y7SUFDQUMsd0JBQXdCLElBQU1ILHNCQUFzQixJQUFNZCw0REFBT0EsQ0FBQyxLQUFLLEdBQUcsTUFBTSxhQUNoRjtJQUNBa0IsV0FBVztJQUNYQyxjQUFjLElBQU1MLHNCQUFzQjtJQUMxQ00sa0JBQWtCO0lBQ2xCQyxxQkFBcUIsSUFBTVAsc0JBQXNCO0lBQ2pEUSxxQkFBcUIsQ0FBQ1QsYUFBZUMsc0JBQXNCLEVBQUU7SUFDN0RTLG9CQUFvQixJQUFNVCxzQkFBc0I7SUFDaERVLHVCQUF1QixLQUN2QjtJQUNBQyxlQUFlLENBQUM7SUFDaEJDLGtCQUFrQixJQUFJO1FBQ3BCLElBQUlDLGtCQUFrQjtZQUNwQixNQUFNLElBQUlDLE1BQU07UUFDbEI7UUFDQSxJQUFJQyxVQUFVO1lBQ1osT0FBTyxDQUFDO1FBQ1Y7UUFDQSxJQUFJQyxPQUFPO1lBQ1QsT0FBTyxDQUFDO1FBQ1Y7SUFDRjtJQUNBQyw2QkFBNkIsQ0FBQztJQUM5QkMsZ0NBQWdDLEtBQ2hDO0lBQ0FDLG1DQUFtQyxLQUNuQztJQUNBQyxnQkFBZ0I7SUFDaEJDLGVBQWUsQ0FBQztJQUNoQkMsa0JBQWtCLEtBQ2xCO0lBQ0FDLGtCQUFrQjtRQUFFM0IsU0FBUyxDQUFDO0lBQUU7SUFDaEM0Qix5QkFBeUIsS0FDekI7SUFDQUMsY0FBYztJQUNkQyxpQkFBaUIsS0FDakI7QUFDRjtBQUNBLElBQUlDLCtCQUFpQnhDLGdEQUFtQixDQUFDQztBQUN6QyxTQUFTeUM7O0lBQ1AsTUFBTUMsVUFBVTNDLDZDQUFnQixDQUFDd0M7SUFDakMsSUFBSUcsWUFBWTFDLHFCQUFxQjtRQUNuQyxNQUFNLElBQUkwQixNQUFNO0lBQ2xCO0lBQ0EsT0FBT2dCO0FBQ1Q7R0FOU0Q7QUFPVCxTQUFTN0Isc0JBQXNCZ0MsS0FBSztJQUNsQyxNQUFNLElBQUlsQixNQUFNO0lBQ2hCLE9BQU9rQjtBQUNUO0FBS0UsQ0FDRiwyQ0FBMkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0Bjb3BpbG90a2l0L3JlYWN0LWNvcmUvZGlzdC9jaHVuay1YUUZWWFg2Ui5tanM/ZTRjMSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBfX2FzeW5jXG59IGZyb20gXCIuL2NodW5rLVNLQzdBSklWLm1qc1wiO1xuXG4vLyBzcmMvY29udGV4dC9jb3BpbG90LWNvbnRleHQudHN4XG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG52YXIgZW1wdHlDb3BpbG90Q29udGV4dCA9IHtcbiAgYWN0aW9uczoge30sXG4gIHNldEFjdGlvbjogKCkgPT4ge1xuICB9LFxuICByZW1vdmVBY3Rpb246ICgpID0+IHtcbiAgfSxcbiAgY29BZ2VudFN0YXRlUmVuZGVyczoge30sXG4gIHNldENvQWdlbnRTdGF0ZVJlbmRlcjogKCkgPT4ge1xuICB9LFxuICByZW1vdmVDb0FnZW50U3RhdGVSZW5kZXI6ICgpID0+IHtcbiAgfSxcbiAgY2hhdENvbXBvbmVudHNDYWNoZTogeyBjdXJyZW50OiB7IGFjdGlvbnM6IHt9LCBjb0FnZW50U3RhdGVSZW5kZXJzOiB7fSB9IH0sXG4gIGdldENvbnRleHRTdHJpbmc6IChkb2N1bWVudHMsIGNhdGVnb3JpZXMpID0+IHJldHVybkFuZFRocm93SW5EZWJ1ZyhcIlwiKSxcbiAgYWRkQ29udGV4dDogKCkgPT4gXCJcIixcbiAgcmVtb3ZlQ29udGV4dDogKCkgPT4ge1xuICB9LFxuICBnZXRGdW5jdGlvbkNhbGxIYW5kbGVyOiAoKSA9PiByZXR1cm5BbmRUaHJvd0luRGVidWcoKCkgPT4gX19hc3luYyh2b2lkIDAsIG51bGwsIGZ1bmN0aW9uKiAoKSB7XG4gIH0pKSxcbiAgaXNMb2FkaW5nOiBmYWxzZSxcbiAgc2V0SXNMb2FkaW5nOiAoKSA9PiByZXR1cm5BbmRUaHJvd0luRGVidWcoZmFsc2UpLFxuICBjaGF0SW5zdHJ1Y3Rpb25zOiBcIlwiLFxuICBzZXRDaGF0SW5zdHJ1Y3Rpb25zOiAoKSA9PiByZXR1cm5BbmRUaHJvd0luRGVidWcoXCJcIiksXG4gIGdldERvY3VtZW50c0NvbnRleHQ6IChjYXRlZ29yaWVzKSA9PiByZXR1cm5BbmRUaHJvd0luRGVidWcoW10pLFxuICBhZGREb2N1bWVudENvbnRleHQ6ICgpID0+IHJldHVybkFuZFRocm93SW5EZWJ1ZyhcIlwiKSxcbiAgcmVtb3ZlRG9jdW1lbnRDb250ZXh0OiAoKSA9PiB7XG4gIH0sXG4gIHJ1bnRpbWVDbGllbnQ6IHt9LFxuICBjb3BpbG90QXBpQ29uZmlnOiBuZXcgY2xhc3Mge1xuICAgIGdldCBjaGF0QXBpRW5kcG9pbnQoKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJSZW1lbWJlciB0byB3cmFwIHlvdXIgYXBwIGluIGEgYDxDb3BpbG90S2l0PiB7Li4ufSA8L0NvcGlsb3RLaXQ+YCAhISFcIik7XG4gICAgfVxuICAgIGdldCBoZWFkZXJzKCkge1xuICAgICAgcmV0dXJuIHt9O1xuICAgIH1cbiAgICBnZXQgYm9keSgpIHtcbiAgICAgIHJldHVybiB7fTtcbiAgICB9XG4gIH0oKSxcbiAgY2hhdFN1Z2dlc3Rpb25Db25maWd1cmF0aW9uOiB7fSxcbiAgYWRkQ2hhdFN1Z2dlc3Rpb25Db25maWd1cmF0aW9uOiAoKSA9PiB7XG4gIH0sXG4gIHJlbW92ZUNoYXRTdWdnZXN0aW9uQ29uZmlndXJhdGlvbjogKCkgPT4ge1xuICB9LFxuICBzaG93RGV2Q29uc29sZTogXCJhdXRvXCIsXG4gIGNvYWdlbnRTdGF0ZXM6IHt9LFxuICBzZXRDb2FnZW50U3RhdGVzOiAoKSA9PiB7XG4gIH0sXG4gIGNvYWdlbnRTdGF0ZXNSZWY6IHsgY3VycmVudDoge30gfSxcbiAgc2V0Q29hZ2VudFN0YXRlc1dpdGhSZWY6ICgpID0+IHtcbiAgfSxcbiAgYWdlbnRTZXNzaW9uOiBudWxsLFxuICBzZXRBZ2VudFNlc3Npb246ICgpID0+IHtcbiAgfVxufTtcbnZhciBDb3BpbG90Q29udGV4dCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQoZW1wdHlDb3BpbG90Q29udGV4dCk7XG5mdW5jdGlvbiB1c2VDb3BpbG90Q29udGV4dCgpIHtcbiAgY29uc3QgY29udGV4dCA9IFJlYWN0LnVzZUNvbnRleHQoQ29waWxvdENvbnRleHQpO1xuICBpZiAoY29udGV4dCA9PT0gZW1wdHlDb3BpbG90Q29udGV4dCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIlJlbWVtYmVyIHRvIHdyYXAgeW91ciBhcHAgaW4gYSBgPENvcGlsb3RLaXQ+IHsuLi59IDwvQ29waWxvdEtpdD5gICEhIVwiKTtcbiAgfVxuICByZXR1cm4gY29udGV4dDtcbn1cbmZ1bmN0aW9uIHJldHVybkFuZFRocm93SW5EZWJ1Zyh2YWx1ZSkge1xuICB0aHJvdyBuZXcgRXJyb3IoXCJSZW1lbWJlciB0byB3cmFwIHlvdXIgYXBwIGluIGEgYDxDb3BpbG90S2l0PiB7Li4ufSA8L0NvcGlsb3RLaXQ+YCAhISFcIik7XG4gIHJldHVybiB2YWx1ZTtcbn1cblxuZXhwb3J0IHtcbiAgQ29waWxvdENvbnRleHQsXG4gIHVzZUNvcGlsb3RDb250ZXh0XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2h1bmstWFFGVlhYNlIubWpzLm1hcCJdLCJuYW1lcyI6WyJfX2FzeW5jIiwiUmVhY3QiLCJlbXB0eUNvcGlsb3RDb250ZXh0IiwiYWN0aW9ucyIsInNldEFjdGlvbiIsInJlbW92ZUFjdGlvbiIsImNvQWdlbnRTdGF0ZVJlbmRlcnMiLCJzZXRDb0FnZW50U3RhdGVSZW5kZXIiLCJyZW1vdmVDb0FnZW50U3RhdGVSZW5kZXIiLCJjaGF0Q29tcG9uZW50c0NhY2hlIiwiY3VycmVudCIsImdldENvbnRleHRTdHJpbmciLCJkb2N1bWVudHMiLCJjYXRlZ29yaWVzIiwicmV0dXJuQW5kVGhyb3dJbkRlYnVnIiwiYWRkQ29udGV4dCIsInJlbW92ZUNvbnRleHQiLCJnZXRGdW5jdGlvbkNhbGxIYW5kbGVyIiwiaXNMb2FkaW5nIiwic2V0SXNMb2FkaW5nIiwiY2hhdEluc3RydWN0aW9ucyIsInNldENoYXRJbnN0cnVjdGlvbnMiLCJnZXREb2N1bWVudHNDb250ZXh0IiwiYWRkRG9jdW1lbnRDb250ZXh0IiwicmVtb3ZlRG9jdW1lbnRDb250ZXh0IiwicnVudGltZUNsaWVudCIsImNvcGlsb3RBcGlDb25maWciLCJjaGF0QXBpRW5kcG9pbnQiLCJFcnJvciIsImhlYWRlcnMiLCJib2R5IiwiY2hhdFN1Z2dlc3Rpb25Db25maWd1cmF0aW9uIiwiYWRkQ2hhdFN1Z2dlc3Rpb25Db25maWd1cmF0aW9uIiwicmVtb3ZlQ2hhdFN1Z2dlc3Rpb25Db25maWd1cmF0aW9uIiwic2hvd0RldkNvbnNvbGUiLCJjb2FnZW50U3RhdGVzIiwic2V0Q29hZ2VudFN0YXRlcyIsImNvYWdlbnRTdGF0ZXNSZWYiLCJzZXRDb2FnZW50U3RhdGVzV2l0aFJlZiIsImFnZW50U2Vzc2lvbiIsInNldEFnZW50U2Vzc2lvbiIsIkNvcGlsb3RDb250ZXh0IiwiY3JlYXRlQ29udGV4dCIsInVzZUNvcGlsb3RDb250ZXh0IiwiY29udGV4dCIsInVzZUNvbnRleHQiLCJ2YWx1ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@copilotkit/react-core/dist/chunk-XQFVXX6R.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@copilotkit/react-core/dist/chunk-XXR4QFAQ.mjs":
/*!*********************************************************************!*\
  !*** ./node_modules/@copilotkit/react-core/dist/chunk-XXR4QFAQ.mjs ***!
  \*********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CopilotMessages: function() { return /* binding */ CopilotMessages; }\n/* harmony export */ });\n/* harmony import */ var _chunk_DCTJZ742_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./chunk-DCTJZ742.mjs */ \"(app-pages-browser)/./node_modules/@copilotkit/react-core/dist/chunk-DCTJZ742.mjs\");\n/* harmony import */ var _chunk_SKC7AJIV_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./chunk-SKC7AJIV.mjs */ \"(app-pages-browser)/./node_modules/@copilotkit/react-core/dist/chunk-SKC7AJIV.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react/jsx-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-runtime.js\");\nvar _s = $RefreshSig$();\n\n\n// src/components/copilot-provider/copilot-messages.tsx\n\n\nfunction CopilotMessages(_a) {\n    _s();\n    var _b = _a, { children } = _b, props = (0,_chunk_SKC7AJIV_mjs__WEBPACK_IMPORTED_MODULE_2__.__objRest)(_b, [\n        \"children\"\n    ]);\n    const [messages, setMessages] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_chunk_DCTJZ742_mjs__WEBPACK_IMPORTED_MODULE_3__.CopilotMessagesContext.Provider, {\n        value: {\n            messages,\n            setMessages\n        },\n        children\n    });\n}\n_s(CopilotMessages, \"dxxfFX7fiXmC0h9Fk+B7I5VonqM=\");\n_c = CopilotMessages;\n //# sourceMappingURL=chunk-XXR4QFAQ.mjs.map\nvar _c;\n$RefreshReg$(_c, \"CopilotMessages\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AY29waWxvdGtpdC9yZWFjdC1jb3JlL2Rpc3QvY2h1bmstWFhSNFFGQVEubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUU4QjtBQUdBO0FBRTlCLHVEQUF1RDtBQUN0QjtBQUNPO0FBQ3hDLFNBQVNJLGdCQUFnQkMsRUFBRTs7SUFDekIsSUFBSUMsS0FBS0QsSUFBSSxFQUFFRSxRQUFRLEVBQUUsR0FBR0QsSUFBSUUsUUFBUVAsOERBQVNBLENBQUNLLElBQUk7UUFBQztLQUFXO0lBQ2xFLE1BQU0sQ0FBQ0csVUFBVUMsWUFBWSxHQUFHUiwrQ0FBUUEsQ0FBQyxFQUFFO0lBQzNDLE9BQU8sYUFBYSxHQUFHQyxzREFBR0EsQ0FDeEJILHVFQUFzQkEsQ0FBQ1csUUFBUSxFQUMvQjtRQUNFQyxPQUFPO1lBQ0xIO1lBQ0FDO1FBQ0Y7UUFDQUg7SUFDRjtBQUVKO0dBYlNIO0tBQUFBO0FBaUJQLENBQ0YsMkNBQTJDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9AY29waWxvdGtpdC9yZWFjdC1jb3JlL2Rpc3QvY2h1bmstWFhSNFFGQVEubWpzP2VmYzEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ29waWxvdE1lc3NhZ2VzQ29udGV4dFxufSBmcm9tIFwiLi9jaHVuay1EQ1RKWjc0Mi5tanNcIjtcbmltcG9ydCB7XG4gIF9fb2JqUmVzdFxufSBmcm9tIFwiLi9jaHVuay1TS0M3QUpJVi5tanNcIjtcblxuLy8gc3JjL2NvbXBvbmVudHMvY29waWxvdC1wcm92aWRlci9jb3BpbG90LW1lc3NhZ2VzLnRzeFxuaW1wb3J0IHsgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IGpzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuZnVuY3Rpb24gQ29waWxvdE1lc3NhZ2VzKF9hKSB7XG4gIHZhciBfYiA9IF9hLCB7IGNoaWxkcmVuIH0gPSBfYiwgcHJvcHMgPSBfX29ialJlc3QoX2IsIFtcImNoaWxkcmVuXCJdKTtcbiAgY29uc3QgW21lc3NhZ2VzLCBzZXRNZXNzYWdlc10gPSB1c2VTdGF0ZShbXSk7XG4gIHJldHVybiAvKiBAX19QVVJFX18gKi8ganN4KFxuICAgIENvcGlsb3RNZXNzYWdlc0NvbnRleHQuUHJvdmlkZXIsXG4gICAge1xuICAgICAgdmFsdWU6IHtcbiAgICAgICAgbWVzc2FnZXMsXG4gICAgICAgIHNldE1lc3NhZ2VzXG4gICAgICB9LFxuICAgICAgY2hpbGRyZW5cbiAgICB9XG4gICk7XG59XG5cbmV4cG9ydCB7XG4gIENvcGlsb3RNZXNzYWdlc1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNodW5rLVhYUjRRRkFRLm1qcy5tYXAiXSwibmFtZXMiOlsiQ29waWxvdE1lc3NhZ2VzQ29udGV4dCIsIl9fb2JqUmVzdCIsInVzZVN0YXRlIiwianN4IiwiQ29waWxvdE1lc3NhZ2VzIiwiX2EiLCJfYiIsImNoaWxkcmVuIiwicHJvcHMiLCJtZXNzYWdlcyIsInNldE1lc3NhZ2VzIiwiUHJvdmlkZXIiLCJ2YWx1ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@copilotkit/react-core/dist/chunk-XXR4QFAQ.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@copilotkit/react-core/dist/chunk-Y7MI4PBB.mjs":
/*!*********************************************************************!*\
  !*** ./node_modules/@copilotkit/react-core/dist/chunk-Y7MI4PBB.mjs ***!
  \*********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useCopilotAction: function() { return /* binding */ useCopilotAction; }\n/* harmony export */ });\n/* harmony import */ var _chunk_XQFVXX6R_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./chunk-XQFVXX6R.mjs */ \"(app-pages-browser)/./node_modules/@copilotkit/react-core/dist/chunk-XQFVXX6R.mjs\");\n/* harmony import */ var _chunk_SKC7AJIV_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./chunk-SKC7AJIV.mjs */ \"(app-pages-browser)/./node_modules/@copilotkit/react-core/dist/chunk-SKC7AJIV.mjs\");\n/* harmony import */ var _copilotkit_shared__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @copilotkit/shared */ \"(app-pages-browser)/./node_modules/@copilotkit/shared/dist/chunk-RIPX6APP.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\nvar _s = $RefreshSig$();\n\n\n// src/hooks/use-copilot-action.ts\n\n\nfunction useCopilotAction(action, dependencies) {\n    _s();\n    const { setAction, removeAction, actions, chatComponentsCache } = (0,_chunk_XQFVXX6R_mjs__WEBPACK_IMPORTED_MODULE_1__.useCopilotContext)();\n    const idRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)((0,_copilotkit_shared__WEBPACK_IMPORTED_MODULE_2__.randomId)());\n    const renderAndWaitRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    action = (0,_chunk_SKC7AJIV_mjs__WEBPACK_IMPORTED_MODULE_3__.__spreadValues)({}, action);\n    if (action.renderAndWait || action.renderAndWaitForResponse) {\n        const renderAndWait = action.renderAndWait || action.renderAndWaitForResponse;\n        action.renderAndWait = void 0;\n        action.renderAndWaitForResponse = void 0;\n        action.handler = ()=>(0,_chunk_SKC7AJIV_mjs__WEBPACK_IMPORTED_MODULE_3__.__async)(this, null, function*() {\n                let resolve;\n                let reject;\n                const promise = new Promise((resolvePromise, rejectPromise)=>{\n                    resolve = resolvePromise;\n                    reject = rejectPromise;\n                });\n                renderAndWaitRef.current = {\n                    promise,\n                    resolve,\n                    reject\n                };\n                return yield promise;\n            });\n        action.render = (props)=>{\n            const waitProps = {\n                status: props.status,\n                args: props.args,\n                result: props.result,\n                handler: props.status === \"executing\" ? renderAndWaitRef.current.resolve : void 0,\n                respond: props.status === \"executing\" ? renderAndWaitRef.current.resolve : void 0\n            };\n            const isNoArgsRenderWait = (_fn)=>{\n                var _a;\n                return ((_a = action.parameters) == null ? void 0 : _a.length) === 0;\n            };\n            if (renderAndWait) {\n                if (isNoArgsRenderWait(renderAndWait)) {\n                    return renderAndWait(waitProps);\n                } else {\n                    return renderAndWait(waitProps);\n                }\n            }\n            return /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(react__WEBPACK_IMPORTED_MODULE_0__.Fragment);\n        };\n    }\n    if (dependencies === void 0) {\n        if (actions[idRef.current]) {\n            actions[idRef.current].handler = action.handler;\n            if (typeof action.render === \"function\") {\n                if (chatComponentsCache.current !== null) {\n                    chatComponentsCache.current.actions[action.name] = action.render;\n                }\n            }\n        }\n    }\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        setAction(idRef.current, action);\n        if (chatComponentsCache.current !== null && action.render !== void 0) {\n            chatComponentsCache.current.actions[action.name] = action.render;\n        }\n        return ()=>{\n            removeAction(idRef.current);\n        };\n    }, [\n        setAction,\n        removeAction,\n        action.description,\n        action.name,\n        action.disabled,\n        action.available,\n        // This should be faster than deep equality checking\n        // In addition, all major JS engines guarantee the order of object keys\n        JSON.stringify(action.parameters),\n        // include render only if it's a string\n        typeof action.render === \"string\" ? action.render : void 0,\n        // dependencies set by the developer\n        ...dependencies || []\n    ]);\n}\n_s(useCopilotAction, \"DtudF/Sk17olI1XgmM9xdXlAMxM=\", false, function() {\n    return [\n        _chunk_XQFVXX6R_mjs__WEBPACK_IMPORTED_MODULE_1__.useCopilotContext\n    ];\n});\n //# sourceMappingURL=chunk-Y7MI4PBB.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AY29waWxvdGtpdC9yZWFjdC1jb3JlL2Rpc3QvY2h1bmstWTdNSTRQQkIubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUU4QjtBQUlBO0FBRTlCLGtDQUFrQztBQUNZO0FBQ3FCO0FBQ25FLFNBQVNRLGlCQUFpQkMsTUFBTSxFQUFFQyxZQUFZOztJQUM1QyxNQUFNLEVBQUVDLFNBQVMsRUFBRUMsWUFBWSxFQUFFQyxPQUFPLEVBQUVDLG1CQUFtQixFQUFFLEdBQUdkLHNFQUFpQkE7SUFDbkYsTUFBTWUsUUFBUVIsNkNBQU1BLENBQUNKLDREQUFRQTtJQUM3QixNQUFNYSxtQkFBbUJULDZDQUFNQSxDQUFDO0lBQ2hDRSxTQUFTUCxtRUFBY0EsQ0FBQyxDQUFDLEdBQUdPO0lBQzVCLElBQUlBLE9BQU9RLGFBQWEsSUFBSVIsT0FBT1Msd0JBQXdCLEVBQUU7UUFDM0QsTUFBTUQsZ0JBQWdCUixPQUFPUSxhQUFhLElBQUlSLE9BQU9TLHdCQUF3QjtRQUM3RVQsT0FBT1EsYUFBYSxHQUFHLEtBQUs7UUFDNUJSLE9BQU9TLHdCQUF3QixHQUFHLEtBQUs7UUFDdkNULE9BQU9VLE9BQU8sR0FBRyxJQUFNbEIsNERBQU9BLENBQUMsSUFBSSxFQUFFLE1BQU07Z0JBQ3pDLElBQUltQjtnQkFDSixJQUFJQztnQkFDSixNQUFNQyxVQUFVLElBQUlDLFFBQVEsQ0FBQ0MsZ0JBQWdCQztvQkFDM0NMLFVBQVVJO29CQUNWSCxTQUFTSTtnQkFDWDtnQkFDQVQsaUJBQWlCVSxPQUFPLEdBQUc7b0JBQUVKO29CQUFTRjtvQkFBU0M7Z0JBQU87Z0JBQ3RELE9BQU8sTUFBTUM7WUFDZjtRQUNBYixPQUFPa0IsTUFBTSxHQUFHLENBQUNDO1lBQ2YsTUFBTUMsWUFBWTtnQkFDaEJDLFFBQVFGLE1BQU1FLE1BQU07Z0JBQ3BCQyxNQUFNSCxNQUFNRyxJQUFJO2dCQUNoQkMsUUFBUUosTUFBTUksTUFBTTtnQkFDcEJiLFNBQVNTLE1BQU1FLE1BQU0sS0FBSyxjQUFjZCxpQkFBaUJVLE9BQU8sQ0FBQ04sT0FBTyxHQUFHLEtBQUs7Z0JBQ2hGYSxTQUFTTCxNQUFNRSxNQUFNLEtBQUssY0FBY2QsaUJBQWlCVSxPQUFPLENBQUNOLE9BQU8sR0FBRyxLQUFLO1lBQ2xGO1lBQ0EsTUFBTWMscUJBQXFCLENBQUNDO2dCQUMxQixJQUFJQztnQkFDSixPQUFPLENBQUMsQ0FBQ0EsS0FBSzNCLE9BQU80QixVQUFVLEtBQUssT0FBTyxLQUFLLElBQUlELEdBQUdFLE1BQU0sTUFBTTtZQUNyRTtZQUNBLElBQUlyQixlQUFlO2dCQUNqQixJQUFJaUIsbUJBQW1CakIsZ0JBQWdCO29CQUNyQyxPQUFPQSxjQUFjWTtnQkFDdkIsT0FBTztvQkFDTCxPQUFPWixjQUFjWTtnQkFDdkI7WUFDRjtZQUNBLHFCQUFPekIsb0RBQWFBLENBQUNDLDJDQUFRQTtRQUMvQjtJQUNGO0lBQ0EsSUFBSUssaUJBQWlCLEtBQUssR0FBRztRQUMzQixJQUFJRyxPQUFPLENBQUNFLE1BQU1XLE9BQU8sQ0FBQyxFQUFFO1lBQzFCYixPQUFPLENBQUNFLE1BQU1XLE9BQU8sQ0FBQyxDQUFDUCxPQUFPLEdBQUdWLE9BQU9VLE9BQU87WUFDL0MsSUFBSSxPQUFPVixPQUFPa0IsTUFBTSxLQUFLLFlBQVk7Z0JBQ3ZDLElBQUliLG9CQUFvQlksT0FBTyxLQUFLLE1BQU07b0JBQ3hDWixvQkFBb0JZLE9BQU8sQ0FBQ2IsT0FBTyxDQUFDSixPQUFPOEIsSUFBSSxDQUFDLEdBQUc5QixPQUFPa0IsTUFBTTtnQkFDbEU7WUFDRjtRQUNGO0lBQ0Y7SUFDQXJCLGdEQUFTQSxDQUFDO1FBQ1JLLFVBQVVJLE1BQU1XLE9BQU8sRUFBRWpCO1FBQ3pCLElBQUlLLG9CQUFvQlksT0FBTyxLQUFLLFFBQVFqQixPQUFPa0IsTUFBTSxLQUFLLEtBQUssR0FBRztZQUNwRWIsb0JBQW9CWSxPQUFPLENBQUNiLE9BQU8sQ0FBQ0osT0FBTzhCLElBQUksQ0FBQyxHQUFHOUIsT0FBT2tCLE1BQU07UUFDbEU7UUFDQSxPQUFPO1lBQ0xmLGFBQWFHLE1BQU1XLE9BQU87UUFDNUI7SUFDRixHQUFHO1FBQ0RmO1FBQ0FDO1FBQ0FILE9BQU8rQixXQUFXO1FBQ2xCL0IsT0FBTzhCLElBQUk7UUFDWDlCLE9BQU9nQyxRQUFRO1FBQ2ZoQyxPQUFPaUMsU0FBUztRQUNoQixvREFBb0Q7UUFDcEQsdUVBQXVFO1FBQ3ZFQyxLQUFLQyxTQUFTLENBQUNuQyxPQUFPNEIsVUFBVTtRQUNoQyx1Q0FBdUM7UUFDdkMsT0FBTzVCLE9BQU9rQixNQUFNLEtBQUssV0FBV2xCLE9BQU9rQixNQUFNLEdBQUcsS0FBSztRQUN6RCxvQ0FBb0M7V0FDakNqQixnQkFBZ0IsRUFBRTtLQUN0QjtBQUNIO0dBMUVTRjs7UUFDMkRSLGtFQUFpQkE7OztBQTZFbkYsQ0FDRiwyQ0FBMkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0Bjb3BpbG90a2l0L3JlYWN0LWNvcmUvZGlzdC9jaHVuay1ZN01JNFBCQi5tanM/ZmVlZiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICB1c2VDb3BpbG90Q29udGV4dFxufSBmcm9tIFwiLi9jaHVuay1YUUZWWFg2Ui5tanNcIjtcbmltcG9ydCB7XG4gIF9fYXN5bmMsXG4gIF9fc3ByZWFkVmFsdWVzXG59IGZyb20gXCIuL2NodW5rLVNLQzdBSklWLm1qc1wiO1xuXG4vLyBzcmMvaG9va3MvdXNlLWNvcGlsb3QtYWN0aW9uLnRzXG5pbXBvcnQgeyByYW5kb21JZCB9IGZyb20gXCJAY29waWxvdGtpdC9zaGFyZWRcIjtcbmltcG9ydCB7IGNyZWF0ZUVsZW1lbnQsIEZyYWdtZW50LCB1c2VFZmZlY3QsIHVzZVJlZiB9IGZyb20gXCJyZWFjdFwiO1xuZnVuY3Rpb24gdXNlQ29waWxvdEFjdGlvbihhY3Rpb24sIGRlcGVuZGVuY2llcykge1xuICBjb25zdCB7IHNldEFjdGlvbiwgcmVtb3ZlQWN0aW9uLCBhY3Rpb25zLCBjaGF0Q29tcG9uZW50c0NhY2hlIH0gPSB1c2VDb3BpbG90Q29udGV4dCgpO1xuICBjb25zdCBpZFJlZiA9IHVzZVJlZihyYW5kb21JZCgpKTtcbiAgY29uc3QgcmVuZGVyQW5kV2FpdFJlZiA9IHVzZVJlZihudWxsKTtcbiAgYWN0aW9uID0gX19zcHJlYWRWYWx1ZXMoe30sIGFjdGlvbik7XG4gIGlmIChhY3Rpb24ucmVuZGVyQW5kV2FpdCB8fCBhY3Rpb24ucmVuZGVyQW5kV2FpdEZvclJlc3BvbnNlKSB7XG4gICAgY29uc3QgcmVuZGVyQW5kV2FpdCA9IGFjdGlvbi5yZW5kZXJBbmRXYWl0IHx8IGFjdGlvbi5yZW5kZXJBbmRXYWl0Rm9yUmVzcG9uc2U7XG4gICAgYWN0aW9uLnJlbmRlckFuZFdhaXQgPSB2b2lkIDA7XG4gICAgYWN0aW9uLnJlbmRlckFuZFdhaXRGb3JSZXNwb25zZSA9IHZvaWQgMDtcbiAgICBhY3Rpb24uaGFuZGxlciA9ICgpID0+IF9fYXN5bmModGhpcywgbnVsbCwgZnVuY3Rpb24qICgpIHtcbiAgICAgIGxldCByZXNvbHZlO1xuICAgICAgbGV0IHJlamVjdDtcbiAgICAgIGNvbnN0IHByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZVByb21pc2UsIHJlamVjdFByb21pc2UpID0+IHtcbiAgICAgICAgcmVzb2x2ZSA9IHJlc29sdmVQcm9taXNlO1xuICAgICAgICByZWplY3QgPSByZWplY3RQcm9taXNlO1xuICAgICAgfSk7XG4gICAgICByZW5kZXJBbmRXYWl0UmVmLmN1cnJlbnQgPSB7IHByb21pc2UsIHJlc29sdmUsIHJlamVjdCB9O1xuICAgICAgcmV0dXJuIHlpZWxkIHByb21pc2U7XG4gICAgfSk7XG4gICAgYWN0aW9uLnJlbmRlciA9IChwcm9wcykgPT4ge1xuICAgICAgY29uc3Qgd2FpdFByb3BzID0ge1xuICAgICAgICBzdGF0dXM6IHByb3BzLnN0YXR1cyxcbiAgICAgICAgYXJnczogcHJvcHMuYXJncyxcbiAgICAgICAgcmVzdWx0OiBwcm9wcy5yZXN1bHQsXG4gICAgICAgIGhhbmRsZXI6IHByb3BzLnN0YXR1cyA9PT0gXCJleGVjdXRpbmdcIiA/IHJlbmRlckFuZFdhaXRSZWYuY3VycmVudC5yZXNvbHZlIDogdm9pZCAwLFxuICAgICAgICByZXNwb25kOiBwcm9wcy5zdGF0dXMgPT09IFwiZXhlY3V0aW5nXCIgPyByZW5kZXJBbmRXYWl0UmVmLmN1cnJlbnQucmVzb2x2ZSA6IHZvaWQgMFxuICAgICAgfTtcbiAgICAgIGNvbnN0IGlzTm9BcmdzUmVuZGVyV2FpdCA9IChfZm4pID0+IHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICByZXR1cm4gKChfYSA9IGFjdGlvbi5wYXJhbWV0ZXJzKSA9PSBudWxsID8gdm9pZCAwIDogX2EubGVuZ3RoKSA9PT0gMDtcbiAgICAgIH07XG4gICAgICBpZiAocmVuZGVyQW5kV2FpdCkge1xuICAgICAgICBpZiAoaXNOb0FyZ3NSZW5kZXJXYWl0KHJlbmRlckFuZFdhaXQpKSB7XG4gICAgICAgICAgcmV0dXJuIHJlbmRlckFuZFdhaXQod2FpdFByb3BzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gcmVuZGVyQW5kV2FpdCh3YWl0UHJvcHMpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gY3JlYXRlRWxlbWVudChGcmFnbWVudCk7XG4gICAgfTtcbiAgfVxuICBpZiAoZGVwZW5kZW5jaWVzID09PSB2b2lkIDApIHtcbiAgICBpZiAoYWN0aW9uc1tpZFJlZi5jdXJyZW50XSkge1xuICAgICAgYWN0aW9uc1tpZFJlZi5jdXJyZW50XS5oYW5kbGVyID0gYWN0aW9uLmhhbmRsZXI7XG4gICAgICBpZiAodHlwZW9mIGFjdGlvbi5yZW5kZXIgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICBpZiAoY2hhdENvbXBvbmVudHNDYWNoZS5jdXJyZW50ICE9PSBudWxsKSB7XG4gICAgICAgICAgY2hhdENvbXBvbmVudHNDYWNoZS5jdXJyZW50LmFjdGlvbnNbYWN0aW9uLm5hbWVdID0gYWN0aW9uLnJlbmRlcjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIHNldEFjdGlvbihpZFJlZi5jdXJyZW50LCBhY3Rpb24pO1xuICAgIGlmIChjaGF0Q29tcG9uZW50c0NhY2hlLmN1cnJlbnQgIT09IG51bGwgJiYgYWN0aW9uLnJlbmRlciAhPT0gdm9pZCAwKSB7XG4gICAgICBjaGF0Q29tcG9uZW50c0NhY2hlLmN1cnJlbnQuYWN0aW9uc1thY3Rpb24ubmFtZV0gPSBhY3Rpb24ucmVuZGVyO1xuICAgIH1cbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgcmVtb3ZlQWN0aW9uKGlkUmVmLmN1cnJlbnQpO1xuICAgIH07XG4gIH0sIFtcbiAgICBzZXRBY3Rpb24sXG4gICAgcmVtb3ZlQWN0aW9uLFxuICAgIGFjdGlvbi5kZXNjcmlwdGlvbixcbiAgICBhY3Rpb24ubmFtZSxcbiAgICBhY3Rpb24uZGlzYWJsZWQsXG4gICAgYWN0aW9uLmF2YWlsYWJsZSxcbiAgICAvLyBUaGlzIHNob3VsZCBiZSBmYXN0ZXIgdGhhbiBkZWVwIGVxdWFsaXR5IGNoZWNraW5nXG4gICAgLy8gSW4gYWRkaXRpb24sIGFsbCBtYWpvciBKUyBlbmdpbmVzIGd1YXJhbnRlZSB0aGUgb3JkZXIgb2Ygb2JqZWN0IGtleXNcbiAgICBKU09OLnN0cmluZ2lmeShhY3Rpb24ucGFyYW1ldGVycyksXG4gICAgLy8gaW5jbHVkZSByZW5kZXIgb25seSBpZiBpdCdzIGEgc3RyaW5nXG4gICAgdHlwZW9mIGFjdGlvbi5yZW5kZXIgPT09IFwic3RyaW5nXCIgPyBhY3Rpb24ucmVuZGVyIDogdm9pZCAwLFxuICAgIC8vIGRlcGVuZGVuY2llcyBzZXQgYnkgdGhlIGRldmVsb3BlclxuICAgIC4uLmRlcGVuZGVuY2llcyB8fCBbXVxuICBdKTtcbn1cblxuZXhwb3J0IHtcbiAgdXNlQ29waWxvdEFjdGlvblxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNodW5rLVk3TUk0UEJCLm1qcy5tYXAiXSwibmFtZXMiOlsidXNlQ29waWxvdENvbnRleHQiLCJfX2FzeW5jIiwiX19zcHJlYWRWYWx1ZXMiLCJyYW5kb21JZCIsImNyZWF0ZUVsZW1lbnQiLCJGcmFnbWVudCIsInVzZUVmZmVjdCIsInVzZVJlZiIsInVzZUNvcGlsb3RBY3Rpb24iLCJhY3Rpb24iLCJkZXBlbmRlbmNpZXMiLCJzZXRBY3Rpb24iLCJyZW1vdmVBY3Rpb24iLCJhY3Rpb25zIiwiY2hhdENvbXBvbmVudHNDYWNoZSIsImlkUmVmIiwicmVuZGVyQW5kV2FpdFJlZiIsInJlbmRlckFuZFdhaXQiLCJyZW5kZXJBbmRXYWl0Rm9yUmVzcG9uc2UiLCJoYW5kbGVyIiwicmVzb2x2ZSIsInJlamVjdCIsInByb21pc2UiLCJQcm9taXNlIiwicmVzb2x2ZVByb21pc2UiLCJyZWplY3RQcm9taXNlIiwiY3VycmVudCIsInJlbmRlciIsInByb3BzIiwid2FpdFByb3BzIiwic3RhdHVzIiwiYXJncyIsInJlc3VsdCIsInJlc3BvbmQiLCJpc05vQXJnc1JlbmRlcldhaXQiLCJfZm4iLCJfYSIsInBhcmFtZXRlcnMiLCJsZW5ndGgiLCJuYW1lIiwiZGVzY3JpcHRpb24iLCJkaXNhYmxlZCIsImF2YWlsYWJsZSIsIkpTT04iLCJzdHJpbmdpZnkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@copilotkit/react-core/dist/chunk-Y7MI4PBB.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@copilotkit/react-core/dist/index.mjs":
/*!************************************************************!*\
  !*** ./node_modules/@copilotkit/react-core/dist/index.mjs ***!
  \************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CopilotContext: function() { return /* reexport safe */ _chunk_XQFVXX6R_mjs__WEBPACK_IMPORTED_MODULE_0__.CopilotContext; },\n/* harmony export */   CopilotKit: function() { return /* reexport safe */ _chunk_DHGXL5PC_mjs__WEBPACK_IMPORTED_MODULE_1__.CopilotKit; },\n/* harmony export */   CopilotMessagesContext: function() { return /* reexport safe */ _chunk_DCTJZ742_mjs__WEBPACK_IMPORTED_MODULE_2__.CopilotMessagesContext; },\n/* harmony export */   CopilotTask: function() { return /* reexport safe */ _chunk_OT67R4NB_mjs__WEBPACK_IMPORTED_MODULE_3__.CopilotTask; },\n/* harmony export */   defaultCopilotContextCategories: function() { return /* reexport safe */ _chunk_DHGXL5PC_mjs__WEBPACK_IMPORTED_MODULE_1__.defaultCopilotContextCategories; },\n/* harmony export */   extract: function() { return /* reexport safe */ _chunk_DHGXL5PC_mjs__WEBPACK_IMPORTED_MODULE_1__.extract; },\n/* harmony export */   shouldShowDevConsole: function() { return /* reexport safe */ _chunk_MLAS4QUR_mjs__WEBPACK_IMPORTED_MODULE_4__.shouldShowDevConsole; },\n/* harmony export */   useCoAgent: function() { return /* reexport safe */ _chunk_O22KGHOQ_mjs__WEBPACK_IMPORTED_MODULE_5__.useCoAgent; },\n/* harmony export */   useCoAgentStateRender: function() { return /* reexport safe */ _chunk_JHEAUB3Z_mjs__WEBPACK_IMPORTED_MODULE_6__.useCoAgentStateRender; },\n/* harmony export */   useCopilotAction: function() { return /* reexport safe */ _chunk_Y7MI4PBB_mjs__WEBPACK_IMPORTED_MODULE_7__.useCopilotAction; },\n/* harmony export */   useCopilotChat: function() { return /* reexport safe */ _chunk_XBVKTDXP_mjs__WEBPACK_IMPORTED_MODULE_8__.useCopilotChat; },\n/* harmony export */   useCopilotContext: function() { return /* reexport safe */ _chunk_XQFVXX6R_mjs__WEBPACK_IMPORTED_MODULE_0__.useCopilotContext; },\n/* harmony export */   useCopilotMessagesContext: function() { return /* reexport safe */ _chunk_DCTJZ742_mjs__WEBPACK_IMPORTED_MODULE_2__.useCopilotMessagesContext; },\n/* harmony export */   useCopilotReadable: function() { return /* reexport safe */ _chunk_AG7FH7OD_mjs__WEBPACK_IMPORTED_MODULE_9__.useCopilotReadable; },\n/* harmony export */   useCopilotRuntimeClient: function() { return /* reexport safe */ _chunk_ODN4H66E_mjs__WEBPACK_IMPORTED_MODULE_10__.useCopilotRuntimeClient; },\n/* harmony export */   useMakeCopilotDocumentReadable: function() { return /* reexport safe */ _chunk_UOVONDR6_mjs__WEBPACK_IMPORTED_MODULE_11__.useMakeCopilotDocumentReadable; }\n/* harmony export */ });\n/* harmony import */ var _chunk_OT67R4NB_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./chunk-OT67R4NB.mjs */ \"(app-pages-browser)/./node_modules/@copilotkit/react-core/dist/chunk-OT67R4NB.mjs\");\n/* harmony import */ var _chunk_O22KGHOQ_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./chunk-O22KGHOQ.mjs */ \"(app-pages-browser)/./node_modules/@copilotkit/react-core/dist/chunk-O22KGHOQ.mjs\");\n/* harmony import */ var _chunk_Y7MI4PBB_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./chunk-Y7MI4PBB.mjs */ \"(app-pages-browser)/./node_modules/@copilotkit/react-core/dist/chunk-Y7MI4PBB.mjs\");\n/* harmony import */ var _chunk_XBVKTDXP_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./chunk-XBVKTDXP.mjs */ \"(app-pages-browser)/./node_modules/@copilotkit/react-core/dist/chunk-XBVKTDXP.mjs\");\n/* harmony import */ var _chunk_AG7FH7OD_mjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./chunk-AG7FH7OD.mjs */ \"(app-pages-browser)/./node_modules/@copilotkit/react-core/dist/chunk-AG7FH7OD.mjs\");\n/* harmony import */ var _chunk_UOVONDR6_mjs__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./chunk-UOVONDR6.mjs */ \"(app-pages-browser)/./node_modules/@copilotkit/react-core/dist/chunk-UOVONDR6.mjs\");\n/* harmony import */ var _chunk_DHGXL5PC_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./chunk-DHGXL5PC.mjs */ \"(app-pages-browser)/./node_modules/@copilotkit/react-core/dist/chunk-DHGXL5PC.mjs\");\n/* harmony import */ var _chunk_MLAS4QUR_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./chunk-MLAS4QUR.mjs */ \"(app-pages-browser)/./node_modules/@copilotkit/react-core/dist/chunk-MLAS4QUR.mjs\");\n/* harmony import */ var _chunk_DCTJZ742_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./chunk-DCTJZ742.mjs */ \"(app-pages-browser)/./node_modules/@copilotkit/react-core/dist/chunk-DCTJZ742.mjs\");\n/* harmony import */ var _chunk_ODN4H66E_mjs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./chunk-ODN4H66E.mjs */ \"(app-pages-browser)/./node_modules/@copilotkit/react-core/dist/chunk-ODN4H66E.mjs\");\n/* harmony import */ var _chunk_JHEAUB3Z_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./chunk-JHEAUB3Z.mjs */ \"(app-pages-browser)/./node_modules/@copilotkit/react-core/dist/chunk-JHEAUB3Z.mjs\");\n/* harmony import */ var _chunk_XQFVXX6R_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunk-XQFVXX6R.mjs */ \"(app-pages-browser)/./node_modules/@copilotkit/react-core/dist/chunk-XQFVXX6R.mjs\");\n/* __next_internal_client_entry_do_not_use__ CopilotContext,CopilotKit,CopilotMessagesContext,CopilotTask,defaultCopilotContextCategories,extract,shouldShowDevConsole,useCoAgent,useCoAgentStateRender,useCopilotAction,useCopilotChat,useCopilotContext,useCopilotMessagesContext,useCopilotReadable,useCopilotRuntimeClient,useMakeCopilotDocumentReadable auto */ \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AY29waWxvdGtpdC9yZWFjdC1jb3JlL2Rpc3QvaW5kZXgubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7c1dBQzhCO0FBR0E7QUFDQTtBQUNBO0FBR0E7QUFHQTtBQUdBO0FBR0E7QUFHQTtBQUtBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUlBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFHQTtBQUlBO0FBQ0E7QUFrQjVCLENBQ0Ysa0NBQWtDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9AY29waWxvdGtpdC9yZWFjdC1jb3JlL2Rpc3QvaW5kZXgubWpzPzc0NzQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2UgY2xpZW50XCI7XG5pbXBvcnQgXCIuL2NodW5rLUxVR0VJNFlRLm1qc1wiO1xuaW1wb3J0IHtcbiAgQ29waWxvdFRhc2tcbn0gZnJvbSBcIi4vY2h1bmstT1Q2N1I0TkIubWpzXCI7XG5pbXBvcnQgXCIuL2NodW5rLUVGWlBTWldPLm1qc1wiO1xuaW1wb3J0IFwiLi9jaHVuay1MMzRNSEFYUi5tanNcIjtcbmltcG9ydCB7XG4gIHVzZUNvQWdlbnRcbn0gZnJvbSBcIi4vY2h1bmstTzIyS0dIT1EubWpzXCI7XG5pbXBvcnQge1xuICB1c2VDb3BpbG90QWN0aW9uXG59IGZyb20gXCIuL2NodW5rLVk3TUk0UEJCLm1qc1wiO1xuaW1wb3J0IHtcbiAgdXNlQ29waWxvdENoYXRcbn0gZnJvbSBcIi4vY2h1bmstWEJWS1REWFAubWpzXCI7XG5pbXBvcnQge1xuICB1c2VDb3BpbG90UmVhZGFibGVcbn0gZnJvbSBcIi4vY2h1bmstQUc3Rkg3T0QubWpzXCI7XG5pbXBvcnQge1xuICB1c2VNYWtlQ29waWxvdERvY3VtZW50UmVhZGFibGVcbn0gZnJvbSBcIi4vY2h1bmstVU9WT05EUjYubWpzXCI7XG5pbXBvcnQge1xuICBDb3BpbG90S2l0LFxuICBkZWZhdWx0Q29waWxvdENvbnRleHRDYXRlZ29yaWVzLFxuICBleHRyYWN0XG59IGZyb20gXCIuL2NodW5rLURIR1hMNVBDLm1qc1wiO1xuaW1wb3J0IHtcbiAgc2hvdWxkU2hvd0RldkNvbnNvbGVcbn0gZnJvbSBcIi4vY2h1bmstTUxBUzRRVVIubWpzXCI7XG5pbXBvcnQgXCIuL2NodW5rLVhYUjRRRkFRLm1qc1wiO1xuaW1wb3J0IFwiLi9jaHVuay01RkhTVUtRTC5tanNcIjtcbmltcG9ydCBcIi4vY2h1bmstNlUzVUgzS08ubWpzXCI7XG5pbXBvcnQgXCIuL2NodW5rLVlQU0dLUERBLm1qc1wiO1xuaW1wb3J0IHtcbiAgQ29waWxvdE1lc3NhZ2VzQ29udGV4dCxcbiAgdXNlQ29waWxvdE1lc3NhZ2VzQ29udGV4dFxufSBmcm9tIFwiLi9jaHVuay1EQ1RKWjc0Mi5tanNcIjtcbmltcG9ydCBcIi4vY2h1bmstRVVJQlZGVjYubWpzXCI7XG5pbXBvcnQge1xuICB1c2VDb3BpbG90UnVudGltZUNsaWVudFxufSBmcm9tIFwiLi9jaHVuay1PRE40SDY2RS5tanNcIjtcbmltcG9ydCBcIi4vY2h1bmstMktDRUhHU0kubWpzXCI7XG5pbXBvcnQgXCIuL2NodW5rLU83QVJJNUNWLm1qc1wiO1xuaW1wb3J0IHtcbiAgdXNlQ29BZ2VudFN0YXRlUmVuZGVyXG59IGZyb20gXCIuL2NodW5rLUpIRUFVQjNaLm1qc1wiO1xuaW1wb3J0IHtcbiAgQ29waWxvdENvbnRleHQsXG4gIHVzZUNvcGlsb3RDb250ZXh0XG59IGZyb20gXCIuL2NodW5rLVhRRlZYWDZSLm1qc1wiO1xuaW1wb3J0IFwiLi9jaHVuay1TS0M3QUpJVi5tanNcIjtcbmV4cG9ydCB7XG4gIENvcGlsb3RDb250ZXh0LFxuICBDb3BpbG90S2l0LFxuICBDb3BpbG90TWVzc2FnZXNDb250ZXh0LFxuICBDb3BpbG90VGFzayxcbiAgZGVmYXVsdENvcGlsb3RDb250ZXh0Q2F0ZWdvcmllcyxcbiAgZXh0cmFjdCxcbiAgc2hvdWxkU2hvd0RldkNvbnNvbGUsXG4gIHVzZUNvQWdlbnQsXG4gIHVzZUNvQWdlbnRTdGF0ZVJlbmRlcixcbiAgdXNlQ29waWxvdEFjdGlvbixcbiAgdXNlQ29waWxvdENoYXQsXG4gIHVzZUNvcGlsb3RDb250ZXh0LFxuICB1c2VDb3BpbG90TWVzc2FnZXNDb250ZXh0LFxuICB1c2VDb3BpbG90UmVhZGFibGUsXG4gIHVzZUNvcGlsb3RSdW50aW1lQ2xpZW50LFxuICB1c2VNYWtlQ29waWxvdERvY3VtZW50UmVhZGFibGVcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5tanMubWFwIl0sIm5hbWVzIjpbIkNvcGlsb3RUYXNrIiwidXNlQ29BZ2VudCIsInVzZUNvcGlsb3RBY3Rpb24iLCJ1c2VDb3BpbG90Q2hhdCIsInVzZUNvcGlsb3RSZWFkYWJsZSIsInVzZU1ha2VDb3BpbG90RG9jdW1lbnRSZWFkYWJsZSIsIkNvcGlsb3RLaXQiLCJkZWZhdWx0Q29waWxvdENvbnRleHRDYXRlZ29yaWVzIiwiZXh0cmFjdCIsInNob3VsZFNob3dEZXZDb25zb2xlIiwiQ29waWxvdE1lc3NhZ2VzQ29udGV4dCIsInVzZUNvcGlsb3RNZXNzYWdlc0NvbnRleHQiLCJ1c2VDb3BpbG90UnVudGltZUNsaWVudCIsInVzZUNvQWdlbnRTdGF0ZVJlbmRlciIsIkNvcGlsb3RDb250ZXh0IiwidXNlQ29waWxvdENvbnRleHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@copilotkit/react-core/dist/index.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@copilotkit/runtime-client-gql/dist/chunk-6IG33H2Z.mjs":
/*!*****************************************************************************!*\
  !*** ./node_modules/@copilotkit/runtime-client-gql/dist/chunk-6IG33H2Z.mjs ***!
  \*****************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CopilotRuntimeClient: function() { return /* binding */ CopilotRuntimeClient; }\n/* harmony export */ });\n/* harmony import */ var _chunk_MNJB3NHD_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunk-MNJB3NHD.mjs */ \"(app-pages-browser)/./node_modules/@copilotkit/runtime-client-gql/dist/chunk-MNJB3NHD.mjs\");\n/* harmony import */ var _urql_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @urql/core */ \"(app-pages-browser)/./node_modules/@urql/core/dist/urql-core.mjs\");\n\n// src/client/CopilotRuntimeClient.ts\n\n// package.json\nvar version = \"1.4.7\";\n// src/client/CopilotRuntimeClient.ts\nvar CopilotRuntimeClient = class {\n    generateCopilotResponse(param) {\n        let { data, properties, signal } = param;\n        const result = this.client.mutation(_chunk_MNJB3NHD_mjs__WEBPACK_IMPORTED_MODULE_0__.generateCopilotResponseMutation, {\n            data,\n            properties\n        }, {\n            fetch: (url, opts)=>fetch(url, {\n                    ...opts,\n                    signal\n                })\n        });\n        return result;\n    }\n    asStream(source) {\n        const handleGQLErrors = this.handleGQLErrors;\n        return new ReadableStream({\n            start (controller) {\n                source.subscribe((param)=>{\n                    let { data, hasNext, error } = param;\n                    if (error) {\n                        controller.error(error);\n                        if (handleGQLErrors) {\n                            handleGQLErrors(error);\n                        }\n                    } else {\n                        controller.enqueue(data);\n                        if (!hasNext) {\n                            controller.close();\n                        }\n                    }\n                });\n            }\n        });\n    }\n    constructor(options){\n        const headers = {};\n        this.handleGQLErrors = options.handleGQLErrors;\n        if (options.headers) {\n            Object.assign(headers, options.headers);\n        }\n        if (options.publicApiKey) {\n            headers[\"x-copilotcloud-public-api-key\"] = options.publicApiKey;\n        }\n        this.client = new _urql_core__WEBPACK_IMPORTED_MODULE_1__.Client({\n            url: options.url,\n            exchanges: [\n                _urql_core__WEBPACK_IMPORTED_MODULE_1__.cacheExchange,\n                _urql_core__WEBPACK_IMPORTED_MODULE_1__.fetchExchange\n            ],\n            fetchOptions: {\n                headers: {\n                    ...headers,\n                    \"X-CopilotKit-Runtime-Client-GQL-Version\": version\n                },\n                ...options.credentials ? {\n                    credentials: options.credentials\n                } : {}\n            }\n        });\n    }\n};\n //# sourceMappingURL=chunk-6IG33H2Z.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AY29waWxvdGtpdC9ydW50aW1lLWNsaWVudC1ncWwvZGlzdC9jaHVuay02SUczM0gyWi5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBRThCO0FBRTlCLHFDQUFxQztBQUM2QjtBQUVsRSxlQUFlO0FBQ2YsSUFBSUksVUFBVTtBQUVkLHFDQUFxQztBQUNyQyxJQUFJQyx1QkFBdUI7SUFzQnpCQyx3QkFBd0IsS0FJdkIsRUFBRTtZQUpxQixFQUN0QkMsSUFBSSxFQUNKQyxVQUFVLEVBQ1ZDLE1BQU0sRUFDUCxHQUp1QjtRQUt0QixNQUFNQyxTQUFTLElBQUksQ0FBQ0MsTUFBTSxDQUFDQyxRQUFRLENBQ2pDWixnRkFBK0JBLEVBQy9CO1lBQUVPO1lBQU1DO1FBQVcsR0FDbkI7WUFBRUssT0FBTyxDQUFDQyxLQUFLQyxPQUFTRixNQUFNQyxLQUFLO29CQUFFLEdBQUdDLElBQUk7b0JBQUVOO2dCQUFPO1FBQUc7UUFFMUQsT0FBT0M7SUFDVDtJQUNBTSxTQUFTQyxNQUFNLEVBQUU7UUFDZixNQUFNQyxrQkFBa0IsSUFBSSxDQUFDQSxlQUFlO1FBQzVDLE9BQU8sSUFBSUMsZUFBZTtZQUN4QkMsT0FBTUMsVUFBVTtnQkFDZEosT0FBT0ssU0FBUyxDQUFDO3dCQUFDLEVBQUVmLElBQUksRUFBRWdCLE9BQU8sRUFBRUMsS0FBSyxFQUFFO29CQUN4QyxJQUFJQSxPQUFPO3dCQUNUSCxXQUFXRyxLQUFLLENBQUNBO3dCQUNqQixJQUFJTixpQkFBaUI7NEJBQ25CQSxnQkFBZ0JNO3dCQUNsQjtvQkFDRixPQUFPO3dCQUNMSCxXQUFXSSxPQUFPLENBQUNsQjt3QkFDbkIsSUFBSSxDQUFDZ0IsU0FBUzs0QkFDWkYsV0FBV0ssS0FBSzt3QkFDbEI7b0JBQ0Y7Z0JBQ0Y7WUFDRjtRQUNGO0lBQ0Y7SUFwREFDLFlBQVlDLE9BQU8sQ0FBRTtRQUNuQixNQUFNQyxVQUFVLENBQUM7UUFDakIsSUFBSSxDQUFDWCxlQUFlLEdBQUdVLFFBQVFWLGVBQWU7UUFDOUMsSUFBSVUsUUFBUUMsT0FBTyxFQUFFO1lBQ25CQyxPQUFPQyxNQUFNLENBQUNGLFNBQVNELFFBQVFDLE9BQU87UUFDeEM7UUFDQSxJQUFJRCxRQUFRSSxZQUFZLEVBQUU7WUFDeEJILE9BQU8sQ0FBQyxnQ0FBZ0MsR0FBR0QsUUFBUUksWUFBWTtRQUNqRTtRQUNBLElBQUksQ0FBQ3JCLE1BQU0sR0FBRyxJQUFJViw4Q0FBTUEsQ0FBQztZQUN2QmEsS0FBS2MsUUFBUWQsR0FBRztZQUNoQm1CLFdBQVc7Z0JBQUMvQixxREFBYUE7Z0JBQUVDLHFEQUFhQTthQUFDO1lBQ3pDK0IsY0FBYztnQkFDWkwsU0FBUztvQkFDUCxHQUFHQSxPQUFPO29CQUNWLDJDQUEyQ3pCO2dCQUM3QztnQkFDQSxHQUFHd0IsUUFBUU8sV0FBVyxHQUFHO29CQUFFQSxhQUFhUCxRQUFRTyxXQUFXO2dCQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3BFO1FBQ0Y7SUFDRjtBQWlDRjtBQUlFLENBQ0YsMkNBQTJDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9AY29waWxvdGtpdC9ydW50aW1lLWNsaWVudC1ncWwvZGlzdC9jaHVuay02SUczM0gyWi5tanM/MTcyNiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBnZW5lcmF0ZUNvcGlsb3RSZXNwb25zZU11dGF0aW9uXG59IGZyb20gXCIuL2NodW5rLU1OSkIzTkhELm1qc1wiO1xuXG4vLyBzcmMvY2xpZW50L0NvcGlsb3RSdW50aW1lQ2xpZW50LnRzXG5pbXBvcnQgeyBDbGllbnQsIGNhY2hlRXhjaGFuZ2UsIGZldGNoRXhjaGFuZ2UgfSBmcm9tIFwiQHVycWwvY29yZVwiO1xuXG4vLyBwYWNrYWdlLmpzb25cbnZhciB2ZXJzaW9uID0gXCIxLjQuN1wiO1xuXG4vLyBzcmMvY2xpZW50L0NvcGlsb3RSdW50aW1lQ2xpZW50LnRzXG52YXIgQ29waWxvdFJ1bnRpbWVDbGllbnQgPSBjbGFzcyB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICBjb25zdCBoZWFkZXJzID0ge307XG4gICAgdGhpcy5oYW5kbGVHUUxFcnJvcnMgPSBvcHRpb25zLmhhbmRsZUdRTEVycm9ycztcbiAgICBpZiAob3B0aW9ucy5oZWFkZXJzKSB7XG4gICAgICBPYmplY3QuYXNzaWduKGhlYWRlcnMsIG9wdGlvbnMuaGVhZGVycyk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zLnB1YmxpY0FwaUtleSkge1xuICAgICAgaGVhZGVyc1tcIngtY29waWxvdGNsb3VkLXB1YmxpYy1hcGkta2V5XCJdID0gb3B0aW9ucy5wdWJsaWNBcGlLZXk7XG4gICAgfVxuICAgIHRoaXMuY2xpZW50ID0gbmV3IENsaWVudCh7XG4gICAgICB1cmw6IG9wdGlvbnMudXJsLFxuICAgICAgZXhjaGFuZ2VzOiBbY2FjaGVFeGNoYW5nZSwgZmV0Y2hFeGNoYW5nZV0sXG4gICAgICBmZXRjaE9wdGlvbnM6IHtcbiAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgIC4uLmhlYWRlcnMsXG4gICAgICAgICAgXCJYLUNvcGlsb3RLaXQtUnVudGltZS1DbGllbnQtR1FMLVZlcnNpb25cIjogdmVyc2lvblxuICAgICAgICB9LFxuICAgICAgICAuLi5vcHRpb25zLmNyZWRlbnRpYWxzID8geyBjcmVkZW50aWFsczogb3B0aW9ucy5jcmVkZW50aWFscyB9IDoge31cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICBnZW5lcmF0ZUNvcGlsb3RSZXNwb25zZSh7XG4gICAgZGF0YSxcbiAgICBwcm9wZXJ0aWVzLFxuICAgIHNpZ25hbFxuICB9KSB7XG4gICAgY29uc3QgcmVzdWx0ID0gdGhpcy5jbGllbnQubXV0YXRpb24oXG4gICAgICBnZW5lcmF0ZUNvcGlsb3RSZXNwb25zZU11dGF0aW9uLFxuICAgICAgeyBkYXRhLCBwcm9wZXJ0aWVzIH0sXG4gICAgICB7IGZldGNoOiAodXJsLCBvcHRzKSA9PiBmZXRjaCh1cmwsIHsgLi4ub3B0cywgc2lnbmFsIH0pIH1cbiAgICApO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgYXNTdHJlYW0oc291cmNlKSB7XG4gICAgY29uc3QgaGFuZGxlR1FMRXJyb3JzID0gdGhpcy5oYW5kbGVHUUxFcnJvcnM7XG4gICAgcmV0dXJuIG5ldyBSZWFkYWJsZVN0cmVhbSh7XG4gICAgICBzdGFydChjb250cm9sbGVyKSB7XG4gICAgICAgIHNvdXJjZS5zdWJzY3JpYmUoKHsgZGF0YSwgaGFzTmV4dCwgZXJyb3IgfSkgPT4ge1xuICAgICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgY29udHJvbGxlci5lcnJvcihlcnJvcik7XG4gICAgICAgICAgICBpZiAoaGFuZGxlR1FMRXJyb3JzKSB7XG4gICAgICAgICAgICAgIGhhbmRsZUdRTEVycm9ycyhlcnJvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnRyb2xsZXIuZW5xdWV1ZShkYXRhKTtcbiAgICAgICAgICAgIGlmICghaGFzTmV4dCkge1xuICAgICAgICAgICAgICBjb250cm9sbGVyLmNsb3NlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufTtcblxuZXhwb3J0IHtcbiAgQ29waWxvdFJ1bnRpbWVDbGllbnRcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jaHVuay02SUczM0gyWi5tanMubWFwIl0sIm5hbWVzIjpbImdlbmVyYXRlQ29waWxvdFJlc3BvbnNlTXV0YXRpb24iLCJDbGllbnQiLCJjYWNoZUV4Y2hhbmdlIiwiZmV0Y2hFeGNoYW5nZSIsInZlcnNpb24iLCJDb3BpbG90UnVudGltZUNsaWVudCIsImdlbmVyYXRlQ29waWxvdFJlc3BvbnNlIiwiZGF0YSIsInByb3BlcnRpZXMiLCJzaWduYWwiLCJyZXN1bHQiLCJjbGllbnQiLCJtdXRhdGlvbiIsImZldGNoIiwidXJsIiwib3B0cyIsImFzU3RyZWFtIiwic291cmNlIiwiaGFuZGxlR1FMRXJyb3JzIiwiUmVhZGFibGVTdHJlYW0iLCJzdGFydCIsImNvbnRyb2xsZXIiLCJzdWJzY3JpYmUiLCJoYXNOZXh0IiwiZXJyb3IiLCJlbnF1ZXVlIiwiY2xvc2UiLCJjb25zdHJ1Y3RvciIsIm9wdGlvbnMiLCJoZWFkZXJzIiwiT2JqZWN0IiwiYXNzaWduIiwicHVibGljQXBpS2V5IiwiZXhjaGFuZ2VzIiwiZmV0Y2hPcHRpb25zIiwiY3JlZGVudGlhbHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@copilotkit/runtime-client-gql/dist/chunk-6IG33H2Z.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@copilotkit/runtime-client-gql/dist/chunk-GD5NLJQE.mjs":
/*!*****************************************************************************!*\
  !*** ./node_modules/@copilotkit/runtime-client-gql/dist/chunk-GD5NLJQE.mjs ***!
  \*****************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ActionExecutionMessage: function() { return /* binding */ ActionExecutionMessage; },\n/* harmony export */   AgentStateMessage: function() { return /* binding */ AgentStateMessage; },\n/* harmony export */   Message: function() { return /* binding */ Message; },\n/* harmony export */   ResultMessage: function() { return /* binding */ ResultMessage; },\n/* harmony export */   Role: function() { return /* binding */ Role; },\n/* harmony export */   TextMessage: function() { return /* binding */ TextMessage; }\n/* harmony export */ });\n/* harmony import */ var _chunk_OGFO6ZEP_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./chunk-OGFO6ZEP.mjs */ \"(app-pages-browser)/./node_modules/@copilotkit/runtime-client-gql/dist/chunk-OGFO6ZEP.mjs\");\n/* harmony import */ var _copilotkit_shared__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @copilotkit/shared */ \"(app-pages-browser)/./node_modules/@copilotkit/shared/dist/chunk-RIPX6APP.mjs\");\n\n// src/client/types.ts\n\nvar Message = class {\n    isTextMessage() {\n        return this.type === \"TextMessage\";\n    }\n    isActionExecutionMessage() {\n        return this.type === \"ActionExecutionMessage\";\n    }\n    isResultMessage() {\n        return this.type === \"ResultMessage\";\n    }\n    isAgentStateMessage() {\n        return this.type === \"AgentStateMessage\";\n    }\n    constructor(props){\n        var _props_id;\n        (_props_id = props.id) !== null && _props_id !== void 0 ? _props_id : props.id = (0,_copilotkit_shared__WEBPACK_IMPORTED_MODULE_0__.randomId)();\n        var _props_status;\n        (_props_status = props.status) !== null && _props_status !== void 0 ? _props_status : props.status = {\n            code: \"Success\" /* Success */ \n        };\n        var _props_createdAt;\n        (_props_createdAt = props.createdAt) !== null && _props_createdAt !== void 0 ? _props_createdAt : props.createdAt = /* @__PURE__ */ new Date();\n        Object.assign(this, props);\n    }\n};\nvar Role = _chunk_OGFO6ZEP_mjs__WEBPACK_IMPORTED_MODULE_1__.MessageRole;\nvar TextMessage = class extends Message {\n    constructor(props){\n        super(props);\n        this.type = \"TextMessage\";\n    }\n};\nvar ActionExecutionMessage = class extends Message {\n    constructor(props){\n        super(props);\n        this.type = \"ActionExecutionMessage\";\n    }\n};\nvar ResultMessage = class extends Message {\n    static decodeResult(result) {\n        try {\n            return JSON.parse(result);\n        } catch (e) {\n            return result;\n        }\n    }\n    static encodeResult(result) {\n        if (result === void 0) {\n            return \"\";\n        } else if (typeof result === \"string\") {\n            return result;\n        } else {\n            return JSON.stringify(result);\n        }\n    }\n    constructor(props){\n        super(props);\n        this.type = \"ResultMessage\";\n    }\n};\nvar AgentStateMessage = class extends Message {\n    constructor(props){\n        super(props);\n        this.type = \"AgentStateMessage\";\n    }\n};\n //# sourceMappingURL=chunk-GD5NLJQE.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AY29waWxvdGtpdC9ydW50aW1lLWNsaWVudC1ncWwvZGlzdC9jaHVuay1HRDVOTEpRRS5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFFOEI7QUFFOUIsc0JBQXNCO0FBQ3dCO0FBQzlDLElBQUlFLFVBQVU7SUFPWkMsZ0JBQWdCO1FBQ2QsT0FBTyxJQUFJLENBQUNDLElBQUksS0FBSztJQUN2QjtJQUNBQywyQkFBMkI7UUFDekIsT0FBTyxJQUFJLENBQUNELElBQUksS0FBSztJQUN2QjtJQUNBRSxrQkFBa0I7UUFDaEIsT0FBTyxJQUFJLENBQUNGLElBQUksS0FBSztJQUN2QjtJQUNBRyxzQkFBc0I7UUFDcEIsT0FBTyxJQUFJLENBQUNILElBQUksS0FBSztJQUN2QjtJQWpCQUksWUFBWUMsS0FBSyxDQUFFO1lBQ2pCQTtRQUFBQSxDQUFBQSxZQUFBQSxNQUFNQyxFQUFFLGNBQVJELHVCQUFBQSxZQUFhQSxNQUFNQyxFQUFFLEdBQUdULDREQUFRQTtZQUNoQ1E7UUFBQUEsQ0FBQUEsZ0JBQUFBLE1BQU1FLE1BQU0sY0FBWkYsMkJBQUFBLGdCQUFpQkEsTUFBTUUsTUFBTSxHQUFHO1lBQUVDLE1BQU0sVUFBVSxXQUFXO1FBQUc7WUFDaEVIO1FBQUFBLENBQUFBLG1CQUFBQSxNQUFNSSxTQUFTLGNBQWZKLDhCQUFBQSxtQkFBb0JBLE1BQU1JLFNBQVMsR0FBRyxhQUFhLEdBQUcsSUFBSUM7UUFDMURDLE9BQU9DLE1BQU0sQ0FBQyxJQUFJLEVBQUVQO0lBQ3RCO0FBYUY7QUFDQSxJQUFJUSxPQUFPakIsNERBQVdBO0FBQ3RCLElBQUlrQixjQUFjLGNBQWNoQjtJQUM5Qk0sWUFBWUMsS0FBSyxDQUFFO1FBQ2pCLEtBQUssQ0FBQ0E7UUFDTixJQUFJLENBQUNMLElBQUksR0FBRztJQUNkO0FBQ0Y7QUFDQSxJQUFJZSx5QkFBeUIsY0FBY2pCO0lBQ3pDTSxZQUFZQyxLQUFLLENBQUU7UUFDakIsS0FBSyxDQUFDQTtRQUNOLElBQUksQ0FBQ0wsSUFBSSxHQUFHO0lBQ2Q7QUFDRjtBQUNBLElBQUlnQixnQkFBZ0IsY0FBY2xCO0lBS2hDLE9BQU9tQixhQUFhQyxNQUFNLEVBQUU7UUFDMUIsSUFBSTtZQUNGLE9BQU9DLEtBQUtDLEtBQUssQ0FBQ0Y7UUFDcEIsRUFBRSxPQUFPRyxHQUFHO1lBQ1YsT0FBT0g7UUFDVDtJQUNGO0lBQ0EsT0FBT0ksYUFBYUosTUFBTSxFQUFFO1FBQzFCLElBQUlBLFdBQVcsS0FBSyxHQUFHO1lBQ3JCLE9BQU87UUFDVCxPQUFPLElBQUksT0FBT0EsV0FBVyxVQUFVO1lBQ3JDLE9BQU9BO1FBQ1QsT0FBTztZQUNMLE9BQU9DLEtBQUtJLFNBQVMsQ0FBQ0w7UUFDeEI7SUFDRjtJQW5CQWQsWUFBWUMsS0FBSyxDQUFFO1FBQ2pCLEtBQUssQ0FBQ0E7UUFDTixJQUFJLENBQUNMLElBQUksR0FBRztJQUNkO0FBaUJGO0FBQ0EsSUFBSXdCLG9CQUFvQixjQUFjMUI7SUFDcENNLFlBQVlDLEtBQUssQ0FBRTtRQUNqQixLQUFLLENBQUNBO1FBQ04sSUFBSSxDQUFDTCxJQUFJLEdBQUc7SUFDZDtBQUNGO0FBU0UsQ0FDRiwyQ0FBMkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0Bjb3BpbG90a2l0L3J1bnRpbWUtY2xpZW50LWdxbC9kaXN0L2NodW5rLUdENU5MSlFFLm1qcz9hNzljIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIE1lc3NhZ2VSb2xlXG59IGZyb20gXCIuL2NodW5rLU9HRk82WkVQLm1qc1wiO1xuXG4vLyBzcmMvY2xpZW50L3R5cGVzLnRzXG5pbXBvcnQgeyByYW5kb21JZCB9IGZyb20gXCJAY29waWxvdGtpdC9zaGFyZWRcIjtcbnZhciBNZXNzYWdlID0gY2xhc3Mge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHByb3BzLmlkID8/IChwcm9wcy5pZCA9IHJhbmRvbUlkKCkpO1xuICAgIHByb3BzLnN0YXR1cyA/PyAocHJvcHMuc3RhdHVzID0geyBjb2RlOiBcIlN1Y2Nlc3NcIiAvKiBTdWNjZXNzICovIH0pO1xuICAgIHByb3BzLmNyZWF0ZWRBdCA/PyAocHJvcHMuY3JlYXRlZEF0ID0gLyogQF9fUFVSRV9fICovIG5ldyBEYXRlKCkpO1xuICAgIE9iamVjdC5hc3NpZ24odGhpcywgcHJvcHMpO1xuICB9XG4gIGlzVGV4dE1lc3NhZ2UoKSB7XG4gICAgcmV0dXJuIHRoaXMudHlwZSA9PT0gXCJUZXh0TWVzc2FnZVwiO1xuICB9XG4gIGlzQWN0aW9uRXhlY3V0aW9uTWVzc2FnZSgpIHtcbiAgICByZXR1cm4gdGhpcy50eXBlID09PSBcIkFjdGlvbkV4ZWN1dGlvbk1lc3NhZ2VcIjtcbiAgfVxuICBpc1Jlc3VsdE1lc3NhZ2UoKSB7XG4gICAgcmV0dXJuIHRoaXMudHlwZSA9PT0gXCJSZXN1bHRNZXNzYWdlXCI7XG4gIH1cbiAgaXNBZ2VudFN0YXRlTWVzc2FnZSgpIHtcbiAgICByZXR1cm4gdGhpcy50eXBlID09PSBcIkFnZW50U3RhdGVNZXNzYWdlXCI7XG4gIH1cbn07XG52YXIgUm9sZSA9IE1lc3NhZ2VSb2xlO1xudmFyIFRleHRNZXNzYWdlID0gY2xhc3MgZXh0ZW5kcyBNZXNzYWdlIHtcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgdGhpcy50eXBlID0gXCJUZXh0TWVzc2FnZVwiO1xuICB9XG59O1xudmFyIEFjdGlvbkV4ZWN1dGlvbk1lc3NhZ2UgPSBjbGFzcyBleHRlbmRzIE1lc3NhZ2Uge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLnR5cGUgPSBcIkFjdGlvbkV4ZWN1dGlvbk1lc3NhZ2VcIjtcbiAgfVxufTtcbnZhciBSZXN1bHRNZXNzYWdlID0gY2xhc3MgZXh0ZW5kcyBNZXNzYWdlIHtcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgdGhpcy50eXBlID0gXCJSZXN1bHRNZXNzYWdlXCI7XG4gIH1cbiAgc3RhdGljIGRlY29kZVJlc3VsdChyZXN1bHQpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIEpTT04ucGFyc2UocmVzdWx0KTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgfVxuICBzdGF0aWMgZW5jb2RlUmVzdWx0KHJlc3VsdCkge1xuICAgIGlmIChyZXN1bHQgPT09IHZvaWQgMCkge1xuICAgICAgcmV0dXJuIFwiXCI7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgcmVzdWx0ID09PSBcInN0cmluZ1wiKSB7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkocmVzdWx0KTtcbiAgICB9XG4gIH1cbn07XG52YXIgQWdlbnRTdGF0ZU1lc3NhZ2UgPSBjbGFzcyBleHRlbmRzIE1lc3NhZ2Uge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLnR5cGUgPSBcIkFnZW50U3RhdGVNZXNzYWdlXCI7XG4gIH1cbn07XG5cbmV4cG9ydCB7XG4gIE1lc3NhZ2UsXG4gIFJvbGUsXG4gIFRleHRNZXNzYWdlLFxuICBBY3Rpb25FeGVjdXRpb25NZXNzYWdlLFxuICBSZXN1bHRNZXNzYWdlLFxuICBBZ2VudFN0YXRlTWVzc2FnZVxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNodW5rLUdENU5MSlFFLm1qcy5tYXAiXSwibmFtZXMiOlsiTWVzc2FnZVJvbGUiLCJyYW5kb21JZCIsIk1lc3NhZ2UiLCJpc1RleHRNZXNzYWdlIiwidHlwZSIsImlzQWN0aW9uRXhlY3V0aW9uTWVzc2FnZSIsImlzUmVzdWx0TWVzc2FnZSIsImlzQWdlbnRTdGF0ZU1lc3NhZ2UiLCJjb25zdHJ1Y3RvciIsInByb3BzIiwiaWQiLCJzdGF0dXMiLCJjb2RlIiwiY3JlYXRlZEF0IiwiRGF0ZSIsIk9iamVjdCIsImFzc2lnbiIsIlJvbGUiLCJUZXh0TWVzc2FnZSIsIkFjdGlvbkV4ZWN1dGlvbk1lc3NhZ2UiLCJSZXN1bHRNZXNzYWdlIiwiZGVjb2RlUmVzdWx0IiwicmVzdWx0IiwiSlNPTiIsInBhcnNlIiwiZSIsImVuY29kZVJlc3VsdCIsInN0cmluZ2lmeSIsIkFnZW50U3RhdGVNZXNzYWdlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@copilotkit/runtime-client-gql/dist/chunk-GD5NLJQE.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@copilotkit/runtime-client-gql/dist/chunk-MNJB3NHD.mjs":
/*!*****************************************************************************!*\
  !*** ./node_modules/@copilotkit/runtime-client-gql/dist/chunk-MNJB3NHD.mjs ***!
  \*****************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   generateCopilotResponseMutation: function() { return /* binding */ generateCopilotResponseMutation; }\n/* harmony export */ });\n/* harmony import */ var _chunk_OGFO6ZEP_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunk-OGFO6ZEP.mjs */ \"(app-pages-browser)/./node_modules/@copilotkit/runtime-client-gql/dist/chunk-OGFO6ZEP.mjs\");\n\n// src/graphql/@generated/gql.ts\nvar documents = {\n    \"\\n  mutation generateCopilotResponse($data: GenerateCopilotResponseInput!, $properties: JSONObject) {\\n    generateCopilotResponse(data: $data, properties: $properties) {\\n      threadId\\n      runId\\n      ... on CopilotResponse @defer {\\n        status {\\n          ... on BaseResponseStatus {\\n            code\\n          }\\n          ... on FailedResponseStatus {\\n            reason\\n            details\\n          }\\n        }\\n      }\\n      messages @stream {\\n        __typename\\n        ... on BaseMessageOutput {\\n          id\\n          createdAt\\n        }\\n        ... on BaseMessageOutput @defer {\\n          status {\\n            ... on SuccessMessageStatus {\\n              code\\n            }\\n            ... on FailedMessageStatus {\\n              code\\n              reason\\n            }\\n            ... on PendingMessageStatus {\\n              code\\n            }\\n          }\\n        }\\n        ... on TextMessageOutput {\\n          content @stream\\n          role\\n        }\\n        ... on ActionExecutionMessageOutput {\\n          name\\n          scope\\n          arguments @stream\\n        }\\n        ... on ResultMessageOutput {\\n          result\\n          actionExecutionId\\n          actionName\\n        }\\n        ... on AgentStateMessageOutput {\\n          threadId\\n          state\\n          running\\n          agentName\\n          nodeName\\n          runId\\n          active\\n          role\\n        }\\n      }\\n    }\\n  }\\n\": _chunk_OGFO6ZEP_mjs__WEBPACK_IMPORTED_MODULE_0__.GenerateCopilotResponseDocument\n};\nfunction graphql(source) {\n    var _documents_source;\n    return (_documents_source = documents[source]) !== null && _documents_source !== void 0 ? _documents_source : {};\n}\n// src/graphql/definitions/mutations.ts\nvar generateCopilotResponseMutation = graphql(\"\\n  mutation generateCopilotResponse($data: GenerateCopilotResponseInput!, $properties: JSONObject) {\\n    generateCopilotResponse(data: $data, properties: $properties) {\\n      threadId\\n      runId\\n      ... on CopilotResponse @defer {\\n        status {\\n          ... on BaseResponseStatus {\\n            code\\n          }\\n          ... on FailedResponseStatus {\\n            reason\\n            details\\n          }\\n        }\\n      }\\n      messages @stream {\\n        __typename\\n        ... on BaseMessageOutput {\\n          id\\n          createdAt\\n        }\\n        ... on BaseMessageOutput @defer {\\n          status {\\n            ... on SuccessMessageStatus {\\n              code\\n            }\\n            ... on FailedMessageStatus {\\n              code\\n              reason\\n            }\\n            ... on PendingMessageStatus {\\n              code\\n            }\\n          }\\n        }\\n        ... on TextMessageOutput {\\n          content @stream\\n          role\\n        }\\n        ... on ActionExecutionMessageOutput {\\n          name\\n          scope\\n          arguments @stream\\n        }\\n        ... on ResultMessageOutput {\\n          result\\n          actionExecutionId\\n          actionName\\n        }\\n        ... on AgentStateMessageOutput {\\n          threadId\\n          state\\n          running\\n          agentName\\n          nodeName\\n          runId\\n          active\\n          role\\n        }\\n      }\\n    }\\n  }\\n\");\n //# sourceMappingURL=chunk-MNJB3NHD.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AY29waWxvdGtpdC9ydW50aW1lLWNsaWVudC1ncWwvZGlzdC9jaHVuay1NTkpCM05IRC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFFOEI7QUFFOUIsZ0NBQWdDO0FBQ2hDLElBQUlDLFlBQVk7SUFDZCwyN0NBQTI3Q0QsZ0ZBQStCQTtBQUM1OUM7QUFDQSxTQUFTRSxRQUFRQyxNQUFNO1FBQ2RGO0lBQVAsT0FBT0EsQ0FBQUEsb0JBQUFBLFNBQVMsQ0FBQ0UsT0FBTyxjQUFqQkYsK0JBQUFBLG9CQUFxQixDQUFDO0FBQy9CO0FBRUEsdUNBQXVDO0FBQ3ZDLElBQUlHLGtDQUFrQ0YsUUFFbkM7QUFvRUQsQ0FDRiwyQ0FBMkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0Bjb3BpbG90a2l0L3J1bnRpbWUtY2xpZW50LWdxbC9kaXN0L2NodW5rLU1OSkIzTkhELm1qcz9iMTcxIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIEdlbmVyYXRlQ29waWxvdFJlc3BvbnNlRG9jdW1lbnRcbn0gZnJvbSBcIi4vY2h1bmstT0dGTzZaRVAubWpzXCI7XG5cbi8vIHNyYy9ncmFwaHFsL0BnZW5lcmF0ZWQvZ3FsLnRzXG52YXIgZG9jdW1lbnRzID0ge1xuICBcIlxcbiAgbXV0YXRpb24gZ2VuZXJhdGVDb3BpbG90UmVzcG9uc2UoJGRhdGE6IEdlbmVyYXRlQ29waWxvdFJlc3BvbnNlSW5wdXQhLCAkcHJvcGVydGllczogSlNPTk9iamVjdCkge1xcbiAgICBnZW5lcmF0ZUNvcGlsb3RSZXNwb25zZShkYXRhOiAkZGF0YSwgcHJvcGVydGllczogJHByb3BlcnRpZXMpIHtcXG4gICAgICB0aHJlYWRJZFxcbiAgICAgIHJ1bklkXFxuICAgICAgLi4uIG9uIENvcGlsb3RSZXNwb25zZSBAZGVmZXIge1xcbiAgICAgICAgc3RhdHVzIHtcXG4gICAgICAgICAgLi4uIG9uIEJhc2VSZXNwb25zZVN0YXR1cyB7XFxuICAgICAgICAgICAgY29kZVxcbiAgICAgICAgICB9XFxuICAgICAgICAgIC4uLiBvbiBGYWlsZWRSZXNwb25zZVN0YXR1cyB7XFxuICAgICAgICAgICAgcmVhc29uXFxuICAgICAgICAgICAgZGV0YWlsc1xcbiAgICAgICAgICB9XFxuICAgICAgICB9XFxuICAgICAgfVxcbiAgICAgIG1lc3NhZ2VzIEBzdHJlYW0ge1xcbiAgICAgICAgX190eXBlbmFtZVxcbiAgICAgICAgLi4uIG9uIEJhc2VNZXNzYWdlT3V0cHV0IHtcXG4gICAgICAgICAgaWRcXG4gICAgICAgICAgY3JlYXRlZEF0XFxuICAgICAgICB9XFxuICAgICAgICAuLi4gb24gQmFzZU1lc3NhZ2VPdXRwdXQgQGRlZmVyIHtcXG4gICAgICAgICAgc3RhdHVzIHtcXG4gICAgICAgICAgICAuLi4gb24gU3VjY2Vzc01lc3NhZ2VTdGF0dXMge1xcbiAgICAgICAgICAgICAgY29kZVxcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAuLi4gb24gRmFpbGVkTWVzc2FnZVN0YXR1cyB7XFxuICAgICAgICAgICAgICBjb2RlXFxuICAgICAgICAgICAgICByZWFzb25cXG4gICAgICAgICAgICB9XFxuICAgICAgICAgICAgLi4uIG9uIFBlbmRpbmdNZXNzYWdlU3RhdHVzIHtcXG4gICAgICAgICAgICAgIGNvZGVcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgIH1cXG4gICAgICAgIH1cXG4gICAgICAgIC4uLiBvbiBUZXh0TWVzc2FnZU91dHB1dCB7XFxuICAgICAgICAgIGNvbnRlbnQgQHN0cmVhbVxcbiAgICAgICAgICByb2xlXFxuICAgICAgICB9XFxuICAgICAgICAuLi4gb24gQWN0aW9uRXhlY3V0aW9uTWVzc2FnZU91dHB1dCB7XFxuICAgICAgICAgIG5hbWVcXG4gICAgICAgICAgc2NvcGVcXG4gICAgICAgICAgYXJndW1lbnRzIEBzdHJlYW1cXG4gICAgICAgIH1cXG4gICAgICAgIC4uLiBvbiBSZXN1bHRNZXNzYWdlT3V0cHV0IHtcXG4gICAgICAgICAgcmVzdWx0XFxuICAgICAgICAgIGFjdGlvbkV4ZWN1dGlvbklkXFxuICAgICAgICAgIGFjdGlvbk5hbWVcXG4gICAgICAgIH1cXG4gICAgICAgIC4uLiBvbiBBZ2VudFN0YXRlTWVzc2FnZU91dHB1dCB7XFxuICAgICAgICAgIHRocmVhZElkXFxuICAgICAgICAgIHN0YXRlXFxuICAgICAgICAgIHJ1bm5pbmdcXG4gICAgICAgICAgYWdlbnROYW1lXFxuICAgICAgICAgIG5vZGVOYW1lXFxuICAgICAgICAgIHJ1bklkXFxuICAgICAgICAgIGFjdGl2ZVxcbiAgICAgICAgICByb2xlXFxuICAgICAgICB9XFxuICAgICAgfVxcbiAgICB9XFxuICB9XFxuXCI6IEdlbmVyYXRlQ29waWxvdFJlc3BvbnNlRG9jdW1lbnRcbn07XG5mdW5jdGlvbiBncmFwaHFsKHNvdXJjZSkge1xuICByZXR1cm4gZG9jdW1lbnRzW3NvdXJjZV0gPz8ge307XG59XG5cbi8vIHNyYy9ncmFwaHFsL2RlZmluaXRpb25zL211dGF0aW9ucy50c1xudmFyIGdlbmVyYXRlQ29waWxvdFJlc3BvbnNlTXV0YXRpb24gPSBncmFwaHFsKFxuICAvKiogR3JhcGhRTCAqKi9cbiAgYFxuICBtdXRhdGlvbiBnZW5lcmF0ZUNvcGlsb3RSZXNwb25zZSgkZGF0YTogR2VuZXJhdGVDb3BpbG90UmVzcG9uc2VJbnB1dCEsICRwcm9wZXJ0aWVzOiBKU09OT2JqZWN0KSB7XG4gICAgZ2VuZXJhdGVDb3BpbG90UmVzcG9uc2UoZGF0YTogJGRhdGEsIHByb3BlcnRpZXM6ICRwcm9wZXJ0aWVzKSB7XG4gICAgICB0aHJlYWRJZFxuICAgICAgcnVuSWRcbiAgICAgIC4uLiBvbiBDb3BpbG90UmVzcG9uc2UgQGRlZmVyIHtcbiAgICAgICAgc3RhdHVzIHtcbiAgICAgICAgICAuLi4gb24gQmFzZVJlc3BvbnNlU3RhdHVzIHtcbiAgICAgICAgICAgIGNvZGVcbiAgICAgICAgICB9XG4gICAgICAgICAgLi4uIG9uIEZhaWxlZFJlc3BvbnNlU3RhdHVzIHtcbiAgICAgICAgICAgIHJlYXNvblxuICAgICAgICAgICAgZGV0YWlsc1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgbWVzc2FnZXMgQHN0cmVhbSB7XG4gICAgICAgIF9fdHlwZW5hbWVcbiAgICAgICAgLi4uIG9uIEJhc2VNZXNzYWdlT3V0cHV0IHtcbiAgICAgICAgICBpZFxuICAgICAgICAgIGNyZWF0ZWRBdFxuICAgICAgICB9XG4gICAgICAgIC4uLiBvbiBCYXNlTWVzc2FnZU91dHB1dCBAZGVmZXIge1xuICAgICAgICAgIHN0YXR1cyB7XG4gICAgICAgICAgICAuLi4gb24gU3VjY2Vzc01lc3NhZ2VTdGF0dXMge1xuICAgICAgICAgICAgICBjb2RlXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAuLi4gb24gRmFpbGVkTWVzc2FnZVN0YXR1cyB7XG4gICAgICAgICAgICAgIGNvZGVcbiAgICAgICAgICAgICAgcmVhc29uXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAuLi4gb24gUGVuZGluZ01lc3NhZ2VTdGF0dXMge1xuICAgICAgICAgICAgICBjb2RlXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC4uLiBvbiBUZXh0TWVzc2FnZU91dHB1dCB7XG4gICAgICAgICAgY29udGVudCBAc3RyZWFtXG4gICAgICAgICAgcm9sZVxuICAgICAgICB9XG4gICAgICAgIC4uLiBvbiBBY3Rpb25FeGVjdXRpb25NZXNzYWdlT3V0cHV0IHtcbiAgICAgICAgICBuYW1lXG4gICAgICAgICAgc2NvcGVcbiAgICAgICAgICBhcmd1bWVudHMgQHN0cmVhbVxuICAgICAgICB9XG4gICAgICAgIC4uLiBvbiBSZXN1bHRNZXNzYWdlT3V0cHV0IHtcbiAgICAgICAgICByZXN1bHRcbiAgICAgICAgICBhY3Rpb25FeGVjdXRpb25JZFxuICAgICAgICAgIGFjdGlvbk5hbWVcbiAgICAgICAgfVxuICAgICAgICAuLi4gb24gQWdlbnRTdGF0ZU1lc3NhZ2VPdXRwdXQge1xuICAgICAgICAgIHRocmVhZElkXG4gICAgICAgICAgc3RhdGVcbiAgICAgICAgICBydW5uaW5nXG4gICAgICAgICAgYWdlbnROYW1lXG4gICAgICAgICAgbm9kZU5hbWVcbiAgICAgICAgICBydW5JZFxuICAgICAgICAgIGFjdGl2ZVxuICAgICAgICAgIHJvbGVcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuYFxuKTtcblxuZXhwb3J0IHtcbiAgZ2VuZXJhdGVDb3BpbG90UmVzcG9uc2VNdXRhdGlvblxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNodW5rLU1OSkIzTkhELm1qcy5tYXAiXSwibmFtZXMiOlsiR2VuZXJhdGVDb3BpbG90UmVzcG9uc2VEb2N1bWVudCIsImRvY3VtZW50cyIsImdyYXBocWwiLCJzb3VyY2UiLCJnZW5lcmF0ZUNvcGlsb3RSZXNwb25zZU11dGF0aW9uIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@copilotkit/runtime-client-gql/dist/chunk-MNJB3NHD.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@copilotkit/runtime-client-gql/dist/chunk-OGFO6ZEP.mjs":
/*!*****************************************************************************!*\
  !*** ./node_modules/@copilotkit/runtime-client-gql/dist/chunk-OGFO6ZEP.mjs ***!
  \*****************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ActionExecutionScope: function() { return /* binding */ ActionExecutionScope; },\n/* harmony export */   ActionInputAvailability: function() { return /* binding */ ActionInputAvailability; },\n/* harmony export */   CopilotRequestType: function() { return /* binding */ CopilotRequestType; },\n/* harmony export */   FailedResponseStatusReason: function() { return /* binding */ FailedResponseStatusReason; },\n/* harmony export */   GenerateCopilotResponseDocument: function() { return /* binding */ GenerateCopilotResponseDocument; },\n/* harmony export */   MessageRole: function() { return /* binding */ MessageRole; },\n/* harmony export */   MessageStatusCode: function() { return /* binding */ MessageStatusCode; },\n/* harmony export */   ResponseStatusCode: function() { return /* binding */ ResponseStatusCode; }\n/* harmony export */ });\n// src/graphql/@generated/graphql.ts\nvar ActionExecutionScope = /* @__PURE__ */ ((ActionExecutionScope2)=>{\n    ActionExecutionScope2[\"Client\"] = \"client\";\n    ActionExecutionScope2[\"PassThrough\"] = \"passThrough\";\n    ActionExecutionScope2[\"Server\"] = \"server\";\n    return ActionExecutionScope2;\n})(ActionExecutionScope || {});\nvar ActionInputAvailability = /* @__PURE__ */ ((ActionInputAvailability2)=>{\n    ActionInputAvailability2[\"Disabled\"] = \"disabled\";\n    ActionInputAvailability2[\"Enabled\"] = \"enabled\";\n    ActionInputAvailability2[\"Remote\"] = \"remote\";\n    return ActionInputAvailability2;\n})(ActionInputAvailability || {});\nvar CopilotRequestType = /* @__PURE__ */ ((CopilotRequestType2)=>{\n    CopilotRequestType2[\"Chat\"] = \"Chat\";\n    CopilotRequestType2[\"Suggestion\"] = \"Suggestion\";\n    CopilotRequestType2[\"Task\"] = \"Task\";\n    CopilotRequestType2[\"TextareaCompletion\"] = \"TextareaCompletion\";\n    CopilotRequestType2[\"TextareaPopover\"] = \"TextareaPopover\";\n    return CopilotRequestType2;\n})(CopilotRequestType || {});\nvar FailedResponseStatusReason = /* @__PURE__ */ ((FailedResponseStatusReason2)=>{\n    FailedResponseStatusReason2[\"GuardrailsValidationFailed\"] = \"GUARDRAILS_VALIDATION_FAILED\";\n    FailedResponseStatusReason2[\"MessageStreamInterrupted\"] = \"MESSAGE_STREAM_INTERRUPTED\";\n    FailedResponseStatusReason2[\"UnknownError\"] = \"UNKNOWN_ERROR\";\n    return FailedResponseStatusReason2;\n})(FailedResponseStatusReason || {});\nvar MessageRole = /* @__PURE__ */ ((MessageRole2)=>{\n    MessageRole2[\"Assistant\"] = \"assistant\";\n    MessageRole2[\"System\"] = \"system\";\n    MessageRole2[\"Tool\"] = \"tool\";\n    MessageRole2[\"User\"] = \"user\";\n    return MessageRole2;\n})(MessageRole || {});\nvar MessageStatusCode = /* @__PURE__ */ ((MessageStatusCode2)=>{\n    MessageStatusCode2[\"Failed\"] = \"Failed\";\n    MessageStatusCode2[\"Pending\"] = \"Pending\";\n    MessageStatusCode2[\"Success\"] = \"Success\";\n    return MessageStatusCode2;\n})(MessageStatusCode || {});\nvar ResponseStatusCode = /* @__PURE__ */ ((ResponseStatusCode2)=>{\n    ResponseStatusCode2[\"Failed\"] = \"Failed\";\n    ResponseStatusCode2[\"Pending\"] = \"Pending\";\n    ResponseStatusCode2[\"Success\"] = \"Success\";\n    return ResponseStatusCode2;\n})(ResponseStatusCode || {});\nvar GenerateCopilotResponseDocument = {\n    \"kind\": \"Document\",\n    \"definitions\": [\n        {\n            \"kind\": \"OperationDefinition\",\n            \"operation\": \"mutation\",\n            \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"generateCopilotResponse\"\n            },\n            \"variableDefinitions\": [\n                {\n                    \"kind\": \"VariableDefinition\",\n                    \"variable\": {\n                        \"kind\": \"Variable\",\n                        \"name\": {\n                            \"kind\": \"Name\",\n                            \"value\": \"data\"\n                        }\n                    },\n                    \"type\": {\n                        \"kind\": \"NonNullType\",\n                        \"type\": {\n                            \"kind\": \"NamedType\",\n                            \"name\": {\n                                \"kind\": \"Name\",\n                                \"value\": \"GenerateCopilotResponseInput\"\n                            }\n                        }\n                    }\n                },\n                {\n                    \"kind\": \"VariableDefinition\",\n                    \"variable\": {\n                        \"kind\": \"Variable\",\n                        \"name\": {\n                            \"kind\": \"Name\",\n                            \"value\": \"properties\"\n                        }\n                    },\n                    \"type\": {\n                        \"kind\": \"NamedType\",\n                        \"name\": {\n                            \"kind\": \"Name\",\n                            \"value\": \"JSONObject\"\n                        }\n                    }\n                }\n            ],\n            \"selectionSet\": {\n                \"kind\": \"SelectionSet\",\n                \"selections\": [\n                    {\n                        \"kind\": \"Field\",\n                        \"name\": {\n                            \"kind\": \"Name\",\n                            \"value\": \"generateCopilotResponse\"\n                        },\n                        \"arguments\": [\n                            {\n                                \"kind\": \"Argument\",\n                                \"name\": {\n                                    \"kind\": \"Name\",\n                                    \"value\": \"data\"\n                                },\n                                \"value\": {\n                                    \"kind\": \"Variable\",\n                                    \"name\": {\n                                        \"kind\": \"Name\",\n                                        \"value\": \"data\"\n                                    }\n                                }\n                            },\n                            {\n                                \"kind\": \"Argument\",\n                                \"name\": {\n                                    \"kind\": \"Name\",\n                                    \"value\": \"properties\"\n                                },\n                                \"value\": {\n                                    \"kind\": \"Variable\",\n                                    \"name\": {\n                                        \"kind\": \"Name\",\n                                        \"value\": \"properties\"\n                                    }\n                                }\n                            }\n                        ],\n                        \"selectionSet\": {\n                            \"kind\": \"SelectionSet\",\n                            \"selections\": [\n                                {\n                                    \"kind\": \"Field\",\n                                    \"name\": {\n                                        \"kind\": \"Name\",\n                                        \"value\": \"threadId\"\n                                    }\n                                },\n                                {\n                                    \"kind\": \"Field\",\n                                    \"name\": {\n                                        \"kind\": \"Name\",\n                                        \"value\": \"runId\"\n                                    }\n                                },\n                                {\n                                    \"kind\": \"InlineFragment\",\n                                    \"typeCondition\": {\n                                        \"kind\": \"NamedType\",\n                                        \"name\": {\n                                            \"kind\": \"Name\",\n                                            \"value\": \"CopilotResponse\"\n                                        }\n                                    },\n                                    \"directives\": [\n                                        {\n                                            \"kind\": \"Directive\",\n                                            \"name\": {\n                                                \"kind\": \"Name\",\n                                                \"value\": \"defer\"\n                                            }\n                                        }\n                                    ],\n                                    \"selectionSet\": {\n                                        \"kind\": \"SelectionSet\",\n                                        \"selections\": [\n                                            {\n                                                \"kind\": \"Field\",\n                                                \"name\": {\n                                                    \"kind\": \"Name\",\n                                                    \"value\": \"status\"\n                                                },\n                                                \"selectionSet\": {\n                                                    \"kind\": \"SelectionSet\",\n                                                    \"selections\": [\n                                                        {\n                                                            \"kind\": \"InlineFragment\",\n                                                            \"typeCondition\": {\n                                                                \"kind\": \"NamedType\",\n                                                                \"name\": {\n                                                                    \"kind\": \"Name\",\n                                                                    \"value\": \"BaseResponseStatus\"\n                                                                }\n                                                            },\n                                                            \"selectionSet\": {\n                                                                \"kind\": \"SelectionSet\",\n                                                                \"selections\": [\n                                                                    {\n                                                                        \"kind\": \"Field\",\n                                                                        \"name\": {\n                                                                            \"kind\": \"Name\",\n                                                                            \"value\": \"code\"\n                                                                        }\n                                                                    }\n                                                                ]\n                                                            }\n                                                        },\n                                                        {\n                                                            \"kind\": \"InlineFragment\",\n                                                            \"typeCondition\": {\n                                                                \"kind\": \"NamedType\",\n                                                                \"name\": {\n                                                                    \"kind\": \"Name\",\n                                                                    \"value\": \"FailedResponseStatus\"\n                                                                }\n                                                            },\n                                                            \"selectionSet\": {\n                                                                \"kind\": \"SelectionSet\",\n                                                                \"selections\": [\n                                                                    {\n                                                                        \"kind\": \"Field\",\n                                                                        \"name\": {\n                                                                            \"kind\": \"Name\",\n                                                                            \"value\": \"reason\"\n                                                                        }\n                                                                    },\n                                                                    {\n                                                                        \"kind\": \"Field\",\n                                                                        \"name\": {\n                                                                            \"kind\": \"Name\",\n                                                                            \"value\": \"details\"\n                                                                        }\n                                                                    }\n                                                                ]\n                                                            }\n                                                        }\n                                                    ]\n                                                }\n                                            }\n                                        ]\n                                    }\n                                },\n                                {\n                                    \"kind\": \"Field\",\n                                    \"name\": {\n                                        \"kind\": \"Name\",\n                                        \"value\": \"messages\"\n                                    },\n                                    \"directives\": [\n                                        {\n                                            \"kind\": \"Directive\",\n                                            \"name\": {\n                                                \"kind\": \"Name\",\n                                                \"value\": \"stream\"\n                                            }\n                                        }\n                                    ],\n                                    \"selectionSet\": {\n                                        \"kind\": \"SelectionSet\",\n                                        \"selections\": [\n                                            {\n                                                \"kind\": \"Field\",\n                                                \"name\": {\n                                                    \"kind\": \"Name\",\n                                                    \"value\": \"__typename\"\n                                                }\n                                            },\n                                            {\n                                                \"kind\": \"InlineFragment\",\n                                                \"typeCondition\": {\n                                                    \"kind\": \"NamedType\",\n                                                    \"name\": {\n                                                        \"kind\": \"Name\",\n                                                        \"value\": \"BaseMessageOutput\"\n                                                    }\n                                                },\n                                                \"selectionSet\": {\n                                                    \"kind\": \"SelectionSet\",\n                                                    \"selections\": [\n                                                        {\n                                                            \"kind\": \"Field\",\n                                                            \"name\": {\n                                                                \"kind\": \"Name\",\n                                                                \"value\": \"id\"\n                                                            }\n                                                        },\n                                                        {\n                                                            \"kind\": \"Field\",\n                                                            \"name\": {\n                                                                \"kind\": \"Name\",\n                                                                \"value\": \"createdAt\"\n                                                            }\n                                                        }\n                                                    ]\n                                                }\n                                            },\n                                            {\n                                                \"kind\": \"InlineFragment\",\n                                                \"typeCondition\": {\n                                                    \"kind\": \"NamedType\",\n                                                    \"name\": {\n                                                        \"kind\": \"Name\",\n                                                        \"value\": \"BaseMessageOutput\"\n                                                    }\n                                                },\n                                                \"directives\": [\n                                                    {\n                                                        \"kind\": \"Directive\",\n                                                        \"name\": {\n                                                            \"kind\": \"Name\",\n                                                            \"value\": \"defer\"\n                                                        }\n                                                    }\n                                                ],\n                                                \"selectionSet\": {\n                                                    \"kind\": \"SelectionSet\",\n                                                    \"selections\": [\n                                                        {\n                                                            \"kind\": \"Field\",\n                                                            \"name\": {\n                                                                \"kind\": \"Name\",\n                                                                \"value\": \"status\"\n                                                            },\n                                                            \"selectionSet\": {\n                                                                \"kind\": \"SelectionSet\",\n                                                                \"selections\": [\n                                                                    {\n                                                                        \"kind\": \"InlineFragment\",\n                                                                        \"typeCondition\": {\n                                                                            \"kind\": \"NamedType\",\n                                                                            \"name\": {\n                                                                                \"kind\": \"Name\",\n                                                                                \"value\": \"SuccessMessageStatus\"\n                                                                            }\n                                                                        },\n                                                                        \"selectionSet\": {\n                                                                            \"kind\": \"SelectionSet\",\n                                                                            \"selections\": [\n                                                                                {\n                                                                                    \"kind\": \"Field\",\n                                                                                    \"name\": {\n                                                                                        \"kind\": \"Name\",\n                                                                                        \"value\": \"code\"\n                                                                                    }\n                                                                                }\n                                                                            ]\n                                                                        }\n                                                                    },\n                                                                    {\n                                                                        \"kind\": \"InlineFragment\",\n                                                                        \"typeCondition\": {\n                                                                            \"kind\": \"NamedType\",\n                                                                            \"name\": {\n                                                                                \"kind\": \"Name\",\n                                                                                \"value\": \"FailedMessageStatus\"\n                                                                            }\n                                                                        },\n                                                                        \"selectionSet\": {\n                                                                            \"kind\": \"SelectionSet\",\n                                                                            \"selections\": [\n                                                                                {\n                                                                                    \"kind\": \"Field\",\n                                                                                    \"name\": {\n                                                                                        \"kind\": \"Name\",\n                                                                                        \"value\": \"code\"\n                                                                                    }\n                                                                                },\n                                                                                {\n                                                                                    \"kind\": \"Field\",\n                                                                                    \"name\": {\n                                                                                        \"kind\": \"Name\",\n                                                                                        \"value\": \"reason\"\n                                                                                    }\n                                                                                }\n                                                                            ]\n                                                                        }\n                                                                    },\n                                                                    {\n                                                                        \"kind\": \"InlineFragment\",\n                                                                        \"typeCondition\": {\n                                                                            \"kind\": \"NamedType\",\n                                                                            \"name\": {\n                                                                                \"kind\": \"Name\",\n                                                                                \"value\": \"PendingMessageStatus\"\n                                                                            }\n                                                                        },\n                                                                        \"selectionSet\": {\n                                                                            \"kind\": \"SelectionSet\",\n                                                                            \"selections\": [\n                                                                                {\n                                                                                    \"kind\": \"Field\",\n                                                                                    \"name\": {\n                                                                                        \"kind\": \"Name\",\n                                                                                        \"value\": \"code\"\n                                                                                    }\n                                                                                }\n                                                                            ]\n                                                                        }\n                                                                    }\n                                                                ]\n                                                            }\n                                                        }\n                                                    ]\n                                                }\n                                            },\n                                            {\n                                                \"kind\": \"InlineFragment\",\n                                                \"typeCondition\": {\n                                                    \"kind\": \"NamedType\",\n                                                    \"name\": {\n                                                        \"kind\": \"Name\",\n                                                        \"value\": \"TextMessageOutput\"\n                                                    }\n                                                },\n                                                \"selectionSet\": {\n                                                    \"kind\": \"SelectionSet\",\n                                                    \"selections\": [\n                                                        {\n                                                            \"kind\": \"Field\",\n                                                            \"name\": {\n                                                                \"kind\": \"Name\",\n                                                                \"value\": \"content\"\n                                                            },\n                                                            \"directives\": [\n                                                                {\n                                                                    \"kind\": \"Directive\",\n                                                                    \"name\": {\n                                                                        \"kind\": \"Name\",\n                                                                        \"value\": \"stream\"\n                                                                    }\n                                                                }\n                                                            ]\n                                                        },\n                                                        {\n                                                            \"kind\": \"Field\",\n                                                            \"name\": {\n                                                                \"kind\": \"Name\",\n                                                                \"value\": \"role\"\n                                                            }\n                                                        }\n                                                    ]\n                                                }\n                                            },\n                                            {\n                                                \"kind\": \"InlineFragment\",\n                                                \"typeCondition\": {\n                                                    \"kind\": \"NamedType\",\n                                                    \"name\": {\n                                                        \"kind\": \"Name\",\n                                                        \"value\": \"ActionExecutionMessageOutput\"\n                                                    }\n                                                },\n                                                \"selectionSet\": {\n                                                    \"kind\": \"SelectionSet\",\n                                                    \"selections\": [\n                                                        {\n                                                            \"kind\": \"Field\",\n                                                            \"name\": {\n                                                                \"kind\": \"Name\",\n                                                                \"value\": \"name\"\n                                                            }\n                                                        },\n                                                        {\n                                                            \"kind\": \"Field\",\n                                                            \"name\": {\n                                                                \"kind\": \"Name\",\n                                                                \"value\": \"scope\"\n                                                            }\n                                                        },\n                                                        {\n                                                            \"kind\": \"Field\",\n                                                            \"name\": {\n                                                                \"kind\": \"Name\",\n                                                                \"value\": \"arguments\"\n                                                            },\n                                                            \"directives\": [\n                                                                {\n                                                                    \"kind\": \"Directive\",\n                                                                    \"name\": {\n                                                                        \"kind\": \"Name\",\n                                                                        \"value\": \"stream\"\n                                                                    }\n                                                                }\n                                                            ]\n                                                        }\n                                                    ]\n                                                }\n                                            },\n                                            {\n                                                \"kind\": \"InlineFragment\",\n                                                \"typeCondition\": {\n                                                    \"kind\": \"NamedType\",\n                                                    \"name\": {\n                                                        \"kind\": \"Name\",\n                                                        \"value\": \"ResultMessageOutput\"\n                                                    }\n                                                },\n                                                \"selectionSet\": {\n                                                    \"kind\": \"SelectionSet\",\n                                                    \"selections\": [\n                                                        {\n                                                            \"kind\": \"Field\",\n                                                            \"name\": {\n                                                                \"kind\": \"Name\",\n                                                                \"value\": \"result\"\n                                                            }\n                                                        },\n                                                        {\n                                                            \"kind\": \"Field\",\n                                                            \"name\": {\n                                                                \"kind\": \"Name\",\n                                                                \"value\": \"actionExecutionId\"\n                                                            }\n                                                        },\n                                                        {\n                                                            \"kind\": \"Field\",\n                                                            \"name\": {\n                                                                \"kind\": \"Name\",\n                                                                \"value\": \"actionName\"\n                                                            }\n                                                        }\n                                                    ]\n                                                }\n                                            },\n                                            {\n                                                \"kind\": \"InlineFragment\",\n                                                \"typeCondition\": {\n                                                    \"kind\": \"NamedType\",\n                                                    \"name\": {\n                                                        \"kind\": \"Name\",\n                                                        \"value\": \"AgentStateMessageOutput\"\n                                                    }\n                                                },\n                                                \"selectionSet\": {\n                                                    \"kind\": \"SelectionSet\",\n                                                    \"selections\": [\n                                                        {\n                                                            \"kind\": \"Field\",\n                                                            \"name\": {\n                                                                \"kind\": \"Name\",\n                                                                \"value\": \"threadId\"\n                                                            }\n                                                        },\n                                                        {\n                                                            \"kind\": \"Field\",\n                                                            \"name\": {\n                                                                \"kind\": \"Name\",\n                                                                \"value\": \"state\"\n                                                            }\n                                                        },\n                                                        {\n                                                            \"kind\": \"Field\",\n                                                            \"name\": {\n                                                                \"kind\": \"Name\",\n                                                                \"value\": \"running\"\n                                                            }\n                                                        },\n                                                        {\n                                                            \"kind\": \"Field\",\n                                                            \"name\": {\n                                                                \"kind\": \"Name\",\n                                                                \"value\": \"agentName\"\n                                                            }\n                                                        },\n                                                        {\n                                                            \"kind\": \"Field\",\n                                                            \"name\": {\n                                                                \"kind\": \"Name\",\n                                                                \"value\": \"nodeName\"\n                                                            }\n                                                        },\n                                                        {\n                                                            \"kind\": \"Field\",\n                                                            \"name\": {\n                                                                \"kind\": \"Name\",\n                                                                \"value\": \"runId\"\n                                                            }\n                                                        },\n                                                        {\n                                                            \"kind\": \"Field\",\n                                                            \"name\": {\n                                                                \"kind\": \"Name\",\n                                                                \"value\": \"active\"\n                                                            }\n                                                        },\n                                                        {\n                                                            \"kind\": \"Field\",\n                                                            \"name\": {\n                                                                \"kind\": \"Name\",\n                                                                \"value\": \"role\"\n                                                            }\n                                                        }\n                                                    ]\n                                                }\n                                            }\n                                        ]\n                                    }\n                                }\n                            ]\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n};\n //# sourceMappingURL=chunk-OGFO6ZEP.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@copilotkit/runtime-client-gql/dist/chunk-OGFO6ZEP.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@copilotkit/runtime-client-gql/dist/chunk-ZWVRRYBP.mjs":
/*!*****************************************************************************!*\
  !*** ./node_modules/@copilotkit/runtime-client-gql/dist/chunk-ZWVRRYBP.mjs ***!
  \*****************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   convertGqlOutputToMessages: function() { return /* binding */ convertGqlOutputToMessages; },\n/* harmony export */   convertMessagesToGqlInput: function() { return /* binding */ convertMessagesToGqlInput; },\n/* harmony export */   filterAdjacentAgentStateMessages: function() { return /* binding */ filterAdjacentAgentStateMessages; },\n/* harmony export */   filterAgentStateMessages: function() { return /* binding */ filterAgentStateMessages; }\n/* harmony export */ });\n/* harmony import */ var _chunk_GD5NLJQE_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunk-GD5NLJQE.mjs */ \"(app-pages-browser)/./node_modules/@copilotkit/runtime-client-gql/dist/chunk-GD5NLJQE.mjs\");\n/* harmony import */ var untruncate_json__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! untruncate-json */ \"(app-pages-browser)/./node_modules/untruncate-json/dist/esm/index.js\");\n\n// src/client/conversion.ts\n\nfunction filterAgentStateMessages(messages) {\n    return messages.filter((message)=>!message.isAgentStateMessage());\n}\nfunction convertMessagesToGqlInput(messages) {\n    return messages.map((message)=>{\n        if (message.isTextMessage()) {\n            return {\n                id: message.id,\n                createdAt: message.createdAt,\n                textMessage: {\n                    content: message.content,\n                    role: message.role\n                }\n            };\n        } else if (message.isActionExecutionMessage()) {\n            return {\n                id: message.id,\n                createdAt: message.createdAt,\n                actionExecutionMessage: {\n                    name: message.name,\n                    arguments: JSON.stringify(message.arguments),\n                    scope: message.scope\n                }\n            };\n        } else if (message.isResultMessage()) {\n            return {\n                id: message.id,\n                createdAt: message.createdAt,\n                resultMessage: {\n                    result: message.result,\n                    actionExecutionId: message.actionExecutionId,\n                    actionName: message.actionName\n                }\n            };\n        } else if (message.isAgentStateMessage()) {\n            return {\n                id: message.id,\n                createdAt: message.createdAt,\n                agentStateMessage: {\n                    threadId: message.threadId,\n                    role: message.role,\n                    agentName: message.agentName,\n                    nodeName: message.nodeName,\n                    runId: message.runId,\n                    active: message.active,\n                    running: message.running,\n                    state: JSON.stringify(message.state)\n                }\n            };\n        } else {\n            throw new Error(\"Unknown message type\");\n        }\n    });\n}\nfunction filterAdjacentAgentStateMessages(messages) {\n    const filteredMessages = [];\n    messages.forEach((message, i)=>{\n        if (message.__typename !== \"AgentStateMessageOutput\") {\n            filteredMessages.push(message);\n        } else {\n            const prevAgentStateMessageIndex = filteredMessages.findIndex(// TODO: also check runId\n            (m)=>m.__typename === \"AgentStateMessageOutput\" && m.agentName === message.agentName);\n            if (prevAgentStateMessageIndex === -1) {\n                filteredMessages.push(message);\n            } else {\n                filteredMessages[prevAgentStateMessageIndex] = message;\n            }\n        }\n    });\n    return filteredMessages;\n}\nfunction convertGqlOutputToMessages(messages) {\n    return messages.map((message)=>{\n        if (message.__typename === \"TextMessageOutput\") {\n            return new _chunk_GD5NLJQE_mjs__WEBPACK_IMPORTED_MODULE_0__.TextMessage({\n                id: message.id,\n                role: message.role,\n                content: message.content.join(\"\"),\n                createdAt: /* @__PURE__ */ new Date(),\n                status: message.status || {\n                    code: \"Pending\" /* Pending */ \n                }\n            });\n        } else if (message.__typename === \"ActionExecutionMessageOutput\") {\n            return new _chunk_GD5NLJQE_mjs__WEBPACK_IMPORTED_MODULE_0__.ActionExecutionMessage({\n                id: message.id,\n                name: message.name,\n                arguments: getPartialArguments(message.arguments),\n                scope: message.scope,\n                createdAt: /* @__PURE__ */ new Date(),\n                status: message.status || {\n                    code: \"Pending\" /* Pending */ \n                }\n            });\n        } else if (message.__typename === \"ResultMessageOutput\") {\n            return new _chunk_GD5NLJQE_mjs__WEBPACK_IMPORTED_MODULE_0__.ResultMessage({\n                id: message.id,\n                result: message.result,\n                actionExecutionId: message.actionExecutionId,\n                actionName: message.actionName,\n                createdAt: /* @__PURE__ */ new Date(),\n                status: message.status || {\n                    code: \"Pending\" /* Pending */ \n                }\n            });\n        } else if (message.__typename === \"AgentStateMessageOutput\") {\n            return new _chunk_GD5NLJQE_mjs__WEBPACK_IMPORTED_MODULE_0__.AgentStateMessage({\n                id: message.id,\n                threadId: message.threadId,\n                role: message.role,\n                agentName: message.agentName,\n                nodeName: message.nodeName,\n                runId: message.runId,\n                active: message.active,\n                running: message.running,\n                state: JSON.parse(message.state),\n                createdAt: /* @__PURE__ */ new Date()\n            });\n        }\n        throw new Error(\"Unknown message type\");\n    });\n}\nfunction getPartialArguments(args) {\n    try {\n        return JSON.parse((0,untruncate_json__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(args.join(\"\")));\n    } catch (e) {\n        return {};\n    }\n}\n //# sourceMappingURL=chunk-ZWVRRYBP.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@copilotkit/runtime-client-gql/dist/chunk-ZWVRRYBP.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@copilotkit/shared/dist/chunk-GYZIHHE6.mjs":
/*!*****************************************************************!*\
  !*** ./node_modules/@copilotkit/shared/dist/chunk-GYZIHHE6.mjs ***!
  \*****************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   COPILOT_CLOUD_API_URL: function() { return /* binding */ COPILOT_CLOUD_API_URL; },\n/* harmony export */   COPILOT_CLOUD_CHAT_URL: function() { return /* binding */ COPILOT_CLOUD_CHAT_URL; },\n/* harmony export */   COPILOT_CLOUD_PUBLIC_API_KEY_HEADER: function() { return /* binding */ COPILOT_CLOUD_PUBLIC_API_KEY_HEADER; },\n/* harmony export */   COPILOT_CLOUD_VERSION: function() { return /* binding */ COPILOT_CLOUD_VERSION; }\n/* harmony export */ });\n// src/constants/index.ts\nvar COPILOT_CLOUD_API_URL = \"https://api.cloud.copilotkit.ai\";\nvar COPILOT_CLOUD_VERSION = \"v1\";\nvar COPILOT_CLOUD_CHAT_URL = \"\".concat(COPILOT_CLOUD_API_URL, \"/copilotkit/\").concat(COPILOT_CLOUD_VERSION);\nvar COPILOT_CLOUD_PUBLIC_API_KEY_HEADER = \"X-CopilotCloud-Public-Api-Key\";\n //# sourceMappingURL=chunk-GYZIHHE6.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AY29waWxvdGtpdC9zaGFyZWQvZGlzdC9jaHVuay1HWVpJSEhFNi5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBLHlCQUF5QjtBQUN6QixJQUFJQSx3QkFBd0I7QUFDNUIsSUFBSUMsd0JBQXdCO0FBQzVCLElBQUlDLHlCQUF5QixHQUF1Q0QsT0FBcENELHVCQUFzQixnQkFBb0MsT0FBdEJDO0FBQ3BFLElBQUlFLHNDQUFzQztBQU94QyxDQUNGLDJDQUEyQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQGNvcGlsb3RraXQvc2hhcmVkL2Rpc3QvY2h1bmstR1laSUhIRTYubWpzP2QxYmIiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gc3JjL2NvbnN0YW50cy9pbmRleC50c1xudmFyIENPUElMT1RfQ0xPVURfQVBJX1VSTCA9IFwiaHR0cHM6Ly9hcGkuY2xvdWQuY29waWxvdGtpdC5haVwiO1xudmFyIENPUElMT1RfQ0xPVURfVkVSU0lPTiA9IFwidjFcIjtcbnZhciBDT1BJTE9UX0NMT1VEX0NIQVRfVVJMID0gYCR7Q09QSUxPVF9DTE9VRF9BUElfVVJMfS9jb3BpbG90a2l0LyR7Q09QSUxPVF9DTE9VRF9WRVJTSU9OfWA7XG52YXIgQ09QSUxPVF9DTE9VRF9QVUJMSUNfQVBJX0tFWV9IRUFERVIgPSBcIlgtQ29waWxvdENsb3VkLVB1YmxpYy1BcGktS2V5XCI7XG5cbmV4cG9ydCB7XG4gIENPUElMT1RfQ0xPVURfQVBJX1VSTCxcbiAgQ09QSUxPVF9DTE9VRF9WRVJTSU9OLFxuICBDT1BJTE9UX0NMT1VEX0NIQVRfVVJMLFxuICBDT1BJTE9UX0NMT1VEX1BVQkxJQ19BUElfS0VZX0hFQURFUlxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNodW5rLUdZWklISEU2Lm1qcy5tYXAiXSwibmFtZXMiOlsiQ09QSUxPVF9DTE9VRF9BUElfVVJMIiwiQ09QSUxPVF9DTE9VRF9WRVJTSU9OIiwiQ09QSUxPVF9DTE9VRF9DSEFUX1VSTCIsIkNPUElMT1RfQ0xPVURfUFVCTElDX0FQSV9LRVlfSEVBREVSIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@copilotkit/shared/dist/chunk-GYZIHHE6.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@copilotkit/shared/dist/chunk-JP2M4U4G.mjs":
/*!*****************************************************************!*\
  !*** ./node_modules/@copilotkit/shared/dist/chunk-JP2M4U4G.mjs ***!
  \*****************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   actionParametersToJsonSchema: function() { return /* binding */ actionParametersToJsonSchema; },\n/* harmony export */   convertJsonSchemaToZodSchema: function() { return /* binding */ convertJsonSchemaToZodSchema; }\n/* harmony export */ });\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! zod */ \"(app-pages-browser)/./node_modules/zod/lib/index.mjs\");\n// src/utils/json-schema.ts\n\nfunction actionParametersToJsonSchema(actionParameters) {\n    let parameters = {};\n    for (let parameter of actionParameters || []){\n        parameters[parameter.name] = convertAttribute(parameter);\n    }\n    let requiredParameterNames = [];\n    for (let arg of actionParameters || []){\n        if (arg.required !== false) {\n            requiredParameterNames.push(arg.name);\n        }\n    }\n    return {\n        type: \"object\",\n        properties: parameters,\n        required: requiredParameterNames\n    };\n}\nfunction convertAttribute(attribute) {\n    var _a, _b, _c;\n    switch(attribute.type){\n        case \"string\":\n            return {\n                type: \"string\",\n                description: attribute.description,\n                ...attribute.enum && {\n                    enum: attribute.enum\n                }\n            };\n        case \"number\":\n        case \"boolean\":\n            return {\n                type: attribute.type,\n                description: attribute.description\n            };\n        case \"object\":\n        case \"object[]\":\n            const properties = (_a = attribute.attributes) == null ? void 0 : _a.reduce((acc, attr)=>{\n                acc[attr.name] = convertAttribute(attr);\n                return acc;\n            }, {});\n            const required = (_b = attribute.attributes) == null ? void 0 : _b.filter((attr)=>attr.required !== false).map((attr)=>attr.name);\n            if (attribute.type === \"object[]\") {\n                return {\n                    type: \"array\",\n                    items: {\n                        type: \"object\",\n                        ...properties && {\n                            properties\n                        },\n                        ...required && required.length > 0 && {\n                            required\n                        }\n                    },\n                    description: attribute.description\n                };\n            }\n            return {\n                type: \"object\",\n                description: attribute.description,\n                ...properties && {\n                    properties\n                },\n                ...required && required.length > 0 && {\n                    required\n                }\n            };\n        default:\n            if ((_c = attribute.type) == null ? void 0 : _c.endsWith(\"[]\")) {\n                const itemType = attribute.type.slice(0, -2);\n                return {\n                    type: \"array\",\n                    items: {\n                        type: itemType\n                    },\n                    description: attribute.description\n                };\n            }\n            return {\n                type: \"string\",\n                description: attribute.description\n            };\n    }\n}\nfunction convertJsonSchemaToZodSchema(jsonSchema, required) {\n    if (jsonSchema.type === \"object\") {\n        const spec = {};\n        if (!jsonSchema.properties || !Object.keys(jsonSchema.properties).length) {\n            return !required ? zod__WEBPACK_IMPORTED_MODULE_0__.z.object(spec).optional() : zod__WEBPACK_IMPORTED_MODULE_0__.z.object(spec);\n        }\n        for (const [key, value] of Object.entries(jsonSchema.properties)){\n            spec[key] = convertJsonSchemaToZodSchema(value, jsonSchema.required ? jsonSchema.required.includes(key) : false);\n        }\n        let schema = zod__WEBPACK_IMPORTED_MODULE_0__.z.object(spec).describe(jsonSchema.description);\n        return required ? schema : schema.optional();\n    } else if (jsonSchema.type === \"string\") {\n        let schema = zod__WEBPACK_IMPORTED_MODULE_0__.z.string().describe(jsonSchema.description);\n        return required ? schema : schema.optional();\n    } else if (jsonSchema.type === \"number\") {\n        let schema = zod__WEBPACK_IMPORTED_MODULE_0__.z.number().describe(jsonSchema.description);\n        return required ? schema : schema.optional();\n    } else if (jsonSchema.type === \"boolean\") {\n        let schema = zod__WEBPACK_IMPORTED_MODULE_0__.z.boolean().describe(jsonSchema.description);\n        return required ? schema : schema.optional();\n    } else if (jsonSchema.type === \"array\") {\n        let itemSchema = convertJsonSchemaToZodSchema(jsonSchema.items, true);\n        let schema = zod__WEBPACK_IMPORTED_MODULE_0__.z.array(itemSchema).describe(jsonSchema.description);\n        return required ? schema : schema.optional();\n    }\n    throw new Error(\"Invalid JSON schema\");\n}\n //# sourceMappingURL=chunk-JP2M4U4G.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@copilotkit/shared/dist/chunk-JP2M4U4G.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@copilotkit/shared/dist/chunk-RIPX6APP.mjs":
/*!*****************************************************************!*\
  !*** ./node_modules/@copilotkit/shared/dist/chunk-RIPX6APP.mjs ***!
  \*****************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   randomId: function() { return /* binding */ randomId; }\n/* harmony export */ });\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! uuid */ \"(app-pages-browser)/./node_modules/uuid/dist/esm-browser/v4.js\");\n// src/utils/random-id.ts\n\nfunction randomId() {\n    return \"ck-\" + (0,uuid__WEBPACK_IMPORTED_MODULE_0__[\"default\"])();\n}\n //# sourceMappingURL=chunk-RIPX6APP.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AY29waWxvdGtpdC9zaGFyZWQvZGlzdC9jaHVuay1SSVBYNkFQUC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSx5QkFBeUI7QUFDVztBQUNwQyxTQUFTRTtJQUNQLE9BQU8sUUFBUUQsZ0RBQU1BO0FBQ3ZCO0FBSUUsQ0FDRiwyQ0FBMkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0Bjb3BpbG90a2l0L3NoYXJlZC9kaXN0L2NodW5rLVJJUFg2QVBQLm1qcz9lYjBjIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHNyYy91dGlscy9yYW5kb20taWQudHNcbmltcG9ydCB7IHY0IGFzIHV1aWR2NCB9IGZyb20gXCJ1dWlkXCI7XG5mdW5jdGlvbiByYW5kb21JZCgpIHtcbiAgcmV0dXJuIFwiY2stXCIgKyB1dWlkdjQoKTtcbn1cblxuZXhwb3J0IHtcbiAgcmFuZG9tSWRcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jaHVuay1SSVBYNkFQUC5tanMubWFwIl0sIm5hbWVzIjpbInY0IiwidXVpZHY0IiwicmFuZG9tSWQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@copilotkit/shared/dist/chunk-RIPX6APP.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@urql/core/dist/urql-core-chunk.mjs":
/*!**********************************************************!*\
  !*** ./node_modules/@urql/core/dist/urql-core-chunk.mjs ***!
  \**********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   C: function() { return /* binding */ CombinedError; },\n/* harmony export */   a: function() { return /* binding */ makeFetchBody; },\n/* harmony export */   b: function() { return /* binding */ makeErrorResult; },\n/* harmony export */   c: function() { return /* binding */ mergeResultPatch; },\n/* harmony export */   d: function() { return /* binding */ makeFetchURL; },\n/* harmony export */   e: function() { return /* binding */ makeFetchOptions; },\n/* harmony export */   f: function() { return /* binding */ makeFetchSource; },\n/* harmony export */   g: function() { return /* binding */ getOperationType; },\n/* harmony export */   h: function() { return /* binding */ createRequest; },\n/* harmony export */   i: function() { return /* binding */ stringifyVariables; },\n/* harmony export */   k: function() { return /* binding */ keyDocument; },\n/* harmony export */   m: function() { return /* binding */ makeResult; },\n/* harmony export */   s: function() { return /* binding */ stringifyDocument; }\n/* harmony export */ });\n/* harmony import */ var _0no_co_graphql_web__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @0no-co/graphql.web */ \"(app-pages-browser)/./node_modules/@0no-co/graphql.web/dist/graphql.web.mjs\");\n/* harmony import */ var wonka__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! wonka */ \"(app-pages-browser)/./node_modules/wonka/dist/wonka.mjs\");\n\n\nvar rehydrateGraphQlError = (r)=>{\n    if (r && \"string\" == typeof r.message && (r.extensions || \"GraphQLError\" === r.name)) {\n        return r;\n    } else if (\"object\" == typeof r && \"string\" == typeof r.message) {\n        return new _0no_co_graphql_web__WEBPACK_IMPORTED_MODULE_0__.GraphQLError(r.message, r.nodes, r.source, r.positions, r.path, r, r.extensions || {});\n    } else {\n        return new _0no_co_graphql_web__WEBPACK_IMPORTED_MODULE_0__.GraphQLError(r);\n    }\n};\nclass CombinedError extends Error {\n    toString() {\n        return this.message;\n    }\n    constructor(e){\n        var r = (e.graphQLErrors || []).map(rehydrateGraphQlError);\n        var t = ((e, r)=>{\n            var t = \"\";\n            if (e) {\n                return \"[Network] \".concat(e.message);\n            }\n            if (r) {\n                for(var a = 0, n = r.length; a < n; a++){\n                    if (t) {\n                        t += \"\\n\";\n                    }\n                    t += \"[GraphQL] \".concat(r[a].message);\n                }\n            }\n            return t;\n        })(e.networkError, r);\n        super(t);\n        this.name = \"CombinedError\";\n        this.message = t;\n        this.graphQLErrors = r;\n        this.networkError = e.networkError;\n        this.response = e.response;\n    }\n}\nvar phash = (e, r)=>{\n    var t = 0 | (r || 5381);\n    for(var a = 0, n = 0 | e.length; a < n; a++){\n        t = (t << 5) + t + e.charCodeAt(a);\n    }\n    return t;\n};\nvar s = new Set;\nvar f = new WeakMap;\nvar stringify = (e, r)=>{\n    if (null === e || s.has(e)) {\n        return \"null\";\n    } else if (\"object\" != typeof e) {\n        return JSON.stringify(e) || \"\";\n    } else if (e.toJSON) {\n        return stringify(e.toJSON(), r);\n    } else if (Array.isArray(e)) {\n        var t = \"[\";\n        for(var a = 0, n = e.length; a < n; a++){\n            if (t.length > 1) {\n                t += \",\";\n            }\n            t += stringify(e[a], r) || \"null\";\n        }\n        return t += \"]\";\n    } else if (!r && (l !== NoopConstructor && e instanceof l || d !== NoopConstructor && e instanceof d)) {\n        return \"null\";\n    }\n    var o = Object.keys(e).sort();\n    if (!o.length && e.constructor && Object.getPrototypeOf(e).constructor !== Object.prototype.constructor) {\n        var i = f.get(e) || Math.random().toString(36).slice(2);\n        f.set(e, i);\n        return stringify({\n            __key: i\n        }, r);\n    }\n    s.add(e);\n    var c = \"{\";\n    for(var v = 0, p = o.length; v < p; v++){\n        var u = stringify(e[o[v]], r);\n        if (u) {\n            if (c.length > 1) {\n                c += \",\";\n            }\n            c += stringify(o[v], r) + \":\" + u;\n        }\n    }\n    s.delete(e);\n    return c += \"}\";\n};\nvar extract = (e, r, t)=>{\n    if (null == t || \"object\" != typeof t || t.toJSON || s.has(t)) {} else if (Array.isArray(t)) {\n        for(var a = 0, n = t.length; a < n; a++){\n            extract(e, \"\".concat(r, \".\").concat(a), t[a]);\n        }\n    } else if (t instanceof l || t instanceof d) {\n        e.set(r, t);\n    } else {\n        s.add(t);\n        for(var o in t){\n            extract(e, \"\".concat(r, \".\").concat(o), t[o]);\n        }\n    }\n};\nvar stringifyVariables = (e, r)=>{\n    s.clear();\n    return stringify(e, r || !1);\n};\nclass NoopConstructor {\n}\nvar l = \"undefined\" != typeof File ? File : NoopConstructor;\nvar d = \"undefined\" != typeof Blob ? Blob : NoopConstructor;\nvar c = /(\"{3}[\\s\\S]*\"{3}|\"(?:\\\\.|[^\"])*\")/g;\nvar v = /(?:#[^\\n\\r]+)?(?:[\\r\\n]+|$)/g;\nvar replaceOutsideStrings = (e, r)=>r % 2 == 0 ? e.replace(v, \"\\n\") : e;\nvar sanitizeDocument = (e)=>e.split(c).map(replaceOutsideStrings).join(\"\").trim();\nvar p = new Map;\nvar u = new Map;\nvar stringifyDocument = (e)=>{\n    var t;\n    if (\"string\" == typeof e) {\n        t = sanitizeDocument(e);\n    } else if (e.loc && u.get(e.__key) === e) {\n        t = e.loc.source.body;\n    } else {\n        t = p.get(e) || sanitizeDocument((0,_0no_co_graphql_web__WEBPACK_IMPORTED_MODULE_0__.print)(e));\n        p.set(e, t);\n    }\n    if (\"string\" != typeof e && !e.loc) {\n        e.loc = {\n            start: 0,\n            end: t.length,\n            source: {\n                body: t,\n                name: \"gql\",\n                locationOffset: {\n                    line: 1,\n                    column: 1\n                }\n            }\n        };\n    }\n    return t;\n};\nvar hashDocument = (e)=>{\n    var r;\n    if (e.documentId) {\n        r = phash(e.documentId);\n    } else {\n        r = phash(stringifyDocument(e));\n        if (e.definitions) {\n            var t = getOperationName(e);\n            if (t) {\n                r = phash(\"\\n# \".concat(t), r);\n            }\n        }\n    }\n    return r;\n};\nvar keyDocument = (e)=>{\n    var r;\n    var a;\n    if (\"string\" == typeof e) {\n        r = hashDocument(e);\n        a = u.get(r) || (0,_0no_co_graphql_web__WEBPACK_IMPORTED_MODULE_0__.parse)(e, {\n            noLocation: !0\n        });\n    } else {\n        r = e.__key || hashDocument(e);\n        a = u.get(r) || e;\n    }\n    if (!a.loc) {\n        stringifyDocument(a);\n    }\n    a.__key = r;\n    u.set(r, a);\n    return a;\n};\nvar createRequest = (e, r, t)=>{\n    var a = r || {};\n    var n = keyDocument(e);\n    var o = stringifyVariables(a, !0);\n    var i = n.__key;\n    if (\"{}\" !== o) {\n        i = phash(o, i);\n    }\n    return {\n        key: i,\n        query: n,\n        variables: a,\n        extensions: t\n    };\n};\nvar getOperationName = (e)=>{\n    for(var r = 0, t = e.definitions.length; r < t; r++){\n        var n = e.definitions[r];\n        if (n.kind === _0no_co_graphql_web__WEBPACK_IMPORTED_MODULE_0__.Kind.OPERATION_DEFINITION) {\n            return n.name ? n.name.value : void 0;\n        }\n    }\n};\nvar getOperationType = (e)=>{\n    for(var r = 0, t = e.definitions.length; r < t; r++){\n        var n = e.definitions[r];\n        if (n.kind === _0no_co_graphql_web__WEBPACK_IMPORTED_MODULE_0__.Kind.OPERATION_DEFINITION) {\n            return n.operation;\n        }\n    }\n};\nvar makeResult = (e, r, t)=>{\n    if (!(\"data\" in r || \"errors\" in r && Array.isArray(r.errors))) {\n        throw new Error(\"No Content\");\n    }\n    var a = \"subscription\" === e.kind;\n    return {\n        operation: e,\n        data: r.data,\n        error: Array.isArray(r.errors) ? new CombinedError({\n            graphQLErrors: r.errors,\n            response: t\n        }) : void 0,\n        extensions: r.extensions ? {\n            ...r.extensions\n        } : void 0,\n        hasNext: null == r.hasNext ? a : r.hasNext,\n        stale: !1\n    };\n};\nvar deepMerge = (e, r)=>{\n    if (\"object\" == typeof e && null != e) {\n        if (Array.isArray(e)) {\n            e = [\n                ...e\n            ];\n            for(var t = 0, a = r.length; t < a; t++){\n                e[t] = deepMerge(e[t], r[t]);\n            }\n            return e;\n        }\n        if (!e.constructor || e.constructor === Object) {\n            e = {\n                ...e\n            };\n            for(var n in r){\n                e[n] = deepMerge(e[n], r[n]);\n            }\n            return e;\n        }\n    }\n    return r;\n};\nvar mergeResultPatch = (e, r, t, a)=>{\n    var n = e.error ? e.error.graphQLErrors : [];\n    var o = !!e.extensions || !!(r.payload || r).extensions;\n    var i = {\n        ...e.extensions,\n        ...(r.payload || r).extensions\n    };\n    var s = r.incremental;\n    if (\"path\" in r) {\n        s = [\n            r\n        ];\n    }\n    var f = {\n        data: e.data\n    };\n    if (s) {\n        var _loop = function() {\n            var e = s[l];\n            if (Array.isArray(e.errors)) {\n                n.push(...e.errors);\n            }\n            if (e.extensions) {\n                Object.assign(i, e.extensions);\n                o = !0;\n            }\n            var r = \"data\";\n            var t = f;\n            var d = [];\n            if (e.path) {\n                d = e.path;\n            } else if (a) {\n                var c = a.find((r)=>r.id === e.id);\n                if (e.subPath) {\n                    d = [\n                        ...c.path,\n                        ...e.subPath\n                    ];\n                } else {\n                    d = c.path;\n                }\n            }\n            for(var v = 0, p = d.length; v < p; r = d[v++]){\n                t = t[r] = Array.isArray(t[r]) ? [\n                    ...t[r]\n                ] : {\n                    ...t[r]\n                };\n            }\n            if (e.items) {\n                var u = +r >= 0 ? r : 0;\n                for(var y = 0, h = e.items.length; y < h; y++){\n                    t[u + y] = deepMerge(t[u + y], e.items[y]);\n                }\n            } else if (void 0 !== e.data) {\n                t[r] = deepMerge(t[r], e.data);\n            }\n        };\n        for(var l = 0, d = s.length; l < d; l++){\n            _loop();\n        }\n    } else {\n        f.data = (r.payload || r).data || e.data;\n        n = r.errors || r.payload && r.payload.errors || n;\n    }\n    return {\n        operation: e.operation,\n        data: f.data,\n        error: n.length ? new CombinedError({\n            graphQLErrors: n,\n            response: t\n        }) : void 0,\n        extensions: o ? i : void 0,\n        hasNext: null != r.hasNext ? r.hasNext : e.hasNext,\n        stale: !1\n    };\n};\nvar makeErrorResult = (e, r, t)=>({\n        operation: e,\n        data: void 0,\n        error: new CombinedError({\n            networkError: r,\n            response: t\n        }),\n        extensions: void 0,\n        hasNext: !1,\n        stale: !1\n    });\nfunction makeFetchBody(e) {\n    var r = {\n        query: void 0,\n        documentId: void 0,\n        operationName: getOperationName(e.query),\n        variables: e.variables || void 0,\n        extensions: e.extensions\n    };\n    if (\"documentId\" in e.query && e.query.documentId && (!e.query.definitions || !e.query.definitions.length)) {\n        r.documentId = e.query.documentId;\n    } else if (!e.extensions || !e.extensions.persistedQuery || e.extensions.persistedQuery.miss) {\n        r.query = stringifyDocument(e.query);\n    }\n    return r;\n}\nvar makeFetchURL = (e, r)=>{\n    var t = \"query\" === e.kind && e.context.preferGetMethod;\n    if (!t || !r) {\n        return e.context.url;\n    }\n    var a = splitOutSearchParams(e.context.url);\n    for(var n in r){\n        var o = r[n];\n        if (o) {\n            a[1].set(n, \"object\" == typeof o ? stringifyVariables(o) : o);\n        }\n    }\n    var i = a.join(\"?\");\n    if (i.length > 2047 && \"force\" !== t) {\n        e.context.preferGetMethod = !1;\n        return e.context.url;\n    }\n    return i;\n};\nvar splitOutSearchParams = (e)=>{\n    var r = e.indexOf(\"?\");\n    return r > -1 ? [\n        e.slice(0, r),\n        new URLSearchParams(e.slice(r + 1))\n    ] : [\n        e,\n        new URLSearchParams\n    ];\n};\nvar serializeBody = (e, r)=>{\n    if (r && !(\"query\" === e.kind && !!e.context.preferGetMethod)) {\n        var t = stringifyVariables(r);\n        var a = ((e)=>{\n            var r = new Map;\n            if (l !== NoopConstructor || d !== NoopConstructor) {\n                s.clear();\n                extract(r, \"variables\", e);\n            }\n            return r;\n        })(r.variables);\n        if (a.size) {\n            var n = new FormData;\n            n.append(\"operations\", t);\n            n.append(\"map\", stringifyVariables({\n                ...[\n                    ...a.keys()\n                ].map((e)=>[\n                        e\n                    ])\n            }));\n            var o = 0;\n            for (var i of a.values()){\n                n.append(\"\" + o++, i);\n            }\n            return n;\n        }\n        return t;\n    }\n};\nvar makeFetchOptions = (e, r)=>{\n    var t = {\n        accept: \"subscription\" === e.kind ? \"text/event-stream, multipart/mixed\" : \"application/graphql-response+json, application/graphql+json, application/json, text/event-stream, multipart/mixed\"\n    };\n    var a = (\"function\" == typeof e.context.fetchOptions ? e.context.fetchOptions() : e.context.fetchOptions) || {};\n    if (a.headers) {\n        if (((e)=>\"has\" in e && !Object.keys(e).length)(a.headers)) {\n            a.headers.forEach((e, r)=>{\n                t[r] = e;\n            });\n        } else if (Array.isArray(a.headers)) {\n            a.headers.forEach((e, r)=>{\n                if (Array.isArray(e)) {\n                    if (t[e[0]]) {\n                        t[e[0]] = \"\".concat(t[e[0]], \",\").concat(e[1]);\n                    } else {\n                        t[e[0]] = e[1];\n                    }\n                } else {\n                    t[r] = e;\n                }\n            });\n        } else {\n            for(var n in a.headers){\n                t[n.toLowerCase()] = a.headers[n];\n            }\n        }\n    }\n    var o = serializeBody(e, r);\n    if (\"string\" == typeof o && !t[\"content-type\"]) {\n        t[\"content-type\"] = \"application/json\";\n    }\n    return {\n        ...a,\n        method: o ? \"POST\" : \"GET\",\n        body: o,\n        headers: t\n    };\n};\nvar y = \"undefined\" != typeof TextDecoder ? new TextDecoder : null;\nvar h = /boundary=\"?([^=\";]+)\"?/i;\nvar m = /data: ?([^\\n]+)/;\nvar toString = (e)=>\"Buffer\" === e.constructor.name ? e.toString() : y.decode(e);\nasync function* streamBody(e) {\n    if (e.body[Symbol.asyncIterator]) {\n        for await (var r of e.body){\n            yield toString(r);\n        }\n    } else {\n        var t = e.body.getReader();\n        var a;\n        try {\n            while(!(a = await t.read()).done){\n                yield toString(a.value);\n            }\n        } finally{\n            t.cancel();\n        }\n    }\n}\nasync function* split(e, r) {\n    var t = \"\";\n    var a;\n    for await (var n of e){\n        t += n;\n        while((a = t.indexOf(r)) > -1){\n            yield t.slice(0, a);\n            t = t.slice(a + r.length);\n        }\n    }\n}\nasync function* fetchOperation(e, r, t) {\n    var a = !0;\n    var n = null;\n    var o;\n    try {\n        yield await Promise.resolve();\n        var i = (o = await (e.context.fetch || fetch)(r, t)).headers.get(\"Content-Type\") || \"\";\n        var s;\n        if (/multipart\\/mixed/i.test(i)) {\n            s = async function* parseMultipartMixed(e, r) {\n                var t = e.match(h);\n                var a = \"--\" + (t ? t[1] : \"-\");\n                var n = !0;\n                var o;\n                for await (var i of split(streamBody(r), \"\\r\\n\" + a)){\n                    if (n) {\n                        n = !1;\n                        var s = i.indexOf(a);\n                        if (s > -1) {\n                            i = i.slice(s + a.length);\n                        } else {\n                            continue;\n                        }\n                    }\n                    try {\n                        yield o = JSON.parse(i.slice(i.indexOf(\"\\r\\n\\r\\n\") + 4));\n                    } catch (e) {\n                        if (!o) {\n                            throw e;\n                        }\n                    }\n                    if (o && !1 === o.hasNext) {\n                        break;\n                    }\n                }\n                if (o && !1 !== o.hasNext) {\n                    yield {\n                        hasNext: !1\n                    };\n                }\n            }(i, o);\n        } else if (/text\\/event-stream/i.test(i)) {\n            s = async function* parseEventStream(e) {\n                var r;\n                for await (var t of split(streamBody(e), \"\\n\\n\")){\n                    var a = t.match(m);\n                    if (a) {\n                        var n = a[1];\n                        try {\n                            yield r = JSON.parse(n);\n                        } catch (e) {\n                            if (!r) {\n                                throw e;\n                            }\n                        }\n                        if (r && !1 === r.hasNext) {\n                            break;\n                        }\n                    }\n                }\n                if (r && !1 !== r.hasNext) {\n                    yield {\n                        hasNext: !1\n                    };\n                }\n            }(o);\n        } else if (!/text\\//i.test(i)) {\n            s = async function* parseJSON(e) {\n                yield JSON.parse(await e.text());\n            }(o);\n        } else {\n            s = async function* parseMaybeJSON(e) {\n                var r = await e.text();\n                try {\n                    var t = JSON.parse(r);\n                    if (true) {\n                        console.warn('Found response with content-type \"text/plain\" but it had a valid \"application/json\" response.');\n                    }\n                    yield t;\n                } catch (e) {\n                    throw new Error(r);\n                }\n            }(o);\n        }\n        var f;\n        for await (var l of s){\n            if (l.pending && !n) {\n                f = l.pending;\n            } else if (l.pending) {\n                f = [\n                    ...f,\n                    ...l.pending\n                ];\n            }\n            n = n ? mergeResultPatch(n, l, o, f) : makeResult(e, l, o);\n            a = !1;\n            yield n;\n            a = !0;\n        }\n        if (!n) {\n            yield n = makeResult(e, {}, o);\n        }\n    } catch (r) {\n        if (!a) {\n            throw r;\n        }\n        yield makeErrorResult(e, o && (o.status < 200 || o.status >= 300) && o.statusText ? new Error(o.statusText) : r, o);\n    }\n}\nfunction makeFetchSource(e, r, t) {\n    var a;\n    if (\"undefined\" != typeof AbortController) {\n        t.signal = (a = new AbortController).signal;\n    }\n    return (0,wonka__WEBPACK_IMPORTED_MODULE_1__.onEnd)(()=>{\n        if (a) {\n            a.abort();\n        }\n    })((0,wonka__WEBPACK_IMPORTED_MODULE_1__.filter)((e)=>!!e)((0,wonka__WEBPACK_IMPORTED_MODULE_1__.fromAsyncIterable)(fetchOperation(e, r, t))));\n}\n //# sourceMappingURL=urql-core-chunk.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AdXJxbC9jb3JlL2Rpc3QvdXJxbC1jb3JlLWNodW5rLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBMkY7QUFFbkI7QUFFeEUsSUFBSWMsd0JBQXdCWCxDQUFBQTtJQUMxQixJQUFJQSxLQUFLLFlBQVksT0FBT0EsRUFBRVksT0FBTyxJQUFLWixDQUFBQSxFQUFFYSxVQUFVLElBQUksbUJBQW1CYixFQUFFYyxJQUFJLEdBQUc7UUFDcEYsT0FBT2Q7SUFDVCxPQUFPLElBQUksWUFBWSxPQUFPQSxLQUFLLFlBQVksT0FBT0EsRUFBRVksT0FBTyxFQUFFO1FBQy9ELE9BQU8sSUFBSWQsNkRBQUNBLENBQUNFLEVBQUVZLE9BQU8sRUFBRVosRUFBRWUsS0FBSyxFQUFFZixFQUFFZ0IsTUFBTSxFQUFFaEIsRUFBRWlCLFNBQVMsRUFBRWpCLEVBQUVrQixJQUFJLEVBQUVsQixHQUFHQSxFQUFFYSxVQUFVLElBQUksQ0FBQztJQUN0RixPQUFPO1FBQ0wsT0FBTyxJQUFJZiw2REFBQ0EsQ0FBQ0U7SUFDZjtBQUNGO0FBRUEsTUFBTW1CLHNCQUFzQkM7SUF5QjFCQyxXQUFXO1FBQ1QsT0FBTyxJQUFJLENBQUNULE9BQU87SUFDckI7SUExQkFVLFlBQVl4QixDQUFDLENBQUU7UUFDYixJQUFJRSxJQUFJLENBQUNGLEVBQUV5QixhQUFhLElBQUksRUFBRSxFQUFFQyxHQUFHLENBQUNiO1FBQ3BDLElBQUlULElBQUksQ0FBQyxDQUFDSixHQUFHRTtZQUNYLElBQUlFLElBQUk7WUFDUixJQUFJSixHQUFHO2dCQUNMLE9BQU8sYUFBdUIsT0FBVkEsRUFBRWMsT0FBTztZQUMvQjtZQUNBLElBQUlaLEdBQUc7Z0JBQ0wsSUFBSyxJQUFJSSxJQUFJLEdBQUdFLElBQUlOLEVBQUV5QixNQUFNLEVBQUVyQixJQUFJRSxHQUFHRixJQUFLO29CQUN4QyxJQUFJRixHQUFHO3dCQUNMQSxLQUFLO29CQUNQO29C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bC9jb3JlL2Rpc3QvdXJxbC1jb3JlLWNodW5rLm1qcz80NDNkIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEdyYXBoUUxFcnJvciBhcyBlLCBwcmludCBhcyByLCBwYXJzZSBhcyB0LCBLaW5kIGFzIGEgfSBmcm9tIFwiQDBuby1jby9ncmFwaHFsLndlYlwiO1xuXG5pbXBvcnQgeyBvbkVuZCBhcyBuLCBmaWx0ZXIgYXMgbywgZnJvbUFzeW5jSXRlcmFibGUgYXMgaSB9IGZyb20gXCJ3b25rYVwiO1xuXG52YXIgcmVoeWRyYXRlR3JhcGhRbEVycm9yID0gciA9PiB7XG4gIGlmIChyICYmIFwic3RyaW5nXCIgPT0gdHlwZW9mIHIubWVzc2FnZSAmJiAoci5leHRlbnNpb25zIHx8IFwiR3JhcGhRTEVycm9yXCIgPT09IHIubmFtZSkpIHtcbiAgICByZXR1cm4gcjtcbiAgfSBlbHNlIGlmIChcIm9iamVjdFwiID09IHR5cGVvZiByICYmIFwic3RyaW5nXCIgPT0gdHlwZW9mIHIubWVzc2FnZSkge1xuICAgIHJldHVybiBuZXcgZShyLm1lc3NhZ2UsIHIubm9kZXMsIHIuc291cmNlLCByLnBvc2l0aW9ucywgci5wYXRoLCByLCByLmV4dGVuc2lvbnMgfHwge30pO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBuZXcgZShyKTtcbiAgfVxufTtcblxuY2xhc3MgQ29tYmluZWRFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgY29uc3RydWN0b3IoZSkge1xuICAgIHZhciByID0gKGUuZ3JhcGhRTEVycm9ycyB8fCBbXSkubWFwKHJlaHlkcmF0ZUdyYXBoUWxFcnJvcik7XG4gICAgdmFyIHQgPSAoKGUsIHIpID0+IHtcbiAgICAgIHZhciB0ID0gXCJcIjtcbiAgICAgIGlmIChlKSB7XG4gICAgICAgIHJldHVybiBgW05ldHdvcmtdICR7ZS5tZXNzYWdlfWA7XG4gICAgICB9XG4gICAgICBpZiAocikge1xuICAgICAgICBmb3IgKHZhciBhID0gMCwgbiA9IHIubGVuZ3RoOyBhIDwgbjsgYSsrKSB7XG4gICAgICAgICAgaWYgKHQpIHtcbiAgICAgICAgICAgIHQgKz0gXCJcXG5cIjtcbiAgICAgICAgICB9XG4gICAgICAgICAgdCArPSBgW0dyYXBoUUxdICR7clthXS5tZXNzYWdlfWA7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0O1xuICAgIH0pKGUubmV0d29ya0Vycm9yLCByKTtcbiAgICBzdXBlcih0KTtcbiAgICB0aGlzLm5hbWUgPSBcIkNvbWJpbmVkRXJyb3JcIjtcbiAgICB0aGlzLm1lc3NhZ2UgPSB0O1xuICAgIHRoaXMuZ3JhcGhRTEVycm9ycyA9IHI7XG4gICAgdGhpcy5uZXR3b3JrRXJyb3IgPSBlLm5ldHdvcmtFcnJvcjtcbiAgICB0aGlzLnJlc3BvbnNlID0gZS5yZXNwb25zZTtcbiAgfVxuICB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5tZXNzYWdlO1xuICB9XG59XG5cbnZhciBwaGFzaCA9IChlLCByKSA9PiB7XG4gIHZhciB0ID0gMCB8IChyIHx8IDUzODEpO1xuICBmb3IgKHZhciBhID0gMCwgbiA9IDAgfCBlLmxlbmd0aDsgYSA8IG47IGErKykge1xuICAgIHQgPSAodCA8PCA1KSArIHQgKyBlLmNoYXJDb2RlQXQoYSk7XG4gIH1cbiAgcmV0dXJuIHQ7XG59O1xuXG52YXIgcyA9IG5ldyBTZXQ7XG5cbnZhciBmID0gbmV3IFdlYWtNYXA7XG5cbnZhciBzdHJpbmdpZnkgPSAoZSwgcikgPT4ge1xuICBpZiAobnVsbCA9PT0gZSB8fCBzLmhhcyhlKSkge1xuICAgIHJldHVybiBcIm51bGxcIjtcbiAgfSBlbHNlIGlmIChcIm9iamVjdFwiICE9IHR5cGVvZiBlKSB7XG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGUpIHx8IFwiXCI7XG4gIH0gZWxzZSBpZiAoZS50b0pTT04pIHtcbiAgICByZXR1cm4gc3RyaW5naWZ5KGUudG9KU09OKCksIHIpO1xuICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoZSkpIHtcbiAgICB2YXIgdCA9IFwiW1wiO1xuICAgIGZvciAodmFyIGEgPSAwLCBuID0gZS5sZW5ndGg7IGEgPCBuOyBhKyspIHtcbiAgICAgIGlmICh0Lmxlbmd0aCA+IDEpIHtcbiAgICAgICAgdCArPSBcIixcIjtcbiAgICAgIH1cbiAgICAgIHQgKz0gc3RyaW5naWZ5KGVbYV0sIHIpIHx8IFwibnVsbFwiO1xuICAgIH1cbiAgICByZXR1cm4gdCArPSBcIl1cIjtcbiAgfSBlbHNlIGlmICghciAmJiAobCAhPT0gTm9vcENvbnN0cnVjdG9yICYmIGUgaW5zdGFuY2VvZiBsIHx8IGQgIT09IE5vb3BDb25zdHJ1Y3RvciAmJiBlIGluc3RhbmNlb2YgZCkpIHtcbiAgICByZXR1cm4gXCJudWxsXCI7XG4gIH1cbiAgdmFyIG8gPSBPYmplY3Qua2V5cyhlKS5zb3J0KCk7XG4gIGlmICghby5sZW5ndGggJiYgZS5jb25zdHJ1Y3RvciAmJiBPYmplY3QuZ2V0UHJvdG90eXBlT2YoZSkuY29uc3RydWN0b3IgIT09IE9iamVjdC5wcm90b3R5cGUuY29uc3RydWN0b3IpIHtcbiAgICB2YXIgaSA9IGYuZ2V0KGUpIHx8IE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnNsaWNlKDIpO1xuICAgIGYuc2V0KGUsIGkpO1xuICAgIHJldHVybiBzdHJpbmdpZnkoe1xuICAgICAgX19rZXk6IGlcbiAgICB9LCByKTtcbiAgfVxuICBzLmFkZChlKTtcbiAgdmFyIGMgPSBcIntcIjtcbiAgZm9yICh2YXIgdiA9IDAsIHAgPSBvLmxlbmd0aDsgdiA8IHA7IHYrKykge1xuICAgIHZhciB1ID0gc3RyaW5naWZ5KGVbb1t2XV0sIHIpO1xuICAgIGlmICh1KSB7XG4gICAgICBpZiAoYy5sZW5ndGggPiAxKSB7XG4gICAgICAgIGMgKz0gXCIsXCI7XG4gICAgICB9XG4gICAgICBjICs9IHN0cmluZ2lmeShvW3ZdLCByKSArIFwiOlwiICsgdTtcbiAgICB9XG4gIH1cbiAgcy5kZWxldGUoZSk7XG4gIHJldHVybiBjICs9IFwifVwiO1xufTtcblxudmFyIGV4dHJhY3QgPSAoZSwgciwgdCkgPT4ge1xuICBpZiAobnVsbCA9PSB0IHx8IFwib2JqZWN0XCIgIT0gdHlwZW9mIHQgfHwgdC50b0pTT04gfHwgcy5oYXModCkpIHt9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkodCkpIHtcbiAgICBmb3IgKHZhciBhID0gMCwgbiA9IHQubGVuZ3RoOyBhIDwgbjsgYSsrKSB7XG4gICAgICBleHRyYWN0KGUsIGAke3J9LiR7YX1gLCB0W2FdKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAodCBpbnN0YW5jZW9mIGwgfHwgdCBpbnN0YW5jZW9mIGQpIHtcbiAgICBlLnNldChyLCB0KTtcbiAgfSBlbHNlIHtcbiAgICBzLmFkZCh0KTtcbiAgICBmb3IgKHZhciBvIGluIHQpIHtcbiAgICAgIGV4dHJhY3QoZSwgYCR7cn0uJHtvfWAsIHRbb10pO1xuICAgIH1cbiAgfVxufTtcblxudmFyIHN0cmluZ2lmeVZhcmlhYmxlcyA9IChlLCByKSA9PiB7XG4gIHMuY2xlYXIoKTtcbiAgcmV0dXJuIHN0cmluZ2lmeShlLCByIHx8ICExKTtcbn07XG5cbmNsYXNzIE5vb3BDb25zdHJ1Y3RvciB7fVxuXG52YXIgbCA9IFwidW5kZWZpbmVkXCIgIT0gdHlwZW9mIEZpbGUgPyBGaWxlIDogTm9vcENvbnN0cnVjdG9yO1xuXG52YXIgZCA9IFwidW5kZWZpbmVkXCIgIT0gdHlwZW9mIEJsb2IgPyBCbG9iIDogTm9vcENvbnN0cnVjdG9yO1xuXG52YXIgYyA9IC8oXCJ7M31bXFxzXFxTXSpcInszfXxcIig/OlxcXFwufFteXCJdKSpcIikvZztcblxudmFyIHYgPSAvKD86I1teXFxuXFxyXSspPyg/OltcXHJcXG5dK3wkKS9nO1xuXG52YXIgcmVwbGFjZU91dHNpZGVTdHJpbmdzID0gKGUsIHIpID0+IHIgJSAyID09IDAgPyBlLnJlcGxhY2UodiwgXCJcXG5cIikgOiBlO1xuXG52YXIgc2FuaXRpemVEb2N1bWVudCA9IGUgPT4gZS5zcGxpdChjKS5tYXAocmVwbGFjZU91dHNpZGVTdHJpbmdzKS5qb2luKFwiXCIpLnRyaW0oKTtcblxudmFyIHAgPSBuZXcgTWFwO1xuXG52YXIgdSA9IG5ldyBNYXA7XG5cbnZhciBzdHJpbmdpZnlEb2N1bWVudCA9IGUgPT4ge1xuICB2YXIgdDtcbiAgaWYgKFwic3RyaW5nXCIgPT0gdHlwZW9mIGUpIHtcbiAgICB0ID0gc2FuaXRpemVEb2N1bWVudChlKTtcbiAgfSBlbHNlIGlmIChlLmxvYyAmJiB1LmdldChlLl9fa2V5KSA9PT0gZSkge1xuICAgIHQgPSBlLmxvYy5zb3VyY2UuYm9keTtcbiAgfSBlbHNlIHtcbiAgICB0ID0gcC5nZXQoZSkgfHwgc2FuaXRpemVEb2N1bWVudChyKGUpKTtcbiAgICBwLnNldChlLCB0KTtcbiAgfVxuICBpZiAoXCJzdHJpbmdcIiAhPSB0eXBlb2YgZSAmJiAhZS5sb2MpIHtcbiAgICBlLmxvYyA9IHtcbiAgICAgIHN0YXJ0OiAwLFxuICAgICAgZW5kOiB0Lmxlbmd0aCxcbiAgICAgIHNvdXJjZToge1xuICAgICAgICBib2R5OiB0LFxuICAgICAgICBuYW1lOiBcImdxbFwiLFxuICAgICAgICBsb2NhdGlvbk9mZnNldDoge1xuICAgICAgICAgIGxpbmU6IDEsXG4gICAgICAgICAgY29sdW1uOiAxXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9XG4gIHJldHVybiB0O1xufTtcblxudmFyIGhhc2hEb2N1bWVudCA9IGUgPT4ge1xuICB2YXIgcjtcbiAgaWYgKGUuZG9jdW1lbnRJZCkge1xuICAgIHIgPSBwaGFzaChlLmRvY3VtZW50SWQpO1xuICB9IGVsc2Uge1xuICAgIHIgPSBwaGFzaChzdHJpbmdpZnlEb2N1bWVudChlKSk7XG4gICAgaWYgKGUuZGVmaW5pdGlvbnMpIHtcbiAgICAgIHZhciB0ID0gZ2V0T3BlcmF0aW9uTmFtZShlKTtcbiAgICAgIGlmICh0KSB7XG4gICAgICAgIHIgPSBwaGFzaChgXFxuIyAke3R9YCwgcik7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiByO1xufTtcblxudmFyIGtleURvY3VtZW50ID0gZSA9PiB7XG4gIHZhciByO1xuICB2YXIgYTtcbiAgaWYgKFwic3RyaW5nXCIgPT0gdHlwZW9mIGUpIHtcbiAgICByID0gaGFzaERvY3VtZW50KGUpO1xuICAgIGEgPSB1LmdldChyKSB8fCB0KGUsIHtcbiAgICAgIG5vTG9jYXRpb246ICEwXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgciA9IGUuX19rZXkgfHwgaGFzaERvY3VtZW50KGUpO1xuICAgIGEgPSB1LmdldChyKSB8fCBlO1xuICB9XG4gIGlmICghYS5sb2MpIHtcbiAgICBzdHJpbmdpZnlEb2N1bWVudChhKTtcbiAgfVxuICBhLl9fa2V5ID0gcjtcbiAgdS5zZXQociwgYSk7XG4gIHJldHVybiBhO1xufTtcblxudmFyIGNyZWF0ZVJlcXVlc3QgPSAoZSwgciwgdCkgPT4ge1xuICB2YXIgYSA9IHIgfHwge307XG4gIHZhciBuID0ga2V5RG9jdW1lbnQoZSk7XG4gIHZhciBvID0gc3RyaW5naWZ5VmFyaWFibGVzKGEsICEwKTtcbiAgdmFyIGkgPSBuLl9fa2V5O1xuICBpZiAoXCJ7fVwiICE9PSBvKSB7XG4gICAgaSA9IHBoYXNoKG8sIGkpO1xuICB9XG4gIHJldHVybiB7XG4gICAga2V5OiBpLFxuICAgIHF1ZXJ5OiBuLFxuICAgIHZhcmlhYmxlczogYSxcbiAgICBleHRlbnNpb25zOiB0XG4gIH07XG59O1xuXG52YXIgZ2V0T3BlcmF0aW9uTmFtZSA9IGUgPT4ge1xuICBmb3IgKHZhciByID0gMCwgdCA9IGUuZGVmaW5pdGlvbnMubGVuZ3RoOyByIDwgdDsgcisrKSB7XG4gICAgdmFyIG4gPSBlLmRlZmluaXRpb25zW3JdO1xuICAgIGlmIChuLmtpbmQgPT09IGEuT1BFUkFUSU9OX0RFRklOSVRJT04pIHtcbiAgICAgIHJldHVybiBuLm5hbWUgPyBuLm5hbWUudmFsdWUgOiB2b2lkIDA7XG4gICAgfVxuICB9XG59O1xuXG52YXIgZ2V0T3BlcmF0aW9uVHlwZSA9IGUgPT4ge1xuICBmb3IgKHZhciByID0gMCwgdCA9IGUuZGVmaW5pdGlvbnMubGVuZ3RoOyByIDwgdDsgcisrKSB7XG4gICAgdmFyIG4gPSBlLmRlZmluaXRpb25zW3JdO1xuICAgIGlmIChuLmtpbmQgPT09IGEuT1BFUkFUSU9OX0RFRklOSVRJT04pIHtcbiAgICAgIHJldHVybiBuLm9wZXJhdGlvbjtcbiAgICB9XG4gIH1cbn07XG5cbnZhciBtYWtlUmVzdWx0ID0gKGUsIHIsIHQpID0+IHtcbiAgaWYgKCEoXCJkYXRhXCIgaW4gciB8fCBcImVycm9yc1wiIGluIHIgJiYgQXJyYXkuaXNBcnJheShyLmVycm9ycykpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiTm8gQ29udGVudFwiKTtcbiAgfVxuICB2YXIgYSA9IFwic3Vic2NyaXB0aW9uXCIgPT09IGUua2luZDtcbiAgcmV0dXJuIHtcbiAgICBvcGVyYXRpb246IGUsXG4gICAgZGF0YTogci5kYXRhLFxuICAgIGVycm9yOiBBcnJheS5pc0FycmF5KHIuZXJyb3JzKSA/IG5ldyBDb21iaW5lZEVycm9yKHtcbiAgICAgIGdyYXBoUUxFcnJvcnM6IHIuZXJyb3JzLFxuICAgICAgcmVzcG9uc2U6IHRcbiAgICB9KSA6IHZvaWQgMCxcbiAgICBleHRlbnNpb25zOiByLmV4dGVuc2lvbnMgPyB7XG4gICAgICAuLi5yLmV4dGVuc2lvbnNcbiAgICB9IDogdm9pZCAwLFxuICAgIGhhc05leHQ6IG51bGwgPT0gci5oYXNOZXh0ID8gYSA6IHIuaGFzTmV4dCxcbiAgICBzdGFsZTogITFcbiAgfTtcbn07XG5cbnZhciBkZWVwTWVyZ2UgPSAoZSwgcikgPT4ge1xuICBpZiAoXCJvYmplY3RcIiA9PSB0eXBlb2YgZSAmJiBudWxsICE9IGUpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShlKSkge1xuICAgICAgZSA9IFsgLi4uZSBdO1xuICAgICAgZm9yICh2YXIgdCA9IDAsIGEgPSByLmxlbmd0aDsgdCA8IGE7IHQrKykge1xuICAgICAgICBlW3RdID0gZGVlcE1lcmdlKGVbdF0sIHJbdF0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGU7XG4gICAgfVxuICAgIGlmICghZS5jb25zdHJ1Y3RvciB8fCBlLmNvbnN0cnVjdG9yID09PSBPYmplY3QpIHtcbiAgICAgIGUgPSB7XG4gICAgICAgIC4uLmVcbiAgICAgIH07XG4gICAgICBmb3IgKHZhciBuIGluIHIpIHtcbiAgICAgICAgZVtuXSA9IGRlZXBNZXJnZShlW25dLCByW25dKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcjtcbn07XG5cbnZhciBtZXJnZVJlc3VsdFBhdGNoID0gKGUsIHIsIHQsIGEpID0+IHtcbiAgdmFyIG4gPSBlLmVycm9yID8gZS5lcnJvci5ncmFwaFFMRXJyb3JzIDogW107XG4gIHZhciBvID0gISFlLmV4dGVuc2lvbnMgfHwgISEoci5wYXlsb2FkIHx8IHIpLmV4dGVuc2lvbnM7XG4gIHZhciBpID0ge1xuICAgIC4uLmUuZXh0ZW5zaW9ucyxcbiAgICAuLi4oci5wYXlsb2FkIHx8IHIpLmV4dGVuc2lvbnNcbiAgfTtcbiAgdmFyIHMgPSByLmluY3JlbWVudGFsO1xuICBpZiAoXCJwYXRoXCIgaW4gcikge1xuICAgIHMgPSBbIHIgXTtcbiAgfVxuICB2YXIgZiA9IHtcbiAgICBkYXRhOiBlLmRhdGFcbiAgfTtcbiAgaWYgKHMpIHtcbiAgICB2YXIgX2xvb3AgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBlID0gc1tsXTtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KGUuZXJyb3JzKSkge1xuICAgICAgICBuLnB1c2goLi4uZS5lcnJvcnMpO1xuICAgICAgfVxuICAgICAgaWYgKGUuZXh0ZW5zaW9ucykge1xuICAgICAgICBPYmplY3QuYXNzaWduKGksIGUuZXh0ZW5zaW9ucyk7XG4gICAgICAgIG8gPSAhMDtcbiAgICAgIH1cbiAgICAgIHZhciByID0gXCJkYXRhXCI7XG4gICAgICB2YXIgdCA9IGY7XG4gICAgICB2YXIgZCA9IFtdO1xuICAgICAgaWYgKGUucGF0aCkge1xuICAgICAgICBkID0gZS5wYXRoO1xuICAgICAgfSBlbHNlIGlmIChhKSB7XG4gICAgICAgIHZhciBjID0gYS5maW5kKChyID0+IHIuaWQgPT09IGUuaWQpKTtcbiAgICAgICAgaWYgKGUuc3ViUGF0aCkge1xuICAgICAgICAgIGQgPSBbIC4uLmMucGF0aCwgLi4uZS5zdWJQYXRoIF07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZCA9IGMucGF0aDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZm9yICh2YXIgdiA9IDAsIHAgPSBkLmxlbmd0aDsgdiA8IHA7IHIgPSBkW3YrK10pIHtcbiAgICAgICAgdCA9IHRbcl0gPSBBcnJheS5pc0FycmF5KHRbcl0pID8gWyAuLi50W3JdIF0gOiB7XG4gICAgICAgICAgLi4udFtyXVxuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgaWYgKGUuaXRlbXMpIHtcbiAgICAgICAgdmFyIHUgPSArciA+PSAwID8gciA6IDA7XG4gICAgICAgIGZvciAodmFyIHkgPSAwLCBoID0gZS5pdGVtcy5sZW5ndGg7IHkgPCBoOyB5KyspIHtcbiAgICAgICAgICB0W3UgKyB5XSA9IGRlZXBNZXJnZSh0W3UgKyB5XSwgZS5pdGVtc1t5XSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodm9pZCAwICE9PSBlLmRhdGEpIHtcbiAgICAgICAgdFtyXSA9IGRlZXBNZXJnZSh0W3JdLCBlLmRhdGEpO1xuICAgICAgfVxuICAgIH07XG4gICAgZm9yICh2YXIgbCA9IDAsIGQgPSBzLmxlbmd0aDsgbCA8IGQ7IGwrKykge1xuICAgICAgX2xvb3AoKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgZi5kYXRhID0gKHIucGF5bG9hZCB8fCByKS5kYXRhIHx8IGUuZGF0YTtcbiAgICBuID0gci5lcnJvcnMgfHwgci5wYXlsb2FkICYmIHIucGF5bG9hZC5lcnJvcnMgfHwgbjtcbiAgfVxuICByZXR1cm4ge1xuICAgIG9wZXJhdGlvbjogZS5vcGVyYXRpb24sXG4gICAgZGF0YTogZi5kYXRhLFxuICAgIGVycm9yOiBuLmxlbmd0aCA/IG5ldyBDb21iaW5lZEVycm9yKHtcbiAgICAgIGdyYXBoUUxFcnJvcnM6IG4sXG4gICAgICByZXNwb25zZTogdFxuICAgIH0pIDogdm9pZCAwLFxuICAgIGV4dGVuc2lvbnM6IG8gPyBpIDogdm9pZCAwLFxuICAgIGhhc05leHQ6IG51bGwgIT0gci5oYXNOZXh0ID8gci5oYXNOZXh0IDogZS5oYXNOZXh0LFxuICAgIHN0YWxlOiAhMVxuICB9O1xufTtcblxudmFyIG1ha2VFcnJvclJlc3VsdCA9IChlLCByLCB0KSA9PiAoe1xuICBvcGVyYXRpb246IGUsXG4gIGRhdGE6IHZvaWQgMCxcbiAgZXJyb3I6IG5ldyBDb21iaW5lZEVycm9yKHtcbiAgICBuZXR3b3JrRXJyb3I6IHIsXG4gICAgcmVzcG9uc2U6IHRcbiAgfSksXG4gIGV4dGVuc2lvbnM6IHZvaWQgMCxcbiAgaGFzTmV4dDogITEsXG4gIHN0YWxlOiAhMVxufSk7XG5cbmZ1bmN0aW9uIG1ha2VGZXRjaEJvZHkoZSkge1xuICB2YXIgciA9IHtcbiAgICBxdWVyeTogdm9pZCAwLFxuICAgIGRvY3VtZW50SWQ6IHZvaWQgMCxcbiAgICBvcGVyYXRpb25OYW1lOiBnZXRPcGVyYXRpb25OYW1lKGUucXVlcnkpLFxuICAgIHZhcmlhYmxlczogZS52YXJpYWJsZXMgfHwgdm9pZCAwLFxuICAgIGV4dGVuc2lvbnM6IGUuZXh0ZW5zaW9uc1xuICB9O1xuICBpZiAoXCJkb2N1bWVudElkXCIgaW4gZS5xdWVyeSAmJiBlLnF1ZXJ5LmRvY3VtZW50SWQgJiYgKCFlLnF1ZXJ5LmRlZmluaXRpb25zIHx8ICFlLnF1ZXJ5LmRlZmluaXRpb25zLmxlbmd0aCkpIHtcbiAgICByLmRvY3VtZW50SWQgPSBlLnF1ZXJ5LmRvY3VtZW50SWQ7XG4gIH0gZWxzZSBpZiAoIWUuZXh0ZW5zaW9ucyB8fCAhZS5leHRlbnNpb25zLnBlcnNpc3RlZFF1ZXJ5IHx8IGUuZXh0ZW5zaW9ucy5wZXJzaXN0ZWRRdWVyeS5taXNzKSB7XG4gICAgci5xdWVyeSA9IHN0cmluZ2lmeURvY3VtZW50KGUucXVlcnkpO1xuICB9XG4gIHJldHVybiByO1xufVxuXG52YXIgbWFrZUZldGNoVVJMID0gKGUsIHIpID0+IHtcbiAgdmFyIHQgPSBcInF1ZXJ5XCIgPT09IGUua2luZCAmJiBlLmNvbnRleHQucHJlZmVyR2V0TWV0aG9kO1xuICBpZiAoIXQgfHwgIXIpIHtcbiAgICByZXR1cm4gZS5jb250ZXh0LnVybDtcbiAgfVxuICB2YXIgYSA9IHNwbGl0T3V0U2VhcmNoUGFyYW1zKGUuY29udGV4dC51cmwpO1xuICBmb3IgKHZhciBuIGluIHIpIHtcbiAgICB2YXIgbyA9IHJbbl07XG4gICAgaWYgKG8pIHtcbiAgICAgIGFbMV0uc2V0KG4sIFwib2JqZWN0XCIgPT0gdHlwZW9mIG8gPyBzdHJpbmdpZnlWYXJpYWJsZXMobykgOiBvKTtcbiAgICB9XG4gIH1cbiAgdmFyIGkgPSBhLmpvaW4oXCI/XCIpO1xuICBpZiAoaS5sZW5ndGggPiAyMDQ3ICYmIFwiZm9yY2VcIiAhPT0gdCkge1xuICAgIGUuY29udGV4dC5wcmVmZXJHZXRNZXRob2QgPSAhMTtcbiAgICByZXR1cm4gZS5jb250ZXh0LnVybDtcbiAgfVxuICByZXR1cm4gaTtcbn07XG5cbnZhciBzcGxpdE91dFNlYXJjaFBhcmFtcyA9IGUgPT4ge1xuICB2YXIgciA9IGUuaW5kZXhPZihcIj9cIik7XG4gIHJldHVybiByID4gLTEgPyBbIGUuc2xpY2UoMCwgciksIG5ldyBVUkxTZWFyY2hQYXJhbXMoZS5zbGljZShyICsgMSkpIF0gOiBbIGUsIG5ldyBVUkxTZWFyY2hQYXJhbXMgXTtcbn07XG5cbnZhciBzZXJpYWxpemVCb2R5ID0gKGUsIHIpID0+IHtcbiAgaWYgKHIgJiYgIShcInF1ZXJ5XCIgPT09IGUua2luZCAmJiAhIWUuY29udGV4dC5wcmVmZXJHZXRNZXRob2QpKSB7XG4gICAgdmFyIHQgPSBzdHJpbmdpZnlWYXJpYWJsZXMocik7XG4gICAgdmFyIGEgPSAoZSA9PiB7XG4gICAgICB2YXIgciA9IG5ldyBNYXA7XG4gICAgICBpZiAobCAhPT0gTm9vcENvbnN0cnVjdG9yIHx8IGQgIT09IE5vb3BDb25zdHJ1Y3Rvcikge1xuICAgICAgICBzLmNsZWFyKCk7XG4gICAgICAgIGV4dHJhY3QociwgXCJ2YXJpYWJsZXNcIiwgZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcjtcbiAgICB9KShyLnZhcmlhYmxlcyk7XG4gICAgaWYgKGEuc2l6ZSkge1xuICAgICAgdmFyIG4gPSBuZXcgRm9ybURhdGE7XG4gICAgICBuLmFwcGVuZChcIm9wZXJhdGlvbnNcIiwgdCk7XG4gICAgICBuLmFwcGVuZChcIm1hcFwiLCBzdHJpbmdpZnlWYXJpYWJsZXMoe1xuICAgICAgICAuLi5bIC4uLmEua2V5cygpIF0ubWFwKChlID0+IFsgZSBdKSlcbiAgICAgIH0pKTtcbiAgICAgIHZhciBvID0gMDtcbiAgICAgIGZvciAodmFyIGkgb2YgYS52YWx1ZXMoKSkge1xuICAgICAgICBuLmFwcGVuZChcIlwiICsgbysrLCBpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBuO1xuICAgIH1cbiAgICByZXR1cm4gdDtcbiAgfVxufTtcblxudmFyIG1ha2VGZXRjaE9wdGlvbnMgPSAoZSwgcikgPT4ge1xuICB2YXIgdCA9IHtcbiAgICBhY2NlcHQ6IFwic3Vic2NyaXB0aW9uXCIgPT09IGUua2luZCA/IFwidGV4dC9ldmVudC1zdHJlYW0sIG11bHRpcGFydC9taXhlZFwiIDogXCJhcHBsaWNhdGlvbi9ncmFwaHFsLXJlc3BvbnNlK2pzb24sIGFwcGxpY2F0aW9uL2dyYXBocWwranNvbiwgYXBwbGljYXRpb24vanNvbiwgdGV4dC9ldmVudC1zdHJlYW0sIG11bHRpcGFydC9taXhlZFwiXG4gIH07XG4gIHZhciBhID0gKFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgZS5jb250ZXh0LmZldGNoT3B0aW9ucyA/IGUuY29udGV4dC5mZXRjaE9wdGlvbnMoKSA6IGUuY29udGV4dC5mZXRjaE9wdGlvbnMpIHx8IHt9O1xuICBpZiAoYS5oZWFkZXJzKSB7XG4gICAgaWYgKChlID0+IFwiaGFzXCIgaW4gZSAmJiAhT2JqZWN0LmtleXMoZSkubGVuZ3RoKShhLmhlYWRlcnMpKSB7XG4gICAgICBhLmhlYWRlcnMuZm9yRWFjaCgoKGUsIHIpID0+IHtcbiAgICAgICAgdFtyXSA9IGU7XG4gICAgICB9KSk7XG4gICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGEuaGVhZGVycykpIHtcbiAgICAgIGEuaGVhZGVycy5mb3JFYWNoKCgoZSwgcikgPT4ge1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShlKSkge1xuICAgICAgICAgIGlmICh0W2VbMF1dKSB7XG4gICAgICAgICAgICB0W2VbMF1dID0gYCR7dFtlWzBdXX0sJHtlWzFdfWA7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRbZVswXV0gPSBlWzFdO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0W3JdID0gZTtcbiAgICAgICAgfVxuICAgICAgfSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBmb3IgKHZhciBuIGluIGEuaGVhZGVycykge1xuICAgICAgICB0W24udG9Mb3dlckNhc2UoKV0gPSBhLmhlYWRlcnNbbl07XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHZhciBvID0gc2VyaWFsaXplQm9keShlLCByKTtcbiAgaWYgKFwic3RyaW5nXCIgPT0gdHlwZW9mIG8gJiYgIXRbXCJjb250ZW50LXR5cGVcIl0pIHtcbiAgICB0W1wiY29udGVudC10eXBlXCJdID0gXCJhcHBsaWNhdGlvbi9qc29uXCI7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICAuLi5hLFxuICAgIG1ldGhvZDogbyA/IFwiUE9TVFwiIDogXCJHRVRcIixcbiAgICBib2R5OiBvLFxuICAgIGhlYWRlcnM6IHRcbiAgfTtcbn07XG5cbnZhciB5ID0gXCJ1bmRlZmluZWRcIiAhPSB0eXBlb2YgVGV4dERlY29kZXIgPyBuZXcgVGV4dERlY29kZXIgOiBudWxsO1xuXG52YXIgaCA9IC9ib3VuZGFyeT1cIj8oW149XCI7XSspXCI/L2k7XG5cbnZhciBtID0gL2RhdGE6ID8oW15cXG5dKykvO1xuXG52YXIgdG9TdHJpbmcgPSBlID0+IFwiQnVmZmVyXCIgPT09IGUuY29uc3RydWN0b3IubmFtZSA/IGUudG9TdHJpbmcoKSA6IHkuZGVjb2RlKGUpO1xuXG5hc3luYyBmdW5jdGlvbiogc3RyZWFtQm9keShlKSB7XG4gIGlmIChlLmJvZHlbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKSB7XG4gICAgZm9yIGF3YWl0ICh2YXIgciBvZiBlLmJvZHkpIHtcbiAgICAgIHlpZWxkIHRvU3RyaW5nKHIpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB2YXIgdCA9IGUuYm9keS5nZXRSZWFkZXIoKTtcbiAgICB2YXIgYTtcbiAgICB0cnkge1xuICAgICAgd2hpbGUgKCEoYSA9IGF3YWl0IHQucmVhZCgpKS5kb25lKSB7XG4gICAgICAgIHlpZWxkIHRvU3RyaW5nKGEudmFsdWUpO1xuICAgICAgfVxuICAgIH0gZmluYWxseSB7XG4gICAgICB0LmNhbmNlbCgpO1xuICAgIH1cbiAgfVxufVxuXG5hc3luYyBmdW5jdGlvbiogc3BsaXQoZSwgcikge1xuICB2YXIgdCA9IFwiXCI7XG4gIHZhciBhO1xuICBmb3IgYXdhaXQgKHZhciBuIG9mIGUpIHtcbiAgICB0ICs9IG47XG4gICAgd2hpbGUgKChhID0gdC5pbmRleE9mKHIpKSA+IC0xKSB7XG4gICAgICB5aWVsZCB0LnNsaWNlKDAsIGEpO1xuICAgICAgdCA9IHQuc2xpY2UoYSArIHIubGVuZ3RoKTtcbiAgICB9XG4gIH1cbn1cblxuYXN5bmMgZnVuY3Rpb24qIGZldGNoT3BlcmF0aW9uKGUsIHIsIHQpIHtcbiAgdmFyIGEgPSAhMDtcbiAgdmFyIG4gPSBudWxsO1xuICB2YXIgbztcbiAgdHJ5IHtcbiAgICB5aWVsZCBhd2FpdCBQcm9taXNlLnJlc29sdmUoKTtcbiAgICB2YXIgaSA9IChvID0gYXdhaXQgKGUuY29udGV4dC5mZXRjaCB8fCBmZXRjaCkociwgdCkpLmhlYWRlcnMuZ2V0KFwiQ29udGVudC1UeXBlXCIpIHx8IFwiXCI7XG4gICAgdmFyIHM7XG4gICAgaWYgKC9tdWx0aXBhcnRcXC9taXhlZC9pLnRlc3QoaSkpIHtcbiAgICAgIHMgPSBhc3luYyBmdW5jdGlvbiogcGFyc2VNdWx0aXBhcnRNaXhlZChlLCByKSB7XG4gICAgICAgIHZhciB0ID0gZS5tYXRjaChoKTtcbiAgICAgICAgdmFyIGEgPSBcIi0tXCIgKyAodCA/IHRbMV0gOiBcIi1cIik7XG4gICAgICAgIHZhciBuID0gITA7XG4gICAgICAgIHZhciBvO1xuICAgICAgICBmb3IgYXdhaXQgKHZhciBpIG9mIHNwbGl0KHN0cmVhbUJvZHkociksIFwiXFxyXFxuXCIgKyBhKSkge1xuICAgICAgICAgIGlmIChuKSB7XG4gICAgICAgICAgICBuID0gITE7XG4gICAgICAgICAgICB2YXIgcyA9IGkuaW5kZXhPZihhKTtcbiAgICAgICAgICAgIGlmIChzID4gLTEpIHtcbiAgICAgICAgICAgICAgaSA9IGkuc2xpY2UocyArIGEubGVuZ3RoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgeWllbGQgbyA9IEpTT04ucGFyc2UoaS5zbGljZShpLmluZGV4T2YoXCJcXHJcXG5cXHJcXG5cIikgKyA0KSk7XG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgaWYgKCFvKSB7XG4gICAgICAgICAgICAgIHRocm93IGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChvICYmICExID09PSBvLmhhc05leHQpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAobyAmJiAhMSAhPT0gby5oYXNOZXh0KSB7XG4gICAgICAgICAgeWllbGQge1xuICAgICAgICAgICAgaGFzTmV4dDogITFcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICB9KGksIG8pO1xuICAgIH0gZWxzZSBpZiAoL3RleHRcXC9ldmVudC1zdHJlYW0vaS50ZXN0KGkpKSB7XG4gICAgICBzID0gYXN5bmMgZnVuY3Rpb24qIHBhcnNlRXZlbnRTdHJlYW0oZSkge1xuICAgICAgICB2YXIgcjtcbiAgICAgICAgZm9yIGF3YWl0ICh2YXIgdCBvZiBzcGxpdChzdHJlYW1Cb2R5KGUpLCBcIlxcblxcblwiKSkge1xuICAgICAgICAgIHZhciBhID0gdC5tYXRjaChtKTtcbiAgICAgICAgICBpZiAoYSkge1xuICAgICAgICAgICAgdmFyIG4gPSBhWzFdO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgeWllbGQgciA9IEpTT04ucGFyc2Uobik7XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgIGlmICghcikge1xuICAgICAgICAgICAgICAgIHRocm93IGU7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChyICYmICExID09PSByLmhhc05leHQpIHtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChyICYmICExICE9PSByLmhhc05leHQpIHtcbiAgICAgICAgICB5aWVsZCB7XG4gICAgICAgICAgICBoYXNOZXh0OiAhMVxuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgIH0obyk7XG4gICAgfSBlbHNlIGlmICghL3RleHRcXC8vaS50ZXN0KGkpKSB7XG4gICAgICBzID0gYXN5bmMgZnVuY3Rpb24qIHBhcnNlSlNPTihlKSB7XG4gICAgICAgIHlpZWxkIEpTT04ucGFyc2UoYXdhaXQgZS50ZXh0KCkpO1xuICAgICAgfShvKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcyA9IGFzeW5jIGZ1bmN0aW9uKiBwYXJzZU1heWJlSlNPTihlKSB7XG4gICAgICAgIHZhciByID0gYXdhaXQgZS50ZXh0KCk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgdmFyIHQgPSBKU09OLnBhcnNlKHIpO1xuICAgICAgICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybignRm91bmQgcmVzcG9uc2Ugd2l0aCBjb250ZW50LXR5cGUgXCJ0ZXh0L3BsYWluXCIgYnV0IGl0IGhhZCBhIHZhbGlkIFwiYXBwbGljYXRpb24vanNvblwiIHJlc3BvbnNlLicpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB5aWVsZCB0O1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKHIpO1xuICAgICAgICB9XG4gICAgICB9KG8pO1xuICAgIH1cbiAgICB2YXIgZjtcbiAgICBmb3IgYXdhaXQgKHZhciBsIG9mIHMpIHtcbiAgICAgIGlmIChsLnBlbmRpbmcgJiYgIW4pIHtcbiAgICAgICAgZiA9IGwucGVuZGluZztcbiAgICAgIH0gZWxzZSBpZiAobC5wZW5kaW5nKSB7XG4gICAgICAgIGYgPSBbIC4uLmYsIC4uLmwucGVuZGluZyBdO1xuICAgICAgfVxuICAgICAgbiA9IG4gPyBtZXJnZVJlc3VsdFBhdGNoKG4sIGwsIG8sIGYpIDogbWFrZVJlc3VsdChlLCBsLCBvKTtcbiAgICAgIGEgPSAhMTtcbiAgICAgIHlpZWxkIG47XG4gICAgICBhID0gITA7XG4gICAgfVxuICAgIGlmICghbikge1xuICAgICAgeWllbGQgbiA9IG1ha2VSZXN1bHQoZSwge30sIG8pO1xuICAgIH1cbiAgfSBjYXRjaCAocikge1xuICAgIGlmICghYSkge1xuICAgICAgdGhyb3cgcjtcbiAgICB9XG4gICAgeWllbGQgbWFrZUVycm9yUmVzdWx0KGUsIG8gJiYgKG8uc3RhdHVzIDwgMjAwIHx8IG8uc3RhdHVzID49IDMwMCkgJiYgby5zdGF0dXNUZXh0ID8gbmV3IEVycm9yKG8uc3RhdHVzVGV4dCkgOiByLCBvKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBtYWtlRmV0Y2hTb3VyY2UoZSwgciwgdCkge1xuICB2YXIgYTtcbiAgaWYgKFwidW5kZWZpbmVkXCIgIT0gdHlwZW9mIEFib3J0Q29udHJvbGxlcikge1xuICAgIHQuc2lnbmFsID0gKGEgPSBuZXcgQWJvcnRDb250cm9sbGVyKS5zaWduYWw7XG4gIH1cbiAgcmV0dXJuIG4oKCgpID0+IHtcbiAgICBpZiAoYSkge1xuICAgICAgYS5hYm9ydCgpO1xuICAgIH1cbiAgfSkpKG8oKGUgPT4gISFlKSkoaShmZXRjaE9wZXJhdGlvbihlLCByLCB0KSkpKTtcbn1cblxuZXhwb3J0IHsgQ29tYmluZWRFcnJvciBhcyBDLCBtYWtlRmV0Y2hCb2R5IGFzIGEsIG1ha2VFcnJvclJlc3VsdCBhcyBiLCBtZXJnZVJlc3VsdFBhdGNoIGFzIGMsIG1ha2VGZXRjaFVSTCBhcyBkLCBtYWtlRmV0Y2hPcHRpb25zIGFzIGUsIG1ha2VGZXRjaFNvdXJjZSBhcyBmLCBnZXRPcGVyYXRpb25UeXBlIGFzIGcsIGNyZWF0ZVJlcXVlc3QgYXMgaCwgc3RyaW5naWZ5VmFyaWFibGVzIGFzIGksIGtleURvY3VtZW50IGFzIGssIG1ha2VSZXN1bHQgYXMgbSwgc3RyaW5naWZ5RG9jdW1lbnQgYXMgcyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXJxbC1jb3JlLWNodW5rLm1qcy5tYXBcbiJdLCJuYW1lcyI6WyJHcmFwaFFMRXJyb3IiLCJlIiwicHJpbnQiLCJyIiwicGFyc2UiLCJ0IiwiS2luZCIsImEiLCJvbkVuZCIsIm4iLCJmaWx0ZXIiLCJvIiwiZnJvbUFzeW5jSXRlcmFibGUiLCJpIiwicmVoeWRyYXRlR3JhcGhRbEVycm9yIiwibWVzc2FnZSIsImV4dGVuc2lvbnMiLCJuYW1lIiwibm9kZXMiLCJzb3VyY2UiLCJwb3NpdGlvbnMiLCJwYXRoIiwiQ29tYmluZWRFcnJvciIsIkVycm9yIiwidG9TdHJpbmciLCJjb25zdHJ1Y3RvciIsImdyYXBoUUxFcnJvcnMiLCJtYXAiLCJsZW5ndGgiLCJuZXR3b3JrRXJyb3IiLCJyZXNwb25zZSIsInBoYXNoIiwiY2hhckNvZGVBdCIsInMiLCJTZXQiLCJmIiwiV2Vha01hcCIsInN0cmluZ2lmeSIsImhhcyIsIkpTT04iLCJ0b0pTT04iLCJBcnJheSIsImlzQXJyYXkiLCJsIiwiTm9vcENvbnN0cnVjdG9yIiwiZCIsIk9iamVjdCIsImtleXMiLCJzb3J0IiwiZ2V0UHJvdG90eXBlT2YiLCJwcm90b3R5cGUiLCJnZXQiLCJNYXRoIiwicmFuZG9tIiwic2xpY2UiLCJzZXQiLCJfX2tleSIsImFkZCIsImMiLCJ2IiwicCIsInUiLCJkZWxldGUiLCJleHRyYWN0Iiwic3RyaW5naWZ5VmFyaWFibGVzIiwiY2xlYXIiLCJGaWxlIiwiQmxvYiIsInJlcGxhY2VPdXRzaWRlU3RyaW5ncyIsInJlcGxhY2UiLCJzYW5pdGl6ZURvY3VtZW50Iiwic3BsaXQiLCJqb2luIiwidHJpbSIsIk1hcCIsInN0cmluZ2lmeURvY3VtZW50IiwibG9jIiwiYm9keSIsInN0YXJ0IiwiZW5kIiwibG9jYXRpb25PZmZzZXQiLCJsaW5lIiwiY29sdW1uIiwiaGFzaERvY3VtZW50IiwiZG9jdW1lbnRJZCIsImRlZmluaXRpb25zIiwiZ2V0T3BlcmF0aW9uTmFtZSIsImtleURvY3VtZW50Iiwibm9Mb2NhdGlvbiIsImNyZWF0ZVJlcXVlc3QiLCJrZXkiLCJxdWVyeSIsInZhcmlhYmxlcyIsImtpbmQiLCJPUEVSQVRJT05fREVGSU5JVElPTiIsInZhbHVlIiwiZ2V0T3BlcmF0aW9uVHlwZSIsIm9wZXJhdGlvbiIsIm1ha2VSZXN1bHQiLCJlcnJvcnMiLCJkYXRhIiwiZXJyb3IiLCJoYXNOZXh0Iiwic3RhbGUiLCJkZWVwTWVyZ2UiLCJtZXJnZVJlc3VsdFBhdGNoIiwicGF5bG9hZCIsImluY3JlbWVudGFsIiwiX2xvb3AiLCJwdXNoIiwiYXNzaWduIiwiZmluZCIsImlkIiwic3ViUGF0aCIsIml0ZW1zIiwieSIsImgiLCJtYWtlRXJyb3JSZXN1bHQiLCJtYWtlRmV0Y2hCb2R5Iiwib3BlcmF0aW9uTmFtZSIsInBlcnNpc3RlZFF1ZXJ5IiwibWlzcyIsIm1ha2VGZXRjaFVSTCIsImNvbnRleHQiLCJwcmVmZXJHZXRNZXRob2QiLCJ1cmwiLCJzcGxpdE91dFNlYXJjaFBhcmFtcyIsImluZGV4T2YiLCJVUkxTZWFyY2hQYXJhbXMiLCJzZXJpYWxpemVCb2R5Iiwic2l6ZSIsIkZvcm1EYXRhIiwiYXBwZW5kIiwidmFsdWVzIiwibWFrZUZldGNoT3B0aW9ucyIsImFjY2VwdCIsImZldGNoT3B0aW9ucyIsImhlYWRlcnMiLCJmb3JFYWNoIiwidG9Mb3dlckNhc2UiLCJtZXRob2QiLCJUZXh0RGVjb2RlciIsIm0iLCJkZWNvZGUiLCJzdHJlYW1Cb2R5IiwiU3ltYm9sIiwiYXN5bmNJdGVyYXRvciIsImdldFJlYWRlciIsInJlYWQiLCJkb25lIiwiY2FuY2VsIiwiZmV0Y2hPcGVyYXRpb24iLCJQcm9taXNlIiwicmVzb2x2ZSIsImZldGNoIiwidGVzdCIsInBhcnNlTXVsdGlwYXJ0TWl4ZWQiLCJtYXRjaCIsInBhcnNlRXZlbnRTdHJlYW0iLCJwYXJzZUpTT04iLCJ0ZXh0IiwicGFyc2VNYXliZUpTT04iLCJjb25zb2xlIiwid2FybiIsInBlbmRpbmciLCJzdGF0dXMiLCJzdGF0dXNUZXh0IiwibWFrZUZldGNoU291cmNlIiwiQWJvcnRDb250cm9sbGVyIiwic2lnbmFsIiwiYWJvcnQiLCJDIiwiYiIsImciLCJrIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@urql/core/dist/urql-core-chunk.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@urql/core/dist/urql-core.mjs":
/*!****************************************************!*\
  !*** ./node_modules/@urql/core/dist/urql-core.mjs ***!
  \****************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Client: function() { return /* binding */ C; },\n/* harmony export */   CombinedError: function() { return /* reexport safe */ _urql_core_chunk_mjs__WEBPACK_IMPORTED_MODULE_0__.C; },\n/* harmony export */   cacheExchange: function() { return /* binding */ cacheExchange; },\n/* harmony export */   composeExchanges: function() { return /* binding */ composeExchanges; },\n/* harmony export */   createClient: function() { return /* binding */ Q; },\n/* harmony export */   createRequest: function() { return /* reexport safe */ _urql_core_chunk_mjs__WEBPACK_IMPORTED_MODULE_0__.h; },\n/* harmony export */   debugExchange: function() { return /* binding */ debugExchange; },\n/* harmony export */   errorExchange: function() { return /* binding */ mapExchange; },\n/* harmony export */   fetchExchange: function() { return /* binding */ fetchExchange; },\n/* harmony export */   formatDocument: function() { return /* binding */ formatDocument; },\n/* harmony export */   gql: function() { return /* binding */ gql; },\n/* harmony export */   makeErrorResult: function() { return /* reexport safe */ _urql_core_chunk_mjs__WEBPACK_IMPORTED_MODULE_0__.b; },\n/* harmony export */   makeOperation: function() { return /* binding */ makeOperation; },\n/* harmony export */   makeResult: function() { return /* reexport safe */ _urql_core_chunk_mjs__WEBPACK_IMPORTED_MODULE_0__.m; },\n/* harmony export */   mapExchange: function() { return /* binding */ mapExchange; },\n/* harmony export */   mergeResultPatch: function() { return /* reexport safe */ _urql_core_chunk_mjs__WEBPACK_IMPORTED_MODULE_0__.c; },\n/* harmony export */   ssrExchange: function() { return /* binding */ ssrExchange; },\n/* harmony export */   stringifyDocument: function() { return /* reexport safe */ _urql_core_chunk_mjs__WEBPACK_IMPORTED_MODULE_0__.s; },\n/* harmony export */   stringifyVariables: function() { return /* reexport safe */ _urql_core_chunk_mjs__WEBPACK_IMPORTED_MODULE_0__.i; },\n/* harmony export */   subscriptionExchange: function() { return /* binding */ subscriptionExchange; }\n/* harmony export */ });\n/* harmony import */ var _0no_co_graphql_web__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @0no-co/graphql.web */ \"(app-pages-browser)/./node_modules/@0no-co/graphql.web/dist/graphql.web.mjs\");\n/* harmony import */ var _urql_core_chunk_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./urql-core-chunk.mjs */ \"(app-pages-browser)/./node_modules/@urql/core/dist/urql-core-chunk.mjs\");\n/* harmony import */ var wonka__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! wonka */ \"(app-pages-browser)/./node_modules/wonka/dist/wonka.mjs\");\n\n\n\n\nvar collectTypes = (e, r)=>{\n    if (Array.isArray(e)) {\n        for(var t = 0, n = e.length; t < n; t++){\n            collectTypes(e[t], r);\n        }\n    } else if (\"object\" == typeof e && null !== e) {\n        for(var a in e){\n            if (\"__typename\" === a && \"string\" == typeof e[a]) {\n                r.add(e[a]);\n            } else {\n                collectTypes(e[a], r);\n            }\n        }\n    }\n    return r;\n};\nvar formatNode = (r)=>{\n    if (\"definitions\" in r) {\n        var t = [];\n        for(var n = 0, a = r.definitions.length; n < a; n++){\n            var i = formatNode(r.definitions[n]);\n            t.push(i);\n        }\n        return {\n            ...r,\n            definitions: t\n        };\n    }\n    if (\"directives\" in r && r.directives && r.directives.length) {\n        var o = [];\n        var s = {};\n        for(var c = 0, u = r.directives.length; c < u; c++){\n            var p = r.directives[c];\n            var d = p.name.value;\n            if (\"_\" !== d[0]) {\n                o.push(p);\n            } else {\n                d = d.slice(1);\n            }\n            s[d] = p;\n        }\n        r = {\n            ...r,\n            directives: o,\n            _directives: s\n        };\n    }\n    if (\"selectionSet\" in r) {\n        var l = [];\n        var v = r.kind === _0no_co_graphql_web__WEBPACK_IMPORTED_MODULE_1__.Kind.OPERATION_DEFINITION;\n        if (r.selectionSet) {\n            for(var f = 0, h = r.selectionSet.selections.length; f < h; f++){\n                var k = r.selectionSet.selections[f];\n                v = v || k.kind === _0no_co_graphql_web__WEBPACK_IMPORTED_MODULE_1__.Kind.FIELD && \"__typename\" === k.name.value && !k.alias;\n                var y = formatNode(k);\n                l.push(y);\n            }\n            if (!v) {\n                l.push({\n                    kind: _0no_co_graphql_web__WEBPACK_IMPORTED_MODULE_1__.Kind.FIELD,\n                    name: {\n                        kind: _0no_co_graphql_web__WEBPACK_IMPORTED_MODULE_1__.Kind.NAME,\n                        value: \"__typename\"\n                    },\n                    _generated: !0\n                });\n            }\n            return {\n                ...r,\n                selectionSet: {\n                    ...r.selectionSet,\n                    selections: l\n                }\n            };\n        }\n    }\n    return r;\n};\nvar I = new Map;\nvar formatDocument = (e)=>{\n    var t = (0,_urql_core_chunk_mjs__WEBPACK_IMPORTED_MODULE_0__.k)(e);\n    var n = I.get(t.__key);\n    if (!n) {\n        I.set(t.__key, n = formatNode(t));\n        Object.defineProperty(n, \"__key\", {\n            value: t.__key,\n            enumerable: !1\n        });\n    }\n    return n;\n};\nfunction withPromise(e) {\n    var source$ = (r)=>e(r);\n    source$.toPromise = ()=>(0,wonka__WEBPACK_IMPORTED_MODULE_2__.toPromise)((0,wonka__WEBPACK_IMPORTED_MODULE_2__.take)(1)((0,wonka__WEBPACK_IMPORTED_MODULE_2__.filter)((e)=>!e.stale && !e.hasNext)(source$)));\n    source$.then = (e, r)=>source$.toPromise().then(e, r);\n    source$.subscribe = (e)=>(0,wonka__WEBPACK_IMPORTED_MODULE_2__.subscribe)(e)(source$);\n    return source$;\n}\nfunction makeOperation(e, r, t) {\n    return {\n        ...r,\n        kind: e,\n        context: r.context ? {\n            ...r.context,\n            ...t\n        } : t || r.context\n    };\n}\nvar addMetadata = (e, r)=>makeOperation(e.kind, e, {\n        meta: {\n            ...e.context.meta,\n            ...r\n        }\n    });\nvar noop = ()=>{};\nfunction gql(n) {\n    var a = new Map;\n    var i = [];\n    var o = [];\n    var s = Array.isArray(n) ? n[0] : n || \"\";\n    for(var c = 1; c < arguments.length; c++){\n        var u = arguments[c];\n        if (u && u.definitions) {\n            o.push(u);\n        } else {\n            s += u;\n        }\n        s += arguments[0][c];\n    }\n    o.unshift((0,_urql_core_chunk_mjs__WEBPACK_IMPORTED_MODULE_0__.k)(s));\n    for(var p = 0; p < o.length; p++){\n        for(var d = 0; d < o[p].definitions.length; d++){\n            var l = o[p].definitions[d];\n            if (l.kind === _0no_co_graphql_web__WEBPACK_IMPORTED_MODULE_1__.Kind.FRAGMENT_DEFINITION) {\n                var v = l.name.value;\n                var f = (0,_urql_core_chunk_mjs__WEBPACK_IMPORTED_MODULE_0__.s)(l);\n                if (!a.has(v)) {\n                    a.set(v, f);\n                    i.push(l);\n                } else if ( true && a.get(v) !== f) {\n                    console.warn(\"[WARNING: Duplicate Fragment] A fragment with name `\" + v + \"` already exists in this document.\\nWhile fragment names may not be unique across your source, each name must be unique per document.\");\n                }\n            } else {\n                i.push(l);\n            }\n        }\n    }\n    return (0,_urql_core_chunk_mjs__WEBPACK_IMPORTED_MODULE_0__.k)({\n        kind: _0no_co_graphql_web__WEBPACK_IMPORTED_MODULE_1__.Kind.DOCUMENT,\n        definitions: i\n    });\n}\nvar shouldSkip = (param)=>{\n    let { kind: e } = param;\n    return \"mutation\" !== e && \"query\" !== e;\n};\nvar mapTypeNames = (e)=>{\n    var r = formatDocument(e.query);\n    if (r !== e.query) {\n        var t = makeOperation(e.kind, e);\n        t.query = r;\n        return t;\n    } else {\n        return e;\n    }\n};\nvar cacheExchange = (param)=>{\n    let { forward: e, client: r, dispatchDebug: t } = param;\n    var a = new Map;\n    var i = new Map;\n    var isOperationCached = (e)=>\"query\" === e.kind && \"network-only\" !== e.context.requestPolicy && (\"cache-only\" === e.context.requestPolicy || a.has(e.key));\n    return (o)=>{\n        var s = (0,wonka__WEBPACK_IMPORTED_MODULE_2__.map)((e)=>{\n            var i = a.get(e.key);\n             true && t({\n                operation: e,\n                ...i ? {\n                    type: \"cacheHit\",\n                    message: \"The result was successfully retried from the cache\"\n                } : {\n                    type: \"cacheMiss\",\n                    message: \"The result could not be retrieved from the cache\"\n                },\n                source: \"cacheExchange\"\n            });\n            var o = i || (0,_urql_core_chunk_mjs__WEBPACK_IMPORTED_MODULE_0__.m)(e, {\n                data: null\n            });\n            o = {\n                ...o,\n                operation: addMetadata(e, {\n                    cacheOutcome: i ? \"hit\" : \"miss\"\n                })\n            };\n            if (\"cache-and-network\" === e.context.requestPolicy) {\n                o.stale = !0;\n                reexecuteOperation(r, e);\n            }\n            return o;\n        })((0,wonka__WEBPACK_IMPORTED_MODULE_2__.filter)((e)=>!shouldSkip(e) && isOperationCached(e))(o));\n        var c = (0,wonka__WEBPACK_IMPORTED_MODULE_2__.tap)((e)=>{\n            var { operation: n } = e;\n            if (!n) {\n                return;\n            }\n            var o = n.context.additionalTypenames || [];\n            if (\"subscription\" !== e.operation.kind) {\n                o = ((e)=>[\n                        ...collectTypes(e, new Set)\n                    ])(e.data).concat(o);\n            }\n            if (\"mutation\" === e.operation.kind || \"subscription\" === e.operation.kind) {\n                var s = new Set;\n                 true && t({\n                    type: \"cacheInvalidation\",\n                    message: \"The following typenames have been invalidated: \".concat(o),\n                    operation: n,\n                    data: {\n                        typenames: o,\n                        response: e\n                    },\n                    source: \"cacheExchange\"\n                });\n                for(var c = 0; c < o.length; c++){\n                    var u = o[c];\n                    var p = i.get(u);\n                    if (!p) {\n                        i.set(u, p = new Set);\n                    }\n                    for (var d of p.values()){\n                        s.add(d);\n                    }\n                    p.clear();\n                }\n                for (var l of s.values()){\n                    if (a.has(l)) {\n                        n = a.get(l).operation;\n                        a.delete(l);\n                        reexecuteOperation(r, n);\n                    }\n                }\n            } else if (\"query\" === n.kind && e.data) {\n                a.set(n.key, e);\n                for(var v = 0; v < o.length; v++){\n                    var f = o[v];\n                    var h = i.get(f);\n                    if (!h) {\n                        i.set(f, h = new Set);\n                    }\n                    h.add(n.key);\n                }\n            }\n        })(e((0,wonka__WEBPACK_IMPORTED_MODULE_2__.filter)((e)=>\"query\" !== e.kind || \"cache-only\" !== e.context.requestPolicy)((0,wonka__WEBPACK_IMPORTED_MODULE_2__.map)((e)=>addMetadata(e, {\n                cacheOutcome: \"miss\"\n            }))((0,wonka__WEBPACK_IMPORTED_MODULE_2__.merge)([\n            (0,wonka__WEBPACK_IMPORTED_MODULE_2__.map)(mapTypeNames)((0,wonka__WEBPACK_IMPORTED_MODULE_2__.filter)((e)=>!shouldSkip(e) && !isOperationCached(e))(o)),\n            (0,wonka__WEBPACK_IMPORTED_MODULE_2__.filter)((e)=>shouldSkip(e))(o)\n        ])))));\n        return (0,wonka__WEBPACK_IMPORTED_MODULE_2__.merge)([\n            s,\n            c\n        ]);\n    };\n};\nvar reexecuteOperation = (e, r)=>e.reexecuteOperation(makeOperation(r.kind, r, {\n        requestPolicy: \"network-only\"\n    }));\nvar T = new Set;\nvar ssrExchange = function() {\n    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n    var r = !!e.staleWhileRevalidate;\n    var t = !!e.includeExtensions;\n    var n = {};\n    var i = [];\n    var invalidate = (e)=>{\n        i.push(e.operation.key);\n        if (1 === i.length) {\n            Promise.resolve().then(()=>{\n                var e;\n                while(e = i.shift()){\n                    n[e] = null;\n                }\n            });\n        }\n    };\n    var ssr = (param)=>{\n        let { client: i, forward: o } = param;\n        return (s)=>{\n            var c = e && \"boolean\" == typeof e.isClient ? !!e.isClient : !i.suspense;\n            var u = o((0,wonka__WEBPACK_IMPORTED_MODULE_2__.map)(mapTypeNames)((0,wonka__WEBPACK_IMPORTED_MODULE_2__.filter)((e)=>\"teardown\" === e.kind || !n[e.key] || !!n[e.key].hasNext || \"network-only\" === e.context.requestPolicy)(s)));\n            var p = (0,wonka__WEBPACK_IMPORTED_MODULE_2__.map)((e)=>{\n                var o = ((e, r, t)=>({\n                        operation: e,\n                        data: r.data ? JSON.parse(r.data) : void 0,\n                        extensions: t && r.extensions ? JSON.parse(r.extensions) : void 0,\n                        error: r.error ? new _urql_core_chunk_mjs__WEBPACK_IMPORTED_MODULE_0__.C({\n                            networkError: r.error.networkError ? new Error(r.error.networkError) : void 0,\n                            graphQLErrors: r.error.graphQLErrors\n                        }) : void 0,\n                        stale: !1,\n                        hasNext: !!r.hasNext\n                    }))(e, n[e.key], t);\n                if (r && !T.has(e.key)) {\n                    o.stale = !0;\n                    T.add(e.key);\n                    reexecuteOperation(i, e);\n                }\n                return {\n                    ...o,\n                    operation: addMetadata(e, {\n                        cacheOutcome: \"hit\"\n                    })\n                };\n            })((0,wonka__WEBPACK_IMPORTED_MODULE_2__.filter)((e)=>\"teardown\" !== e.kind && !!n[e.key] && \"network-only\" !== e.context.requestPolicy)(s));\n            if (!c) {\n                u = (0,wonka__WEBPACK_IMPORTED_MODULE_2__.tap)((e)=>{\n                    var { operation: r } = e;\n                    if (\"mutation\" !== r.kind) {\n                        var a = ((e, r)=>{\n                            var t = {\n                                hasNext: e.hasNext\n                            };\n                            if (void 0 !== e.data) {\n                                t.data = JSON.stringify(e.data);\n                            }\n                            if (r && void 0 !== e.extensions) {\n                                t.extensions = JSON.stringify(e.extensions);\n                            }\n                            if (e.error) {\n                                t.error = {\n                                    graphQLErrors: e.error.graphQLErrors.map((e)=>{\n                                        if (!e.path && !e.extensions) {\n                                            return e.message;\n                                        }\n                                        return {\n                                            message: e.message,\n                                            path: e.path,\n                                            extensions: e.extensions\n                                        };\n                                    })\n                                };\n                                if (e.error.networkError) {\n                                    t.error.networkError = \"\" + e.error.networkError;\n                                }\n                            }\n                            return t;\n                        })(e, t);\n                        n[r.key] = a;\n                    }\n                })(u);\n            } else {\n                p = (0,wonka__WEBPACK_IMPORTED_MODULE_2__.tap)(invalidate)(p);\n            }\n            return (0,wonka__WEBPACK_IMPORTED_MODULE_2__.merge)([\n                u,\n                p\n            ]);\n        };\n    };\n    ssr.restoreData = (e)=>{\n        for(var r in e){\n            if (null !== n[r]) {\n                n[r] = e[r];\n            }\n        }\n    };\n    ssr.extractData = ()=>{\n        var e = {};\n        for(var r in n){\n            if (null != n[r]) {\n                e[r] = n[r];\n            }\n        }\n        return e;\n    };\n    if (e && e.initialState) {\n        ssr.restoreData(e.initialState);\n    }\n    return ssr;\n};\nvar subscriptionExchange = (param)=>{\n    let { forwardSubscription: e, enableAllOperations: r, isSubscriptionOperation: t } = param;\n    return (param)=>{\n        let { client: a, forward: i } = param;\n        var u = t || ((e)=>\"subscription\" === e.kind || !!r && (\"query\" === e.kind || \"mutation\" === e.kind));\n        return (r)=>{\n            var t = (0,wonka__WEBPACK_IMPORTED_MODULE_2__.mergeMap)((t)=>{\n                var { key: i } = t;\n                var u = (0,wonka__WEBPACK_IMPORTED_MODULE_2__.filter)((e)=>\"teardown\" === e.kind && e.key === i)(r);\n                return (0,wonka__WEBPACK_IMPORTED_MODULE_2__.takeUntil)(u)(((r)=>{\n                    var t = e((0,_urql_core_chunk_mjs__WEBPACK_IMPORTED_MODULE_0__.a)(r), r);\n                    return (0,wonka__WEBPACK_IMPORTED_MODULE_2__.make)((e)=>{\n                        var i = !1;\n                        var o;\n                        var u;\n                        function nextResult(t) {\n                            e.next(u = u ? (0,_urql_core_chunk_mjs__WEBPACK_IMPORTED_MODULE_0__.c)(u, t) : (0,_urql_core_chunk_mjs__WEBPACK_IMPORTED_MODULE_0__.m)(r, t));\n                        }\n                        Promise.resolve().then(()=>{\n                            if (i) {\n                                return;\n                            }\n                            o = t.subscribe({\n                                next: nextResult,\n                                error (t) {\n                                    if (Array.isArray(t)) {\n                                        nextResult({\n                                            errors: t\n                                        });\n                                    } else {\n                                        e.next((0,_urql_core_chunk_mjs__WEBPACK_IMPORTED_MODULE_0__.b)(r, t));\n                                    }\n                                    e.complete();\n                                },\n                                complete () {\n                                    if (!i) {\n                                        i = !0;\n                                        if (\"subscription\" === r.kind) {\n                                            a.reexecuteOperation(makeOperation(\"teardown\", r, r.context));\n                                        }\n                                        if (u && u.hasNext) {\n                                            nextResult({\n                                                hasNext: !1\n                                            });\n                                        }\n                                        e.complete();\n                                    }\n                                }\n                            });\n                        });\n                        return ()=>{\n                            i = !0;\n                            if (o) {\n                                o.unsubscribe();\n                            }\n                        };\n                    });\n                })(t));\n            })((0,wonka__WEBPACK_IMPORTED_MODULE_2__.filter)((e)=>\"teardown\" !== e.kind && u(e))(r));\n            var p = i((0,wonka__WEBPACK_IMPORTED_MODULE_2__.filter)((e)=>\"teardown\" === e.kind || !u(e))(r));\n            return (0,wonka__WEBPACK_IMPORTED_MODULE_2__.merge)([\n                t,\n                p\n            ]);\n        };\n    };\n};\nvar debugExchange = (param)=>{\n    let { forward: e } = param;\n    if (false) {} else {\n        return (r)=>(0,wonka__WEBPACK_IMPORTED_MODULE_2__.tap)((e)=>console.log(\"[Exchange debug]: Completed operation: \", e))(e((0,wonka__WEBPACK_IMPORTED_MODULE_2__.tap)((e)=>console.log(\"[Exchange debug]: Incoming operation: \", e))(r)));\n    }\n};\nvar fetchExchange = (param)=>{\n    let { forward: e, dispatchDebug: r } = param;\n    return (t)=>{\n        var n = (0,wonka__WEBPACK_IMPORTED_MODULE_2__.mergeMap)((e)=>{\n            var n = (0,_urql_core_chunk_mjs__WEBPACK_IMPORTED_MODULE_0__.a)(e);\n            var a = (0,_urql_core_chunk_mjs__WEBPACK_IMPORTED_MODULE_0__.d)(e, n);\n            var i = (0,_urql_core_chunk_mjs__WEBPACK_IMPORTED_MODULE_0__.e)(e, n);\n             true && r({\n                type: \"fetchRequest\",\n                message: \"A fetch request is being executed.\",\n                operation: e,\n                data: {\n                    url: a,\n                    fetchOptions: i\n                },\n                source: \"fetchExchange\"\n            });\n            var s = (0,wonka__WEBPACK_IMPORTED_MODULE_2__.takeUntil)((0,wonka__WEBPACK_IMPORTED_MODULE_2__.filter)((r)=>\"teardown\" === r.kind && r.key === e.key)(t))((0,_urql_core_chunk_mjs__WEBPACK_IMPORTED_MODULE_0__.f)(e, a, i));\n            if (true) {\n                return (0,wonka__WEBPACK_IMPORTED_MODULE_2__.onPush)((t)=>{\n                    var n = !t.data ? t.error : void 0;\n                     true && r({\n                        type: n ? \"fetchError\" : \"fetchSuccess\",\n                        message: \"A \".concat(n ? \"failed\" : \"successful\", \" fetch response has been returned.\"),\n                        operation: e,\n                        data: {\n                            url: a,\n                            fetchOptions: i,\n                            value: n || t\n                        },\n                        source: \"fetchExchange\"\n                    });\n                })(s);\n            }\n            return s;\n        })((0,wonka__WEBPACK_IMPORTED_MODULE_2__.filter)((e)=>\"teardown\" !== e.kind && (\"subscription\" !== e.kind || !!e.context.fetchSubscriptions))(t));\n        var a = e((0,wonka__WEBPACK_IMPORTED_MODULE_2__.filter)((e)=>\"teardown\" === e.kind || \"subscription\" === e.kind && !e.context.fetchSubscriptions)(t));\n        return (0,wonka__WEBPACK_IMPORTED_MODULE_2__.merge)([\n            n,\n            a\n        ]);\n    };\n};\nvar composeExchanges = (e)=>(param)=>{\n        let { client: r, forward: t, dispatchDebug: n } = param;\n        return e.reduceRight((e, t)=>{\n            var a = !1;\n            return t({\n                client: r,\n                forward (r) {\n                    if (true) {\n                        if (a) {\n                            throw new Error(\"forward() must only be called once in each Exchange.\");\n                        }\n                        a = !0;\n                    }\n                    return (0,wonka__WEBPACK_IMPORTED_MODULE_2__.share)(e((0,wonka__WEBPACK_IMPORTED_MODULE_2__.share)(r)));\n                },\n                dispatchDebug (e) {\n                     true && n({\n                        timestamp: Date.now(),\n                        source: t.name,\n                        ...e\n                    });\n                }\n            });\n        }, t);\n    };\nvar mapExchange = (param)=>{\n    let { onOperation: e, onResult: r, onError: t } = param;\n    return (param)=>{\n        let { forward: n } = param;\n        return (a)=>(0,wonka__WEBPACK_IMPORTED_MODULE_2__.mergeMap)((e)=>{\n                if (t && e.error) {\n                    t(e.error, e.operation);\n                }\n                var n = r && r(e) || e;\n                return \"then\" in n ? (0,wonka__WEBPACK_IMPORTED_MODULE_2__.fromPromise)(n) : (0,wonka__WEBPACK_IMPORTED_MODULE_2__.fromValue)(n);\n            })(n((0,wonka__WEBPACK_IMPORTED_MODULE_2__.mergeMap)((r)=>{\n                var t = e && e(r) || r;\n                return \"then\" in t ? (0,wonka__WEBPACK_IMPORTED_MODULE_2__.fromPromise)(t) : (0,wonka__WEBPACK_IMPORTED_MODULE_2__.fromValue)(t);\n            })(a)));\n    };\n};\nvar fallbackExchange = (param)=>{\n    let { dispatchDebug: e } = param;\n    return (r)=>{\n        if (true) {\n            r = (0,wonka__WEBPACK_IMPORTED_MODULE_2__.tap)((r)=>{\n                if (\"teardown\" !== r.kind && \"production\" !== \"development\") {\n                    var t = 'No exchange has handled operations of kind \"'.concat(r.kind, \"\\\". Check whether you've added an exchange responsible for these operations.\");\n                     true && e({\n                        type: \"fallbackCatch\",\n                        message: t,\n                        operation: r,\n                        source: \"fallbackExchange\"\n                    });\n                    console.warn(t);\n                }\n            })(r);\n        }\n        return (0,wonka__WEBPACK_IMPORTED_MODULE_2__.filter)((e)=>!1)(r);\n    };\n};\nvar C = function Client(e) {\n    if ( true && !e.url) {\n        throw new Error(\"You are creating an urql-client without a url.\");\n    }\n    var r = 0;\n    var t = new Map;\n    var n = new Map;\n    var a = new Set;\n    var i = [];\n    var o = {\n        url: e.url,\n        fetchSubscriptions: e.fetchSubscriptions,\n        fetchOptions: e.fetchOptions,\n        fetch: e.fetch,\n        preferGetMethod: e.preferGetMethod,\n        requestPolicy: e.requestPolicy || \"cache-first\"\n    };\n    var s = (0,wonka__WEBPACK_IMPORTED_MODULE_2__.makeSubject)();\n    function nextOperation(e) {\n        if (\"mutation\" === e.kind || \"teardown\" === e.kind || !a.has(e.key)) {\n            if (\"teardown\" === e.kind) {\n                a.delete(e.key);\n            } else if (\"mutation\" !== e.kind) {\n                a.add(e.key);\n            }\n            s.next(e);\n        }\n    }\n    var c = !1;\n    function dispatchOperation(e) {\n        if (e) {\n            nextOperation(e);\n        }\n        if (!c) {\n            c = !0;\n            while(c && (e = i.shift())){\n                nextOperation(e);\n            }\n            c = !1;\n        }\n    }\n    var makeResultSource = (e)=>{\n        var r = (0,wonka__WEBPACK_IMPORTED_MODULE_2__.takeUntil)((0,wonka__WEBPACK_IMPORTED_MODULE_2__.filter)((r)=>\"teardown\" === r.kind && r.key === e.key)(s.source))((0,wonka__WEBPACK_IMPORTED_MODULE_2__.filter)((r)=>r.operation.kind === e.kind && r.operation.key === e.key && (!r.operation.context._instance || r.operation.context._instance === e.context._instance))(E));\n        if (\"query\" !== e.kind) {\n            r = (0,wonka__WEBPACK_IMPORTED_MODULE_2__.takeWhile)((e)=>!!e.hasNext, !0)(r);\n        } else {\n            r = (0,wonka__WEBPACK_IMPORTED_MODULE_2__.switchMap)((r)=>{\n                var t = (0,wonka__WEBPACK_IMPORTED_MODULE_2__.fromValue)(r);\n                return r.stale || r.hasNext ? t : (0,wonka__WEBPACK_IMPORTED_MODULE_2__.merge)([\n                    t,\n                    (0,wonka__WEBPACK_IMPORTED_MODULE_2__.map)(()=>{\n                        r.stale = !0;\n                        return r;\n                    })((0,wonka__WEBPACK_IMPORTED_MODULE_2__.take)(1)((0,wonka__WEBPACK_IMPORTED_MODULE_2__.filter)((r)=>r.key === e.key)(s.source)))\n                ]);\n            })(r);\n        }\n        if (\"mutation\" !== e.kind) {\n            r = (0,wonka__WEBPACK_IMPORTED_MODULE_2__.onEnd)(()=>{\n                a.delete(e.key);\n                t.delete(e.key);\n                n.delete(e.key);\n                c = !1;\n                for(var r = i.length - 1; r >= 0; r--){\n                    if (i[r].key === e.key) {\n                        i.splice(r, 1);\n                    }\n                }\n                nextOperation(makeOperation(\"teardown\", e, e.context));\n            })((0,wonka__WEBPACK_IMPORTED_MODULE_2__.onPush)((r)=>{\n                if (r.stale) {\n                    if (!r.hasNext) {\n                        a.delete(e.key);\n                    } else {\n                        for(var n = 0; n < i.length; n++){\n                            var o = i[n];\n                            if (o.key === r.operation.key) {\n                                a.delete(o.key);\n                                break;\n                            }\n                        }\n                    }\n                } else if (!r.hasNext) {\n                    a.delete(e.key);\n                }\n                t.set(e.key, r);\n            })(r));\n        } else {\n            r = (0,wonka__WEBPACK_IMPORTED_MODULE_2__.onStart)(()=>{\n                nextOperation(e);\n            })(r);\n        }\n        return (0,wonka__WEBPACK_IMPORTED_MODULE_2__.share)(r);\n    };\n    var u = this instanceof Client ? this : Object.create(Client.prototype);\n    var p = Object.assign(u, {\n        suspense: !!e.suspense,\n        operations$: s.source,\n        reexecuteOperation (e) {\n            if (\"teardown\" === e.kind) {\n                dispatchOperation(e);\n            } else if (\"mutation\" === e.kind) {\n                i.push(e);\n                Promise.resolve().then(dispatchOperation);\n            } else if (n.has(e.key)) {\n                var r = !1;\n                for(var t = 0; t < i.length; t++){\n                    if (i[t].key === e.key) {\n                        i[t] = e;\n                        r = !0;\n                    }\n                }\n                if (!(r || a.has(e.key) && \"network-only\" !== e.context.requestPolicy)) {\n                    i.push(e);\n                    Promise.resolve().then(dispatchOperation);\n                } else {\n                    a.delete(e.key);\n                    Promise.resolve().then(dispatchOperation);\n                }\n            }\n        },\n        createRequestOperation (e, t, n) {\n            if (!n) {\n                n = {};\n            }\n            var a;\n            if ( true && \"teardown\" !== e && (a = (0,_urql_core_chunk_mjs__WEBPACK_IMPORTED_MODULE_0__.g)(t.query)) !== e) {\n                throw new Error('Expected operation of type \"'.concat(e, '\" but found \"').concat(a, '\"'));\n            }\n            return makeOperation(e, t, {\n                _instance: \"mutation\" === e ? r = r + 1 | 0 : void 0,\n                ...o,\n                ...n,\n                requestPolicy: n.requestPolicy || o.requestPolicy,\n                suspense: n.suspense || !1 !== n.suspense && p.suspense\n            });\n        },\n        executeRequestOperation (e) {\n            if (\"mutation\" === e.kind) {\n                return withPromise(makeResultSource(e));\n            }\n            return withPromise((0,wonka__WEBPACK_IMPORTED_MODULE_2__.lazy)(()=>{\n                var r = n.get(e.key);\n                if (!r) {\n                    n.set(e.key, r = makeResultSource(e));\n                }\n                r = (0,wonka__WEBPACK_IMPORTED_MODULE_2__.onStart)(()=>{\n                    dispatchOperation(e);\n                })(r);\n                var a = t.get(e.key);\n                if (\"query\" === e.kind && a && (a.stale || a.hasNext)) {\n                    return (0,wonka__WEBPACK_IMPORTED_MODULE_2__.switchMap)(wonka__WEBPACK_IMPORTED_MODULE_2__.fromValue)((0,wonka__WEBPACK_IMPORTED_MODULE_2__.merge)([\n                        r,\n                        (0,wonka__WEBPACK_IMPORTED_MODULE_2__.filter)((r)=>r === t.get(e.key))((0,wonka__WEBPACK_IMPORTED_MODULE_2__.fromValue)(a))\n                    ]));\n                } else {\n                    return r;\n                }\n            }));\n        },\n        executeQuery (e, r) {\n            var t = p.createRequestOperation(\"query\", e, r);\n            return p.executeRequestOperation(t);\n        },\n        executeSubscription (e, r) {\n            var t = p.createRequestOperation(\"subscription\", e, r);\n            return p.executeRequestOperation(t);\n        },\n        executeMutation (e, r) {\n            var t = p.createRequestOperation(\"mutation\", e, r);\n            return p.executeRequestOperation(t);\n        },\n        readQuery (e, r, t) {\n            var n = null;\n            (0,wonka__WEBPACK_IMPORTED_MODULE_2__.subscribe)((e)=>{\n                n = e;\n            })(p.query(e, r, t)).unsubscribe();\n            return n;\n        },\n        query: (e, r, t)=>p.executeQuery((0,_urql_core_chunk_mjs__WEBPACK_IMPORTED_MODULE_0__.h)(e, r), t),\n        subscription: (e, r, t)=>p.executeSubscription((0,_urql_core_chunk_mjs__WEBPACK_IMPORTED_MODULE_0__.h)(e, r), t),\n        mutation: (e, r, t)=>p.executeMutation((0,_urql_core_chunk_mjs__WEBPACK_IMPORTED_MODULE_0__.h)(e, r), t)\n    });\n    var d = noop;\n    if (true) {\n        var { next: f, source: x } = (0,wonka__WEBPACK_IMPORTED_MODULE_2__.makeSubject)();\n        p.subscribeToDebugTarget = (e)=>(0,wonka__WEBPACK_IMPORTED_MODULE_2__.subscribe)(e)(x);\n        d = f;\n    }\n    var w = composeExchanges(e.exchanges);\n    var E = (0,wonka__WEBPACK_IMPORTED_MODULE_2__.share)(w({\n        client: p,\n        dispatchDebug: d,\n        forward: fallbackExchange({\n            dispatchDebug: d\n        })\n    })(s.source));\n    (0,wonka__WEBPACK_IMPORTED_MODULE_2__.publish)(E);\n    return p;\n};\n_c = C;\nvar Q = C;\n //# sourceMappingURL=urql-core.mjs.map\nvar _c;\n$RefreshReg$(_c, \"C\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@urql/core/dist/urql-core.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/wonka/dist/wonka.mjs":
/*!*******************************************!*\
  !*** ./node_modules/wonka/dist/wonka.mjs ***!
  \*******************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   buffer: function() { return /* binding */ buffer; },\n/* harmony export */   combine: function() { return /* binding */ combine; },\n/* harmony export */   concat: function() { return /* binding */ concat; },\n/* harmony export */   concatAll: function() { return /* binding */ concatAll; },\n/* harmony export */   concatMap: function() { return /* binding */ concatMap; },\n/* harmony export */   debounce: function() { return /* binding */ debounce; },\n/* harmony export */   delay: function() { return /* binding */ delay; },\n/* harmony export */   empty: function() { return /* binding */ empty; },\n/* harmony export */   filter: function() { return /* binding */ filter; },\n/* harmony export */   flatten: function() { return /* binding */ mergeAll; },\n/* harmony export */   forEach: function() { return /* binding */ forEach; },\n/* harmony export */   fromArray: function() { return /* binding */ r; },\n/* harmony export */   fromAsyncIterable: function() { return /* binding */ fromAsyncIterable; },\n/* harmony export */   fromCallbag: function() { return /* binding */ fromCallbag; },\n/* harmony export */   fromDomEvent: function() { return /* binding */ fromDomEvent; },\n/* harmony export */   fromIterable: function() { return /* binding */ fromIterable; },\n/* harmony export */   fromObservable: function() { return /* binding */ fromObservable; },\n/* harmony export */   fromPromise: function() { return /* binding */ fromPromise; },\n/* harmony export */   fromValue: function() { return /* binding */ fromValue; },\n/* harmony export */   interval: function() { return /* binding */ interval; },\n/* harmony export */   lazy: function() { return /* binding */ lazy; },\n/* harmony export */   make: function() { return /* binding */ make; },\n/* harmony export */   makeSubject: function() { return /* binding */ makeSubject; },\n/* harmony export */   map: function() { return /* binding */ map; },\n/* harmony export */   merge: function() { return /* binding */ merge; },\n/* harmony export */   mergeAll: function() { return /* binding */ mergeAll; },\n/* harmony export */   mergeMap: function() { return /* binding */ mergeMap; },\n/* harmony export */   never: function() { return /* binding */ never; },\n/* harmony export */   onEnd: function() { return /* binding */ onEnd; },\n/* harmony export */   onPush: function() { return /* binding */ onPush; },\n/* harmony export */   onStart: function() { return /* binding */ onStart; },\n/* harmony export */   pipe: function() { return /* binding */ pipe; },\n/* harmony export */   publish: function() { return /* binding */ publish; },\n/* harmony export */   sample: function() { return /* binding */ sample; },\n/* harmony export */   scan: function() { return /* binding */ scan; },\n/* harmony export */   share: function() { return /* binding */ share; },\n/* harmony export */   skip: function() { return /* binding */ skip; },\n/* harmony export */   skipUntil: function() { return /* binding */ skipUntil; },\n/* harmony export */   skipWhile: function() { return /* binding */ skipWhile; },\n/* harmony export */   subscribe: function() { return /* binding */ subscribe; },\n/* harmony export */   switchAll: function() { return /* binding */ switchAll; },\n/* harmony export */   switchMap: function() { return /* binding */ switchMap; },\n/* harmony export */   take: function() { return /* binding */ take; },\n/* harmony export */   takeLast: function() { return /* binding */ takeLast; },\n/* harmony export */   takeUntil: function() { return /* binding */ takeUntil; },\n/* harmony export */   takeWhile: function() { return /* binding */ takeWhile; },\n/* harmony export */   tap: function() { return /* binding */ onPush; },\n/* harmony export */   throttle: function() { return /* binding */ throttle; },\n/* harmony export */   toArray: function() { return /* binding */ toArray; },\n/* harmony export */   toAsyncIterable: function() { return /* binding */ toAsyncIterable; },\n/* harmony export */   toCallbag: function() { return /* binding */ toCallbag; },\n/* harmony export */   toObservable: function() { return /* binding */ toObservable; },\n/* harmony export */   toPromise: function() { return /* binding */ toPromise; },\n/* harmony export */   zip: function() { return /* binding */ zip; }\n/* harmony export */ });\nvar teardownPlaceholder = ()=>{};\nvar e = teardownPlaceholder;\nfunction start(e) {\n    return {\n        tag: 0,\n        0: e\n    };\n}\nfunction push(e) {\n    return {\n        tag: 1,\n        0: e\n    };\n}\nvar asyncIteratorSymbol = ()=>\"function\" == typeof Symbol && Symbol.asyncIterator || \"@@asyncIterator\";\nvar observableSymbol = ()=>\"function\" == typeof Symbol && Symbol.observable || \"@@observable\";\nvar identity = (e)=>e;\nfunction buffer(r) {\n    return (t)=>(i)=>{\n            var a = [];\n            var f = e;\n            var n = e;\n            var s = !1;\n            var l = !1;\n            t((e)=>{\n                if (l) {} else if (0 === e) {\n                    l = !0;\n                    n(1);\n                    if (a.length) {\n                        i(push(a));\n                    }\n                    i(0);\n                } else if (0 === e.tag) {\n                    f = e[0];\n                    r((e)=>{\n                        if (l) {} else if (0 === e) {\n                            l = !0;\n                            f(1);\n                            if (a.length) {\n                                i(push(a));\n                            }\n                            i(0);\n                        } else if (0 === e.tag) {\n                            n = e[0];\n                        } else if (a.length) {\n                            var r = push(a);\n                            a = [];\n                            i(r);\n                        }\n                    });\n                } else {\n                    a.push(e[0]);\n                    if (!s) {\n                        s = !0;\n                        f(0);\n                        n(0);\n                    } else {\n                        s = !1;\n                    }\n                }\n            });\n            i(start((e)=>{\n                if (1 === e && !l) {\n                    l = !0;\n                    f(1);\n                    n(1);\n                } else if (!l && !s) {\n                    s = !0;\n                    f(0);\n                    n(0);\n                }\n            }));\n        };\n}\nfunction concatMap(r) {\n    return (t)=>(i)=>{\n            var a = [];\n            var f = e;\n            var n = e;\n            var s = !1;\n            var l = !1;\n            var u = !1;\n            var o = !1;\n            function applyInnerSource(e) {\n                u = !0;\n                e((e)=>{\n                    if (0 === e) {\n                        if (u) {\n                            u = !1;\n                            if (a.length) {\n                                applyInnerSource(r(a.shift()));\n                            } else if (o) {\n                                i(0);\n                            } else if (!s) {\n                                s = !0;\n                                f(0);\n                            }\n                        }\n                    } else if (0 === e.tag) {\n                        l = !1;\n                        (n = e[0])(0);\n                    } else if (u) {\n                        i(e);\n                        if (l) {\n                            l = !1;\n                        } else {\n                            n(0);\n                        }\n                    }\n                });\n            }\n            t((e)=>{\n                if (o) {} else if (0 === e) {\n                    o = !0;\n                    if (!u && !a.length) {\n                        i(0);\n                    }\n                } else if (0 === e.tag) {\n                    f = e[0];\n                } else {\n                    s = !1;\n                    if (u) {\n                        a.push(e[0]);\n                    } else {\n                        applyInnerSource(r(e[0]));\n                    }\n                }\n            });\n            i(start((e)=>{\n                if (1 === e) {\n                    if (!o) {\n                        o = !0;\n                        f(1);\n                    }\n                    if (u) {\n                        u = !1;\n                        n(1);\n                    }\n                } else {\n                    if (!o && !s) {\n                        s = !0;\n                        f(0);\n                    }\n                    if (u && !l) {\n                        l = !0;\n                        n(0);\n                    }\n                }\n            }));\n        };\n}\nfunction concatAll(e) {\n    return concatMap(identity)(e);\n}\nfunction concat(e) {\n    return concatAll(r(e));\n}\nfunction filter(r) {\n    return (t)=>(i)=>{\n            var a = e;\n            t((e)=>{\n                if (0 === e) {\n                    i(0);\n                } else if (0 === e.tag) {\n                    a = e[0];\n                    i(e);\n                } else if (!r(e[0])) {\n                    a(0);\n                } else {\n                    i(e);\n                }\n            });\n        };\n}\nfunction map(e) {\n    return (r)=>(t)=>r((r)=>{\n                if (0 === r || 0 === r.tag) {\n                    t(r);\n                } else {\n                    t(push(e(r[0])));\n                }\n            });\n}\nfunction mergeMap(r) {\n    return (t)=>(i)=>{\n            var a = [];\n            var f = e;\n            var n = !1;\n            var s = !1;\n            t((t)=>{\n                if (s) {} else if (0 === t) {\n                    s = !0;\n                    if (!a.length) {\n                        i(0);\n                    }\n                } else if (0 === t.tag) {\n                    f = t[0];\n                } else {\n                    n = !1;\n                    !function applyInnerSource(r) {\n                        var t = e;\n                        r((e)=>{\n                            if (0 === e) {\n                                if (a.length) {\n                                    var r = a.indexOf(t);\n                                    if (r > -1) {\n                                        (a = a.slice()).splice(r, 1);\n                                    }\n                                    if (!a.length) {\n                                        if (s) {\n                                            i(0);\n                                        } else if (!n) {\n                                            n = !0;\n                                            f(0);\n                                        }\n                                    }\n                                }\n                            } else if (0 === e.tag) {\n                                a.push(t = e[0]);\n                                t(0);\n                            } else if (a.length) {\n                                i(e);\n                                t(0);\n                            }\n                        });\n                    }(r(t[0]));\n                    if (!n) {\n                        n = !0;\n                        f(0);\n                    }\n                }\n            });\n            i(start((e)=>{\n                if (1 === e) {\n                    if (!s) {\n                        s = !0;\n                        f(1);\n                    }\n                    for(var r = 0, t = a, i = a.length; r < i; r++){\n                        t[r](1);\n                    }\n                    a.length = 0;\n                } else {\n                    if (!s && !n) {\n                        n = !0;\n                        f(0);\n                    } else {\n                        n = !1;\n                    }\n                    for(var l = 0, u = a, o = a.length; l < o; l++){\n                        u[l](0);\n                    }\n                }\n            }));\n        };\n}\nfunction mergeAll(e) {\n    return mergeMap(identity)(e);\n}\nfunction merge(e) {\n    return mergeAll(r(e));\n}\nfunction onEnd(e) {\n    return (r)=>(t)=>{\n            var i = !1;\n            r((r)=>{\n                if (i) {} else if (0 === r) {\n                    i = !0;\n                    t(0);\n                    e();\n                } else if (0 === r.tag) {\n                    var a = r[0];\n                    t(start((r)=>{\n                        if (1 === r) {\n                            i = !0;\n                            a(1);\n                            e();\n                        } else {\n                            a(r);\n                        }\n                    }));\n                } else {\n                    t(r);\n                }\n            });\n        };\n}\nfunction onPush(e) {\n    return (r)=>(t)=>{\n            var i = !1;\n            r((r)=>{\n                if (i) {} else if (0 === r) {\n                    i = !0;\n                    t(0);\n                } else if (0 === r.tag) {\n                    var a = r[0];\n                    t(start((e)=>{\n                        if (1 === e) {\n                            i = !0;\n                        }\n                        a(e);\n                    }));\n                } else {\n                    e(r[0]);\n                    t(r);\n                }\n            });\n        };\n}\nfunction onStart(e) {\n    return (r)=>(t)=>r((r)=>{\n                if (0 === r) {\n                    t(0);\n                } else if (0 === r.tag) {\n                    t(r);\n                    e();\n                } else {\n                    t(r);\n                }\n            });\n}\nfunction sample(r) {\n    return (t)=>(i)=>{\n            var a = e;\n            var f = e;\n            var n;\n            var s = !1;\n            var l = !1;\n            t((e)=>{\n                if (l) {} else if (0 === e) {\n                    l = !0;\n                    f(1);\n                    i(0);\n                } else if (0 === e.tag) {\n                    a = e[0];\n                } else {\n                    n = e[0];\n                    if (!s) {\n                        s = !0;\n                        f(0);\n                        a(0);\n                    } else {\n                        s = !1;\n                    }\n                }\n            });\n            r((e)=>{\n                if (l) {} else if (0 === e) {\n                    l = !0;\n                    a(1);\n                    i(0);\n                } else if (0 === e.tag) {\n                    f = e[0];\n                } else if (void 0 !== n) {\n                    var r = push(n);\n                    n = void 0;\n                    i(r);\n                }\n            });\n            i(start((e)=>{\n                if (1 === e && !l) {\n                    l = !0;\n                    a(1);\n                    f(1);\n                } else if (!l && !s) {\n                    s = !0;\n                    a(0);\n                    f(0);\n                }\n            }));\n        };\n}\nfunction scan(e, r) {\n    return (t)=>(i)=>{\n            var a = r;\n            t((r)=>{\n                if (0 === r) {\n                    i(0);\n                } else if (0 === r.tag) {\n                    i(r);\n                } else {\n                    i(push(a = e(a, r[0])));\n                }\n            });\n        };\n}\nfunction share(r) {\n    var t = [];\n    var i = e;\n    var a = !1;\n    return (e)=>{\n        t.push(e);\n        if (1 === t.length) {\n            r((e)=>{\n                if (0 === e) {\n                    for(var r = 0, f = t, n = t.length; r < n; r++){\n                        f[r](0);\n                    }\n                    t.length = 0;\n                } else if (0 === e.tag) {\n                    i = e[0];\n                } else {\n                    a = !1;\n                    for(var s = 0, l = t, u = t.length; s < u; s++){\n                        l[s](e);\n                    }\n                }\n            });\n        }\n        e(start((r)=>{\n            if (1 === r) {\n                var f = t.indexOf(e);\n                if (f > -1) {\n                    (t = t.slice()).splice(f, 1);\n                }\n                if (!t.length) {\n                    i(1);\n                }\n            } else if (!a) {\n                a = !0;\n                i(0);\n            }\n        }));\n    };\n}\nfunction skip(r) {\n    return (t)=>(i)=>{\n            var a = e;\n            var f = r;\n            t((e)=>{\n                if (0 === e) {\n                    i(0);\n                } else if (0 === e.tag) {\n                    a = e[0];\n                    i(e);\n                } else if (f-- > 0) {\n                    a(0);\n                } else {\n                    i(e);\n                }\n            });\n        };\n}\nfunction skipUntil(r) {\n    return (t)=>(i)=>{\n            var a = e;\n            var f = e;\n            var n = !0;\n            var s = !1;\n            var l = !1;\n            t((e)=>{\n                if (l) {} else if (0 === e) {\n                    l = !0;\n                    if (n) {\n                        f(1);\n                    }\n                    i(0);\n                } else if (0 === e.tag) {\n                    a = e[0];\n                    r((e)=>{\n                        if (0 === e) {\n                            if (n) {\n                                l = !0;\n                                a(1);\n                            }\n                        } else if (0 === e.tag) {\n                            (f = e[0])(0);\n                        } else {\n                            n = !1;\n                            f(1);\n                        }\n                    });\n                } else if (!n) {\n                    s = !1;\n                    i(e);\n                } else if (!s) {\n                    s = !0;\n                    a(0);\n                    f(0);\n                } else {\n                    s = !1;\n                }\n            });\n            i(start((e)=>{\n                if (1 === e && !l) {\n                    l = !0;\n                    a(1);\n                    if (n) {\n                        f(1);\n                    }\n                } else if (!l && !s) {\n                    s = !0;\n                    if (n) {\n                        f(0);\n                    }\n                    a(0);\n                }\n            }));\n        };\n}\nfunction skipWhile(r) {\n    return (t)=>(i)=>{\n            var a = e;\n            var f = !0;\n            t((e)=>{\n                if (0 === e) {\n                    i(0);\n                } else if (0 === e.tag) {\n                    a = e[0];\n                    i(e);\n                } else if (f) {\n                    if (r(e[0])) {\n                        a(0);\n                    } else {\n                        f = !1;\n                        i(e);\n                    }\n                } else {\n                    i(e);\n                }\n            });\n        };\n}\nfunction switchMap(r) {\n    return (t)=>(i)=>{\n            var a = e;\n            var f = e;\n            var n = !1;\n            var s = !1;\n            var l = !1;\n            var u = !1;\n            t((t)=>{\n                if (u) {} else if (0 === t) {\n                    u = !0;\n                    if (!l) {\n                        i(0);\n                    }\n                } else if (0 === t.tag) {\n                    a = t[0];\n                } else {\n                    if (l) {\n                        f(1);\n                        f = e;\n                    }\n                    if (!n) {\n                        n = !0;\n                        a(0);\n                    } else {\n                        n = !1;\n                    }\n                    !function applyInnerSource(e) {\n                        l = !0;\n                        e((e)=>{\n                            if (!l) {} else if (0 === e) {\n                                l = !1;\n                                if (u) {\n                                    i(0);\n                                } else if (!n) {\n                                    n = !0;\n                                    a(0);\n                                }\n                            } else if (0 === e.tag) {\n                                s = !1;\n                                (f = e[0])(0);\n                            } else {\n                                i(e);\n                                if (!s) {\n                                    f(0);\n                                } else {\n                                    s = !1;\n                                }\n                            }\n                        });\n                    }(r(t[0]));\n                }\n            });\n            i(start((e)=>{\n                if (1 === e) {\n                    if (!u) {\n                        u = !0;\n                        a(1);\n                    }\n                    if (l) {\n                        l = !1;\n                        f(1);\n                    }\n                } else {\n                    if (!u && !n) {\n                        n = !0;\n                        a(0);\n                    }\n                    if (l && !s) {\n                        s = !0;\n                        f(0);\n                    }\n                }\n            }));\n        };\n}\nfunction switchAll(e) {\n    return switchMap(identity)(e);\n}\nfunction take(r) {\n    return (t)=>(i)=>{\n            var a = e;\n            var f = !1;\n            var n = 0;\n            t((e)=>{\n                if (f) {} else if (0 === e) {\n                    f = !0;\n                    i(0);\n                } else if (0 === e.tag) {\n                    if (r <= 0) {\n                        f = !0;\n                        i(0);\n                        e[0](1);\n                    } else {\n                        a = e[0];\n                    }\n                } else if (n++ < r) {\n                    i(e);\n                    if (!f && n >= r) {\n                        f = !0;\n                        i(0);\n                        a(1);\n                    }\n                } else {\n                    i(e);\n                }\n            });\n            i(start((e)=>{\n                if (1 === e && !f) {\n                    f = !0;\n                    a(1);\n                } else if (0 === e && !f && n < r) {\n                    a(0);\n                }\n            }));\n        };\n}\nfunction takeLast(t) {\n    return (i)=>(a)=>{\n            var f = [];\n            var n = e;\n            i((e)=>{\n                if (0 === e) {\n                    r(f)(a);\n                } else if (0 === e.tag) {\n                    if (t <= 0) {\n                        e[0](1);\n                        r(f)(a);\n                    } else {\n                        (n = e[0])(0);\n                    }\n                } else {\n                    if (f.length >= t && t) {\n                        f.shift();\n                    }\n                    f.push(e[0]);\n                    n(0);\n                }\n            });\n        };\n}\nfunction takeUntil(r) {\n    return (t)=>(i)=>{\n            var a = e;\n            var f = e;\n            var n = !1;\n            t((e)=>{\n                if (n) {} else if (0 === e) {\n                    n = !0;\n                    f(1);\n                    i(0);\n                } else if (0 === e.tag) {\n                    a = e[0];\n                    r((e)=>{\n                        if (0 === e) {} else if (0 === e.tag) {\n                            (f = e[0])(0);\n                        } else {\n                            n = !0;\n                            f(1);\n                            a(1);\n                            i(0);\n                        }\n                    });\n                } else {\n                    i(e);\n                }\n            });\n            i(start((e)=>{\n                if (1 === e && !n) {\n                    n = !0;\n                    a(1);\n                    f(1);\n                } else if (!n) {\n                    a(0);\n                }\n            }));\n        };\n}\nfunction takeWhile(r, t) {\n    return (i)=>(a)=>{\n            var f = e;\n            var n = !1;\n            i((e)=>{\n                if (n) {} else if (0 === e) {\n                    n = !0;\n                    a(0);\n                } else if (0 === e.tag) {\n                    f = e[0];\n                    a(e);\n                } else if (!r(e[0])) {\n                    n = !0;\n                    if (t) {\n                        a(e);\n                    }\n                    a(0);\n                    f(1);\n                } else {\n                    a(e);\n                }\n            });\n        };\n}\nfunction debounce(e) {\n    return (r)=>(t)=>{\n            var i;\n            var a = !1;\n            var f = !1;\n            r((r)=>{\n                if (f) {} else if (0 === r) {\n                    f = !0;\n                    if (i) {\n                        a = !0;\n                    } else {\n                        t(0);\n                    }\n                } else if (0 === r.tag) {\n                    var n = r[0];\n                    t(start((e)=>{\n                        if (1 === e && !f) {\n                            f = !0;\n                            a = !1;\n                            if (i) {\n                                clearTimeout(i);\n                            }\n                            n(1);\n                        } else if (!f) {\n                            n(0);\n                        }\n                    }));\n                } else {\n                    if (i) {\n                        clearTimeout(i);\n                    }\n                    i = setTimeout(()=>{\n                        i = void 0;\n                        t(r);\n                        if (a) {\n                            t(0);\n                        }\n                    }, e(r[0]));\n                }\n            });\n        };\n}\nfunction delay(e) {\n    return (r)=>(t)=>{\n            var i = 0;\n            r((r)=>{\n                if (0 !== r && 0 === r.tag) {\n                    t(r);\n                } else {\n                    i++;\n                    setTimeout(()=>{\n                        if (i) {\n                            i--;\n                            t(r);\n                        }\n                    }, e);\n                }\n            });\n        };\n}\nfunction throttle(e) {\n    return (r)=>(t)=>{\n            var i = !1;\n            var a;\n            r((r)=>{\n                if (0 === r) {\n                    if (a) {\n                        clearTimeout(a);\n                    }\n                    t(0);\n                } else if (0 === r.tag) {\n                    var f = r[0];\n                    t(start((e)=>{\n                        if (1 === e) {\n                            if (a) {\n                                clearTimeout(a);\n                            }\n                            f(1);\n                        } else {\n                            f(0);\n                        }\n                    }));\n                } else if (!i) {\n                    i = !0;\n                    if (a) {\n                        clearTimeout(a);\n                    }\n                    a = setTimeout(()=>{\n                        a = void 0;\n                        i = !1;\n                    }, e(r[0]));\n                    t(r);\n                }\n            });\n        };\n}\nfunction lazy(e) {\n    return (r)=>e()(r);\n}\nfunction fromAsyncIterable(e) {\n    return (r)=>{\n        var t = e[asyncIteratorSymbol()] && e[asyncIteratorSymbol()]() || e;\n        var i = !1;\n        var a = !1;\n        var f = !1;\n        var n;\n        r(start(async (e)=>{\n            if (1 === e) {\n                i = !0;\n                if (t.return) {\n                    t.return();\n                }\n            } else if (a) {\n                f = !0;\n            } else {\n                for(f = a = !0; f && !i;){\n                    if ((n = await t.next()).done) {\n                        i = !0;\n                        if (t.return) {\n                            await t.return();\n                        }\n                        r(0);\n                    } else {\n                        try {\n                            f = !1;\n                            r(push(n.value));\n                        } catch (e) {\n                            if (t.throw) {\n                                if (i = !!(await t.throw(e)).done) {\n                                    r(0);\n                                }\n                            } else {\n                                throw e;\n                            }\n                        }\n                    }\n                }\n                a = !1;\n            }\n        }));\n    };\n}\nfunction fromIterable(e) {\n    if (e[Symbol.asyncIterator]) {\n        return fromAsyncIterable(e);\n    }\n    return (r)=>{\n        var t = e[Symbol.iterator]();\n        var i = !1;\n        var a = !1;\n        var f = !1;\n        var n;\n        r(start((e)=>{\n            if (1 === e) {\n                i = !0;\n                if (t.return) {\n                    t.return();\n                }\n            } else if (a) {\n                f = !0;\n            } else {\n                for(f = a = !0; f && !i;){\n                    if ((n = t.next()).done) {\n                        i = !0;\n                        if (t.return) {\n                            t.return();\n                        }\n                        r(0);\n                    } else {\n                        try {\n                            f = !1;\n                            r(push(n.value));\n                        } catch (e) {\n                            if (t.throw) {\n                                if (i = !!t.throw(e).done) {\n                                    r(0);\n                                }\n                            } else {\n                                throw e;\n                            }\n                        }\n                    }\n                }\n                a = !1;\n            }\n        }));\n    };\n}\nvar r = fromIterable;\nfunction fromValue(e) {\n    return (r)=>{\n        var t = !1;\n        r(start((i)=>{\n            if (1 === i) {\n                t = !0;\n            } else if (!t) {\n                t = !0;\n                r(push(e));\n                r(0);\n            }\n        }));\n    };\n}\nfunction make(e) {\n    return (r)=>{\n        var t = !1;\n        var i = e({\n            next (e) {\n                if (!t) {\n                    r(push(e));\n                }\n            },\n            complete () {\n                if (!t) {\n                    t = !0;\n                    r(0);\n                }\n            }\n        });\n        r(start((e)=>{\n            if (1 === e && !t) {\n                t = !0;\n                i();\n            }\n        }));\n    };\n}\nfunction makeSubject() {\n    var e;\n    var r;\n    return {\n        source: share(make((t)=>{\n            e = t.next;\n            r = t.complete;\n            return teardownPlaceholder;\n        })),\n        next (r) {\n            if (e) {\n                e(r);\n            }\n        },\n        complete () {\n            if (r) {\n                r();\n            }\n        }\n    };\n}\nvar empty = (e)=>{\n    var r = !1;\n    e(start((t)=>{\n        if (1 === t) {\n            r = !0;\n        } else if (!r) {\n            r = !0;\n            e(0);\n        }\n    }));\n};\nvar never = (r)=>{\n    r(start(e));\n};\nfunction interval(e) {\n    return make((r)=>{\n        var t = 0;\n        var i = setInterval(()=>r.next(t++), e);\n        return ()=>clearInterval(i);\n    });\n}\nfunction fromDomEvent(e, r) {\n    return make((t)=>{\n        e.addEventListener(r, t.next);\n        return ()=>e.removeEventListener(r, t.next);\n    });\n}\nfunction fromPromise(e) {\n    return make((r)=>{\n        e.then((e)=>{\n            Promise.resolve(e).then(()=>{\n                r.next(e);\n                r.complete();\n            });\n        });\n        return teardownPlaceholder;\n    });\n}\nfunction subscribe(r) {\n    return (t)=>{\n        var i = e;\n        var a = !1;\n        t((e)=>{\n            if (0 === e) {\n                a = !0;\n            } else if (0 === e.tag) {\n                (i = e[0])(0);\n            } else if (!a) {\n                r(e[0]);\n                i(0);\n            }\n        });\n        return {\n            unsubscribe () {\n                if (!a) {\n                    a = !0;\n                    i(1);\n                }\n            }\n        };\n    };\n}\nfunction forEach(e) {\n    return (r)=>{\n        subscribe(e)(r);\n    };\n}\nfunction publish(e) {\n    subscribe((e)=>{})(e);\n}\nvar t = {\n    done: !0\n};\nvar toAsyncIterable = (r)=>{\n    var i = [];\n    var a = !1;\n    var f = !1;\n    var n = !1;\n    var s = e;\n    var l;\n    return {\n        async next () {\n            if (!f) {\n                f = !0;\n                r((e)=>{\n                    if (a) {} else if (0 === e) {\n                        if (l) {\n                            l = l(t);\n                        }\n                        a = !0;\n                    } else if (0 === e.tag) {\n                        n = !0;\n                        (s = e[0])(0);\n                    } else {\n                        n = !1;\n                        if (l) {\n                            l = l({\n                                value: e[0],\n                                done: !1\n                            });\n                        } else {\n                            i.push(e[0]);\n                        }\n                    }\n                });\n            }\n            if (a && !i.length) {\n                return t;\n            } else if (!a && !n && i.length <= 1) {\n                n = !0;\n                s(0);\n            }\n            return i.length ? {\n                value: i.shift(),\n                done: !1\n            } : new Promise((e)=>l = e);\n        },\n        async return () {\n            if (!a) {\n                l = s(1);\n            }\n            a = !0;\n            return t;\n        },\n        [asyncIteratorSymbol()] () {\n            return this;\n        }\n    };\n};\nfunction toArray(r) {\n    var t = [];\n    var i = e;\n    var a = !1;\n    r((e)=>{\n        if (0 === e) {\n            a = !0;\n        } else if (0 === e.tag) {\n            (i = e[0])(0);\n        } else {\n            t.push(e[0]);\n            i(0);\n        }\n    });\n    if (!a) {\n        i(1);\n    }\n    return t;\n}\nfunction toPromise(r) {\n    return new Promise((t)=>{\n        var i = e;\n        var a;\n        r((e)=>{\n            if (0 === e) {\n                Promise.resolve(a).then(t);\n            } else if (0 === e.tag) {\n                (i = e[0])(0);\n            } else {\n                a = e[0];\n                i(0);\n            }\n        });\n    });\n}\nfunction zip(r) {\n    var t = Object.keys(r).length;\n    return (i)=>{\n        var a = new Set;\n        var f = Array.isArray(r) ? new Array(t).fill(e) : {};\n        var n = Array.isArray(r) ? new Array(t) : {};\n        var s = !1;\n        var l = !1;\n        var u = !1;\n        var o = 0;\n        var loop = function(v) {\n            r[v]((c)=>{\n                if (0 === c) {\n                    if (o >= t - 1) {\n                        u = !0;\n                        i(0);\n                    } else {\n                        o++;\n                    }\n                } else if (0 === c.tag) {\n                    f[v] = c[0];\n                } else if (!u) {\n                    n[v] = c[0];\n                    a.add(v);\n                    if (!s && a.size < t) {\n                        if (!l) {\n                            for(var h in r){\n                                if (!a.has(h)) {\n                                    (f[h] || e)(0);\n                                }\n                            }\n                        } else {\n                            l = !1;\n                        }\n                    } else {\n                        s = !0;\n                        l = !1;\n                        i(push(Array.isArray(n) ? n.slice() : {\n                            ...n\n                        }));\n                    }\n                }\n            });\n        };\n        for(var v in r){\n            loop(v);\n        }\n        i(start((e)=>{\n            if (u) {} else if (1 === e) {\n                u = !0;\n                for(var r in f){\n                    f[r](1);\n                }\n            } else if (!l) {\n                l = !0;\n                for(var t in f){\n                    f[t](0);\n                }\n            }\n        }));\n    };\n}\nfunction combine() {\n    for(var _len = arguments.length, e = new Array(_len), _key = 0; _key < _len; _key++){\n        e[_key] = arguments[_key];\n    }\n    return zip(e);\n}\nfunction fromObservable(e) {\n    return (r)=>{\n        var t = (e[observableSymbol()] ? e[observableSymbol()]() : e).subscribe({\n            next (e) {\n                r(push(e));\n            },\n            complete () {\n                r(0);\n            },\n            error (e) {\n                throw e;\n            }\n        });\n        r(start((e)=>{\n            if (1 === e) {\n                t.unsubscribe();\n            }\n        }));\n    };\n}\nfunction toObservable(r) {\n    return {\n        subscribe (t, i, a) {\n            var f = \"object\" == typeof t ? t : {\n                next: t,\n                error: i,\n                complete: a\n            };\n            var n = e;\n            var s = !1;\n            r((e)=>{\n                if (s) {} else if (0 === e) {\n                    s = !0;\n                    if (f.complete) {\n                        f.complete();\n                    }\n                } else if (0 === e.tag) {\n                    (n = e[0])(0);\n                } else {\n                    f.next(e[0]);\n                    n(0);\n                }\n            });\n            var l = {\n                closed: !1,\n                unsubscribe () {\n                    l.closed = !0;\n                    s = !0;\n                    n(1);\n                }\n            };\n            return l;\n        },\n        [observableSymbol()] () {\n            return this;\n        }\n    };\n}\nfunction fromCallbag(e) {\n    return (r)=>{\n        e(0, (e, t)=>{\n            if (0 === e) {\n                r(start((e)=>{\n                    t(e + 1);\n                }));\n            } else if (1 === e) {\n                r(push(t));\n            } else {\n                r(0);\n            }\n        });\n    };\n}\nfunction toCallbag(e) {\n    return (r, t)=>{\n        if (0 === r) {\n            e((e)=>{\n                if (0 === e) {\n                    t(2);\n                } else if (0 === e.tag) {\n                    t(0, (r)=>{\n                        if (r < 3) {\n                            e[0](r - 1);\n                        }\n                    });\n                } else {\n                    t(1, e[0]);\n                }\n            });\n        }\n    };\n}\nvar pipe = function() {\n    for(var _len = arguments.length, e = new Array(_len), _key = 0; _key < _len; _key++){\n        e[_key] = arguments[_key];\n    }\n    var r = e[0];\n    for(var t = 1, i = e.length; t < i; t++){\n        r = e[t](r);\n    }\n    return r;\n};\n //# sourceMappingURL=wonka.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy93b25rYS9kaXN0L3dvbmthLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxJQUFJQSxzQkFBc0IsS0FBTztBQUVqQyxJQUFJQyxJQUFJRDtBQUVSLFNBQVNFLE1BQU1ELENBQUM7SUFDZCxPQUFPO1FBQ0xFLEtBQUs7UUFDTCxHQUFHRjtJQUNMO0FBQ0Y7QUFFQSxTQUFTRyxLQUFLSCxDQUFDO0lBQ2IsT0FBTztRQUNMRSxLQUFLO1FBQ0wsR0FBR0Y7SUFDTDtBQUNGO0FBRUEsSUFBSUksc0JBQXNCLElBQU0sY0FBYyxPQUFPQyxVQUFVQSxPQUFPQyxhQUFhLElBQUk7QUFFdkYsSUFBSUMsbUJBQW1CLElBQU0sY0FBYyxPQUFPRixVQUFVQSxPQUFPRyxVQUFVLElBQUk7QUFFakYsSUFBSUMsV0FBV1QsQ0FBQUEsSUFBS0E7QUFFcEIsU0FBU1UsT0FBT0MsQ0FBQztJQUNmLE9BQU9DLENBQUFBLElBQUtDLENBQUFBO1lBQ1YsSUFBSUMsSUFBSSxFQUFFO1lBQ1YsSUFBSUMsSUFBSWY7WUFDUixJQUFJZ0IsSUFBSWhCO1lBQ1IsSUFBSWlCLElBQUksQ0FBQztZQUNULElBQUlDLElBQUksQ0FBQztZQUNUTixFQUFHWixDQUFBQTtnQkFDRCxJQUFJa0IsR0FBRyxDQUFDLE9BQU8sSUFBSSxNQUFNbEIsR0FBRztvQkFDMUJrQixJQUFJLENBQUM7b0JBQ0xGLEVBQUU7b0JBQ0YsSUFBSUYsRUFBRUssTUFBTSxFQUFFO3dCQUNaTixFQUFFVixLQUFLVztvQkFDVDtvQkFDQUQsRUFBRTtnQkFDSixPQUFPLElBQUksTUFBTWIsRUFBRUUsR0FBRyxFQUFFO29CQUN0QmEsSUFBSWYsQ0FBQyxDQUFDLEVBQUU7b0JBQ1JXLEVBQUdYLENBQUFBO3dCQUNELElBQUlrQixHQUFHLENBQUMsT0FBTyxJQUFJLE1BQU1sQixHQUFH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QU8sQ0FBQ1csR0FBR0M7UUFDVCxJQUFJLE1BQU1ELEdBQUc7WUFDWFgsRUFBR0EsQ0FBQUE7Z0JBQ0QsSUFBSSxNQUFNQSxHQUFHO29CQUNYWSxFQUFFO2dCQUNKLE9BQU8sSUFBSSxNQUFNWixFQUFFRSxHQUFHLEVBQUU7b0JBQ3RCVSxFQUFFLEdBQUlELENBQUFBO3dCQUNKLElBQUlBLElBQUksR0FBRzs0QkFDVFgsQ0FBQyxDQUFDLEVBQUUsQ0FBQ1csSUFBSTt3QkFDWDtvQkFDRjtnQkFDRixPQUFPO29CQUNMQyxFQUFFLEdBQUdaLENBQUMsQ0FBQyxFQUFFO2dCQUNYO1lBQ0Y7UUFDRjtJQUNGO0FBQ0Y7QUFFQSxJQUFJNkcsT0FBTztxQ0FBSTdHO1FBQUFBOztJQUNiLElBQUlXLElBQUlYLENBQUMsQ0FBQyxFQUFFO0lBQ1osSUFBSyxJQUFJWSxJQUFJLEdBQUdDLElBQUliLEVBQUVtQixNQUFNLEVBQUVQLElBQUlDLEdBQUdELElBQUs7UUFDeENELElBQUlYLENBQUMsQ0FBQ1ksRUFBRSxDQUFDRDtJQUNYO0lBQ0EsT0FBT0E7QUFDVDtBQUVnakIsQ0FDaGpCLGtDQUFrQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvd29ua2EvZGlzdC93b25rYS5tanM/MmQ1MSJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgdGVhcmRvd25QbGFjZWhvbGRlciA9ICgpID0+IHt9O1xuXG52YXIgZSA9IHRlYXJkb3duUGxhY2Vob2xkZXI7XG5cbmZ1bmN0aW9uIHN0YXJ0KGUpIHtcbiAgcmV0dXJuIHtcbiAgICB0YWc6IDAsXG4gICAgMDogZVxuICB9O1xufVxuXG5mdW5jdGlvbiBwdXNoKGUpIHtcbiAgcmV0dXJuIHtcbiAgICB0YWc6IDEsXG4gICAgMDogZVxuICB9O1xufVxuXG52YXIgYXN5bmNJdGVyYXRvclN5bWJvbCA9ICgpID0+IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIFN5bWJvbC5hc3luY0l0ZXJhdG9yIHx8IFwiQEBhc3luY0l0ZXJhdG9yXCI7XG5cbnZhciBvYnNlcnZhYmxlU3ltYm9sID0gKCkgPT4gXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgU3ltYm9sLm9ic2VydmFibGUgfHwgXCJAQG9ic2VydmFibGVcIjtcblxudmFyIGlkZW50aXR5ID0gZSA9PiBlO1xuXG5mdW5jdGlvbiBidWZmZXIocikge1xuICByZXR1cm4gdCA9PiBpID0+IHtcbiAgICB2YXIgYSA9IFtdO1xuICAgIHZhciBmID0gZTtcbiAgICB2YXIgbiA9IGU7XG4gICAgdmFyIHMgPSAhMTtcbiAgICB2YXIgbCA9ICExO1xuICAgIHQoKGUgPT4ge1xuICAgICAgaWYgKGwpIHt9IGVsc2UgaWYgKDAgPT09IGUpIHtcbiAgICAgICAgbCA9ICEwO1xuICAgICAgICBuKDEpO1xuICAgICAgICBpZiAoYS5sZW5ndGgpIHtcbiAgICAgICAgICBpKHB1c2goYSkpO1xuICAgICAgICB9XG4gICAgICAgIGkoMCk7XG4gICAgICB9IGVsc2UgaWYgKDAgPT09IGUudGFnKSB7XG4gICAgICAgIGYgPSBlWzBdO1xuICAgICAgICByKChlID0+IHtcbiAgICAgICAgICBpZiAobCkge30gZWxzZSBpZiAoMCA9PT0gZSkge1xuICAgICAgICAgICAgbCA9ICEwO1xuICAgICAgICAgICAgZigxKTtcbiAgICAgICAgICAgIGlmIChhLmxlbmd0aCkge1xuICAgICAgICAgICAgICBpKHB1c2goYSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaSgwKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKDAgPT09IGUudGFnKSB7XG4gICAgICAgICAgICBuID0gZVswXTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGEubGVuZ3RoKSB7XG4gICAgICAgICAgICB2YXIgciA9IHB1c2goYSk7XG4gICAgICAgICAgICBhID0gW107XG4gICAgICAgICAgICBpKHIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYS5wdXNoKGVbMF0pO1xuICAgICAgICBpZiAoIXMpIHtcbiAgICAgICAgICBzID0gITA7XG4gICAgICAgICAgZigwKTtcbiAgICAgICAgICBuKDApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHMgPSAhMTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pKTtcbiAgICBpKHN0YXJ0KChlID0+IHtcbiAgICAgIGlmICgxID09PSBlICYmICFsKSB7XG4gICAgICAgIGwgPSAhMDtcbiAgICAgICAgZigxKTtcbiAgICAgICAgbigxKTtcbiAgICAgIH0gZWxzZSBpZiAoIWwgJiYgIXMpIHtcbiAgICAgICAgcyA9ICEwO1xuICAgICAgICBmKDApO1xuICAgICAgICBuKDApO1xuICAgICAgfVxuICAgIH0pKSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNvbmNhdE1hcChyKSB7XG4gIHJldHVybiB0ID0+IGkgPT4ge1xuICAgIHZhciBhID0gW107XG4gICAgdmFyIGYgPSBlO1xuICAgIHZhciBuID0gZTtcbiAgICB2YXIgcyA9ICExO1xuICAgIHZhciBsID0gITE7XG4gICAgdmFyIHUgPSAhMTtcbiAgICB2YXIgbyA9ICExO1xuICAgIGZ1bmN0aW9uIGFwcGx5SW5uZXJTb3VyY2UoZSkge1xuICAgICAgdSA9ICEwO1xuICAgICAgZSgoZSA9PiB7XG4gICAgICAgIGlmICgwID09PSBlKSB7XG4gICAgICAgICAgaWYgKHUpIHtcbiAgICAgICAgICAgIHUgPSAhMTtcbiAgICAgICAgICAgIGlmIChhLmxlbmd0aCkge1xuICAgICAgICAgICAgICBhcHBseUlubmVyU291cmNlKHIoYS5zaGlmdCgpKSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG8pIHtcbiAgICAgICAgICAgICAgaSgwKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoIXMpIHtcbiAgICAgICAgICAgICAgcyA9ICEwO1xuICAgICAgICAgICAgICBmKDApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICgwID09PSBlLnRhZykge1xuICAgICAgICAgIGwgPSAhMTtcbiAgICAgICAgICAobiA9IGVbMF0pKDApO1xuICAgICAgICB9IGVsc2UgaWYgKHUpIHtcbiAgICAgICAgICBpKGUpO1xuICAgICAgICAgIGlmIChsKSB7XG4gICAgICAgICAgICBsID0gITE7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG4oMCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KSk7XG4gICAgfVxuICAgIHQoKGUgPT4ge1xuICAgICAgaWYgKG8pIHt9IGVsc2UgaWYgKDAgPT09IGUpIHtcbiAgICAgICAgbyA9ICEwO1xuICAgICAgICBpZiAoIXUgJiYgIWEubGVuZ3RoKSB7XG4gICAgICAgICAgaSgwKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICgwID09PSBlLnRhZykge1xuICAgICAgICBmID0gZVswXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHMgPSAhMTtcbiAgICAgICAgaWYgKHUpIHtcbiAgICAgICAgICBhLnB1c2goZVswXSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYXBwbHlJbm5lclNvdXJjZShyKGVbMF0pKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pKTtcbiAgICBpKHN0YXJ0KChlID0+IHtcbiAgICAgIGlmICgxID09PSBlKSB7XG4gICAgICAgIGlmICghbykge1xuICAgICAgICAgIG8gPSAhMDtcbiAgICAgICAgICBmKDEpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh1KSB7XG4gICAgICAgICAgdSA9ICExO1xuICAgICAgICAgIG4oMSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICghbyAmJiAhcykge1xuICAgICAgICAgIHMgPSAhMDtcbiAgICAgICAgICBmKDApO1xuICAgICAgICB9XG4gICAgICAgIGlmICh1ICYmICFsKSB7XG4gICAgICAgICAgbCA9ICEwO1xuICAgICAgICAgIG4oMCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KSkpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBjb25jYXRBbGwoZSkge1xuICByZXR1cm4gY29uY2F0TWFwKGlkZW50aXR5KShlKTtcbn1cblxuZnVuY3Rpb24gY29uY2F0KGUpIHtcbiAgcmV0dXJuIGNvbmNhdEFsbChyKGUpKTtcbn1cblxuZnVuY3Rpb24gZmlsdGVyKHIpIHtcbiAgcmV0dXJuIHQgPT4gaSA9PiB7XG4gICAgdmFyIGEgPSBlO1xuICAgIHQoKGUgPT4ge1xuICAgICAgaWYgKDAgPT09IGUpIHtcbiAgICAgICAgaSgwKTtcbiAgICAgIH0gZWxzZSBpZiAoMCA9PT0gZS50YWcpIHtcbiAgICAgICAgYSA9IGVbMF07XG4gICAgICAgIGkoZSk7XG4gICAgICB9IGVsc2UgaWYgKCFyKGVbMF0pKSB7XG4gICAgICAgIGEoMCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpKGUpO1xuICAgICAgfVxuICAgIH0pKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gbWFwKGUpIHtcbiAgcmV0dXJuIHIgPT4gdCA9PiByKChyID0+IHtcbiAgICBpZiAoMCA9PT0gciB8fCAwID09PSByLnRhZykge1xuICAgICAgdChyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdChwdXNoKGUoclswXSkpKTtcbiAgICB9XG4gIH0pKTtcbn1cblxuZnVuY3Rpb24gbWVyZ2VNYXAocikge1xuICByZXR1cm4gdCA9PiBpID0+IHtcbiAgICB2YXIgYSA9IFtdO1xuICAgIHZhciBmID0gZTtcbiAgICB2YXIgbiA9ICExO1xuICAgIHZhciBzID0gITE7XG4gICAgdCgodCA9PiB7XG4gICAgICBpZiAocykge30gZWxzZSBpZiAoMCA9PT0gdCkge1xuICAgICAgICBzID0gITA7XG4gICAgICAgIGlmICghYS5sZW5ndGgpIHtcbiAgICAgICAgICBpKDApO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKDAgPT09IHQudGFnKSB7XG4gICAgICAgIGYgPSB0WzBdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbiA9ICExO1xuICAgICAgICAhZnVuY3Rpb24gYXBwbHlJbm5lclNvdXJjZShyKSB7XG4gICAgICAgICAgdmFyIHQgPSBlO1xuICAgICAgICAgIHIoKGUgPT4ge1xuICAgICAgICAgICAgaWYgKDAgPT09IGUpIHtcbiAgICAgICAgICAgICAgaWYgKGEubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgdmFyIHIgPSBhLmluZGV4T2YodCk7XG4gICAgICAgICAgICAgICAgaWYgKHIgPiAtMSkge1xuICAgICAgICAgICAgICAgICAgKGEgPSBhLnNsaWNlKCkpLnNwbGljZShyLCAxKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKCFhLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgaWYgKHMpIHtcbiAgICAgICAgICAgICAgICAgICAgaSgwKTtcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIW4pIHtcbiAgICAgICAgICAgICAgICAgICAgbiA9ICEwO1xuICAgICAgICAgICAgICAgICAgICBmKDApO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmICgwID09PSBlLnRhZykge1xuICAgICAgICAgICAgICBhLnB1c2godCA9IGVbMF0pO1xuICAgICAgICAgICAgICB0KDApO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChhLmxlbmd0aCkge1xuICAgICAgICAgICAgICBpKGUpO1xuICAgICAgICAgICAgICB0KDApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pKTtcbiAgICAgICAgfShyKHRbMF0pKTtcbiAgICAgICAgaWYgKCFuKSB7XG4gICAgICAgICAgbiA9ICEwO1xuICAgICAgICAgIGYoMCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KSk7XG4gICAgaShzdGFydCgoZSA9PiB7XG4gICAgICBpZiAoMSA9PT0gZSkge1xuICAgICAgICBpZiAoIXMpIHtcbiAgICAgICAgICBzID0gITA7XG4gICAgICAgICAgZigxKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKHZhciByID0gMCwgdCA9IGEsIGkgPSBhLmxlbmd0aDsgciA8IGk7IHIrKykge1xuICAgICAgICAgIHRbcl0oMSk7XG4gICAgICAgIH1cbiAgICAgICAgYS5sZW5ndGggPSAwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKCFzICYmICFuKSB7XG4gICAgICAgICAgbiA9ICEwO1xuICAgICAgICAgIGYoMCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbiA9ICExO1xuICAgICAgICB9XG4gICAgICAgIGZvciAodmFyIGwgPSAwLCB1ID0gYSwgbyA9IGEubGVuZ3RoOyBsIDwgbzsgbCsrKSB7XG4gICAgICAgICAgdVtsXSgwKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pKSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIG1lcmdlQWxsKGUpIHtcbiAgcmV0dXJuIG1lcmdlTWFwKGlkZW50aXR5KShlKTtcbn1cblxuZnVuY3Rpb24gbWVyZ2UoZSkge1xuICByZXR1cm4gbWVyZ2VBbGwocihlKSk7XG59XG5cbmZ1bmN0aW9uIG9uRW5kKGUpIHtcbiAgcmV0dXJuIHIgPT4gdCA9PiB7XG4gICAgdmFyIGkgPSAhMTtcbiAgICByKChyID0+IHtcbiAgICAgIGlmIChpKSB7fSBlbHNlIGlmICgwID09PSByKSB7XG4gICAgICAgIGkgPSAhMDtcbiAgICAgICAgdCgwKTtcbiAgICAgICAgZSgpO1xuICAgICAgfSBlbHNlIGlmICgwID09PSByLnRhZykge1xuICAgICAgICB2YXIgYSA9IHJbMF07XG4gICAgICAgIHQoc3RhcnQoKHIgPT4ge1xuICAgICAgICAgIGlmICgxID09PSByKSB7XG4gICAgICAgICAgICBpID0gITA7XG4gICAgICAgICAgICBhKDEpO1xuICAgICAgICAgICAgZSgpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBhKHIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSkpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHQocik7XG4gICAgICB9XG4gICAgfSkpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBvblB1c2goZSkge1xuICByZXR1cm4gciA9PiB0ID0+IHtcbiAgICB2YXIgaSA9ICExO1xuICAgIHIoKHIgPT4ge1xuICAgICAgaWYgKGkpIHt9IGVsc2UgaWYgKDAgPT09IHIpIHtcbiAgICAgICAgaSA9ICEwO1xuICAgICAgICB0KDApO1xuICAgICAgfSBlbHNlIGlmICgwID09PSByLnRhZykge1xuICAgICAgICB2YXIgYSA9IHJbMF07XG4gICAgICAgIHQoc3RhcnQoKGUgPT4ge1xuICAgICAgICAgIGlmICgxID09PSBlKSB7XG4gICAgICAgICAgICBpID0gITA7XG4gICAgICAgICAgfVxuICAgICAgICAgIGEoZSk7XG4gICAgICAgIH0pKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlKHJbMF0pO1xuICAgICAgICB0KHIpO1xuICAgICAgfVxuICAgIH0pKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gb25TdGFydChlKSB7XG4gIHJldHVybiByID0+IHQgPT4gcigociA9PiB7XG4gICAgaWYgKDAgPT09IHIpIHtcbiAgICAgIHQoMCk7XG4gICAgfSBlbHNlIGlmICgwID09PSByLnRhZykge1xuICAgICAgdChyKTtcbiAgICAgIGUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdChyKTtcbiAgICB9XG4gIH0pKTtcbn1cblxuZnVuY3Rpb24gc2FtcGxlKHIpIHtcbiAgcmV0dXJuIHQgPT4gaSA9PiB7XG4gICAgdmFyIGEgPSBlO1xuICAgIHZhciBmID0gZTtcbiAgICB2YXIgbjtcbiAgICB2YXIgcyA9ICExO1xuICAgIHZhciBsID0gITE7XG4gICAgdCgoZSA9PiB7XG4gICAgICBpZiAobCkge30gZWxzZSBpZiAoMCA9PT0gZSkge1xuICAgICAgICBsID0gITA7XG4gICAgICAgIGYoMSk7XG4gICAgICAgIGkoMCk7XG4gICAgICB9IGVsc2UgaWYgKDAgPT09IGUudGFnKSB7XG4gICAgICAgIGEgPSBlWzBdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbiA9IGVbMF07XG4gICAgICAgIGlmICghcykge1xuICAgICAgICAgIHMgPSAhMDtcbiAgICAgICAgICBmKDApO1xuICAgICAgICAgIGEoMCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcyA9ICExO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSkpO1xuICAgIHIoKGUgPT4ge1xuICAgICAgaWYgKGwpIHt9IGVsc2UgaWYgKDAgPT09IGUpIHtcbiAgICAgICAgbCA9ICEwO1xuICAgICAgICBhKDEpO1xuICAgICAgICBpKDApO1xuICAgICAgfSBlbHNlIGlmICgwID09PSBlLnRhZykge1xuICAgICAgICBmID0gZVswXTtcbiAgICAgIH0gZWxzZSBpZiAodm9pZCAwICE9PSBuKSB7XG4gICAgICAgIHZhciByID0gcHVzaChuKTtcbiAgICAgICAgbiA9IHZvaWQgMDtcbiAgICAgICAgaShyKTtcbiAgICAgIH1cbiAgICB9KSk7XG4gICAgaShzdGFydCgoZSA9PiB7XG4gICAgICBpZiAoMSA9PT0gZSAmJiAhbCkge1xuICAgICAgICBsID0gITA7XG4gICAgICAgIGEoMSk7XG4gICAgICAgIGYoMSk7XG4gICAgICB9IGVsc2UgaWYgKCFsICYmICFzKSB7XG4gICAgICAgIHMgPSAhMDtcbiAgICAgICAgYSgwKTtcbiAgICAgICAgZigwKTtcbiAgICAgIH1cbiAgICB9KSkpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBzY2FuKGUsIHIpIHtcbiAgcmV0dXJuIHQgPT4gaSA9PiB7XG4gICAgdmFyIGEgPSByO1xuICAgIHQoKHIgPT4ge1xuICAgICAgaWYgKDAgPT09IHIpIHtcbiAgICAgICAgaSgwKTtcbiAgICAgIH0gZWxzZSBpZiAoMCA9PT0gci50YWcpIHtcbiAgICAgICAgaShyKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGkocHVzaChhID0gZShhLCByWzBdKSkpO1xuICAgICAgfVxuICAgIH0pKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gc2hhcmUocikge1xuICB2YXIgdCA9IFtdO1xuICB2YXIgaSA9IGU7XG4gIHZhciBhID0gITE7XG4gIHJldHVybiBlID0+IHtcbiAgICB0LnB1c2goZSk7XG4gICAgaWYgKDEgPT09IHQubGVuZ3RoKSB7XG4gICAgICByKChlID0+IHtcbiAgICAgICAgaWYgKDAgPT09IGUpIHtcbiAgICAgICAgICBmb3IgKHZhciByID0gMCwgZiA9IHQsIG4gPSB0Lmxlbmd0aDsgciA8IG47IHIrKykge1xuICAgICAgICAgICAgZltyXSgwKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdC5sZW5ndGggPSAwO1xuICAgICAgICB9IGVsc2UgaWYgKDAgPT09IGUudGFnKSB7XG4gICAgICAgICAgaSA9IGVbMF07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYSA9ICExO1xuICAgICAgICAgIGZvciAodmFyIHMgPSAwLCBsID0gdCwgdSA9IHQubGVuZ3RoOyBzIDwgdTsgcysrKSB7XG4gICAgICAgICAgICBsW3NdKGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSkpO1xuICAgIH1cbiAgICBlKHN0YXJ0KChyID0+IHtcbiAgICAgIGlmICgxID09PSByKSB7XG4gICAgICAgIHZhciBmID0gdC5pbmRleE9mKGUpO1xuICAgICAgICBpZiAoZiA+IC0xKSB7XG4gICAgICAgICAgKHQgPSB0LnNsaWNlKCkpLnNwbGljZShmLCAxKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXQubGVuZ3RoKSB7XG4gICAgICAgICAgaSgxKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICghYSkge1xuICAgICAgICBhID0gITA7XG4gICAgICAgIGkoMCk7XG4gICAgICB9XG4gICAgfSkpKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gc2tpcChyKSB7XG4gIHJldHVybiB0ID0+IGkgPT4ge1xuICAgIHZhciBhID0gZTtcbiAgICB2YXIgZiA9IHI7XG4gICAgdCgoZSA9PiB7XG4gICAgICBpZiAoMCA9PT0gZSkge1xuICAgICAgICBpKDApO1xuICAgICAgfSBlbHNlIGlmICgwID09PSBlLnRhZykge1xuICAgICAgICBhID0gZVswXTtcbiAgICAgICAgaShlKTtcbiAgICAgIH0gZWxzZSBpZiAoZi0tID4gMCkge1xuICAgICAgICBhKDApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaShlKTtcbiAgICAgIH1cbiAgICB9KSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHNraXBVbnRpbChyKSB7XG4gIHJldHVybiB0ID0+IGkgPT4ge1xuICAgIHZhciBhID0gZTtcbiAgICB2YXIgZiA9IGU7XG4gICAgdmFyIG4gPSAhMDtcbiAgICB2YXIgcyA9ICExO1xuICAgIHZhciBsID0gITE7XG4gICAgdCgoZSA9PiB7XG4gICAgICBpZiAobCkge30gZWxzZSBpZiAoMCA9PT0gZSkge1xuICAgICAgICBsID0gITA7XG4gICAgICAgIGlmIChuKSB7XG4gICAgICAgICAgZigxKTtcbiAgICAgICAgfVxuICAgICAgICBpKDApO1xuICAgICAgfSBlbHNlIGlmICgwID09PSBlLnRhZykge1xuICAgICAgICBhID0gZVswXTtcbiAgICAgICAgcigoZSA9PiB7XG4gICAgICAgICAgaWYgKDAgPT09IGUpIHtcbiAgICAgICAgICAgIGlmIChuKSB7XG4gICAgICAgICAgICAgIGwgPSAhMDtcbiAgICAgICAgICAgICAgYSgxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2UgaWYgKDAgPT09IGUudGFnKSB7XG4gICAgICAgICAgICAoZiA9IGVbMF0pKDApO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBuID0gITE7XG4gICAgICAgICAgICBmKDEpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSkpO1xuICAgICAgfSBlbHNlIGlmICghbikge1xuICAgICAgICBzID0gITE7XG4gICAgICAgIGkoZSk7XG4gICAgICB9IGVsc2UgaWYgKCFzKSB7XG4gICAgICAgIHMgPSAhMDtcbiAgICAgICAgYSgwKTtcbiAgICAgICAgZigwKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHMgPSAhMTtcbiAgICAgIH1cbiAgICB9KSk7XG4gICAgaShzdGFydCgoZSA9PiB7XG4gICAgICBpZiAoMSA9PT0gZSAmJiAhbCkge1xuICAgICAgICBsID0gITA7XG4gICAgICAgIGEoMSk7XG4gICAgICAgIGlmIChuKSB7XG4gICAgICAgICAgZigxKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICghbCAmJiAhcykge1xuICAgICAgICBzID0gITA7XG4gICAgICAgIGlmIChuKSB7XG4gICAgICAgICAgZigwKTtcbiAgICAgICAgfVxuICAgICAgICBhKDApO1xuICAgICAgfVxuICAgIH0pKSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHNraXBXaGlsZShyKSB7XG4gIHJldHVybiB0ID0+IGkgPT4ge1xuICAgIHZhciBhID0gZTtcbiAgICB2YXIgZiA9ICEwO1xuICAgIHQoKGUgPT4ge1xuICAgICAgaWYgKDAgPT09IGUpIHtcbiAgICAgICAgaSgwKTtcbiAgICAgIH0gZWxzZSBpZiAoMCA9PT0gZS50YWcpIHtcbiAgICAgICAgYSA9IGVbMF07XG4gICAgICAgIGkoZSk7XG4gICAgICB9IGVsc2UgaWYgKGYpIHtcbiAgICAgICAgaWYgKHIoZVswXSkpIHtcbiAgICAgICAgICBhKDApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGYgPSAhMTtcbiAgICAgICAgICBpKGUpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpKGUpO1xuICAgICAgfVxuICAgIH0pKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gc3dpdGNoTWFwKHIpIHtcbiAgcmV0dXJuIHQgPT4gaSA9PiB7XG4gICAgdmFyIGEgPSBlO1xuICAgIHZhciBmID0gZTtcbiAgICB2YXIgbiA9ICExO1xuICAgIHZhciBzID0gITE7XG4gICAgdmFyIGwgPSAhMTtcbiAgICB2YXIgdSA9ICExO1xuICAgIHQoKHQgPT4ge1xuICAgICAgaWYgKHUpIHt9IGVsc2UgaWYgKDAgPT09IHQpIHtcbiAgICAgICAgdSA9ICEwO1xuICAgICAgICBpZiAoIWwpIHtcbiAgICAgICAgICBpKDApO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKDAgPT09IHQudGFnKSB7XG4gICAgICAgIGEgPSB0WzBdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGwpIHtcbiAgICAgICAgICBmKDEpO1xuICAgICAgICAgIGYgPSBlO1xuICAgICAgICB9XG4gICAgICAgIGlmICghbikge1xuICAgICAgICAgIG4gPSAhMDtcbiAgICAgICAgICBhKDApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG4gPSAhMTtcbiAgICAgICAgfVxuICAgICAgICAhZnVuY3Rpb24gYXBwbHlJbm5lclNvdXJjZShlKSB7XG4gICAgICAgICAgbCA9ICEwO1xuICAgICAgICAgIGUoKGUgPT4ge1xuICAgICAgICAgICAgaWYgKCFsKSB7fSBlbHNlIGlmICgwID09PSBlKSB7XG4gICAgICAgICAgICAgIGwgPSAhMTtcbiAgICAgICAgICAgICAgaWYgKHUpIHtcbiAgICAgICAgICAgICAgICBpKDApO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKCFuKSB7XG4gICAgICAgICAgICAgICAgbiA9ICEwO1xuICAgICAgICAgICAgICAgIGEoMCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoMCA9PT0gZS50YWcpIHtcbiAgICAgICAgICAgICAgcyA9ICExO1xuICAgICAgICAgICAgICAoZiA9IGVbMF0pKDApO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgaShlKTtcbiAgICAgICAgICAgICAgaWYgKCFzKSB7XG4gICAgICAgICAgICAgICAgZigwKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzID0gITE7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KSk7XG4gICAgICAgIH0ocih0WzBdKSk7XG4gICAgICB9XG4gICAgfSkpO1xuICAgIGkoc3RhcnQoKGUgPT4ge1xuICAgICAgaWYgKDEgPT09IGUpIHtcbiAgICAgICAgaWYgKCF1KSB7XG4gICAgICAgICAgdSA9ICEwO1xuICAgICAgICAgIGEoMSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGwpIHtcbiAgICAgICAgICBsID0gITE7XG4gICAgICAgICAgZigxKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKCF1ICYmICFuKSB7XG4gICAgICAgICAgbiA9ICEwO1xuICAgICAgICAgIGEoMCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGwgJiYgIXMpIHtcbiAgICAgICAgICBzID0gITA7XG4gICAgICAgICAgZigwKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pKSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHN3aXRjaEFsbChlKSB7XG4gIHJldHVybiBzd2l0Y2hNYXAoaWRlbnRpdHkpKGUpO1xufVxuXG5mdW5jdGlvbiB0YWtlKHIpIHtcbiAgcmV0dXJuIHQgPT4gaSA9PiB7XG4gICAgdmFyIGEgPSBlO1xuICAgIHZhciBmID0gITE7XG4gICAgdmFyIG4gPSAwO1xuICAgIHQoKGUgPT4ge1xuICAgICAgaWYgKGYpIHt9IGVsc2UgaWYgKDAgPT09IGUpIHtcbiAgICAgICAgZiA9ICEwO1xuICAgICAgICBpKDApO1xuICAgICAgfSBlbHNlIGlmICgwID09PSBlLnRhZykge1xuICAgICAgICBpZiAociA8PSAwKSB7XG4gICAgICAgICAgZiA9ICEwO1xuICAgICAgICAgIGkoMCk7XG4gICAgICAgICAgZVswXSgxKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBhID0gZVswXTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChuKysgPCByKSB7XG4gICAgICAgIGkoZSk7XG4gICAgICAgIGlmICghZiAmJiBuID49IHIpIHtcbiAgICAgICAgICBmID0gITA7XG4gICAgICAgICAgaSgwKTtcbiAgICAgICAgICBhKDEpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpKGUpO1xuICAgICAgfVxuICAgIH0pKTtcbiAgICBpKHN0YXJ0KChlID0+IHtcbiAgICAgIGlmICgxID09PSBlICYmICFmKSB7XG4gICAgICAgIGYgPSAhMDtcbiAgICAgICAgYSgxKTtcbiAgICAgIH0gZWxzZSBpZiAoMCA9PT0gZSAmJiAhZiAmJiBuIDwgcikge1xuICAgICAgICBhKDApO1xuICAgICAgfVxuICAgIH0pKSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHRha2VMYXN0KHQpIHtcbiAgcmV0dXJuIGkgPT4gYSA9PiB7XG4gICAgdmFyIGYgPSBbXTtcbiAgICB2YXIgbiA9IGU7XG4gICAgaSgoZSA9PiB7XG4gICAgICBpZiAoMCA9PT0gZSkge1xuICAgICAgICByKGYpKGEpO1xuICAgICAgfSBlbHNlIGlmICgwID09PSBlLnRhZykge1xuICAgICAgICBpZiAodCA8PSAwKSB7XG4gICAgICAgICAgZVswXSgxKTtcbiAgICAgICAgICByKGYpKGEpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIChuID0gZVswXSkoMCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChmLmxlbmd0aCA+PSB0ICYmIHQpIHtcbiAgICAgICAgICBmLnNoaWZ0KCk7XG4gICAgICAgIH1cbiAgICAgICAgZi5wdXNoKGVbMF0pO1xuICAgICAgICBuKDApO1xuICAgICAgfVxuICAgIH0pKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gdGFrZVVudGlsKHIpIHtcbiAgcmV0dXJuIHQgPT4gaSA9PiB7XG4gICAgdmFyIGEgPSBlO1xuICAgIHZhciBmID0gZTtcbiAgICB2YXIgbiA9ICExO1xuICAgIHQoKGUgPT4ge1xuICAgICAgaWYgKG4pIHt9IGVsc2UgaWYgKDAgPT09IGUpIHtcbiAgICAgICAgbiA9ICEwO1xuICAgICAgICBmKDEpO1xuICAgICAgICBpKDApO1xuICAgICAgfSBlbHNlIGlmICgwID09PSBlLnRhZykge1xuICAgICAgICBhID0gZVswXTtcbiAgICAgICAgcigoZSA9PiB7XG4gICAgICAgICAgaWYgKDAgPT09IGUpIHt9IGVsc2UgaWYgKDAgPT09IGUudGFnKSB7XG4gICAgICAgICAgICAoZiA9IGVbMF0pKDApO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBuID0gITA7XG4gICAgICAgICAgICBmKDEpO1xuICAgICAgICAgICAgYSgxKTtcbiAgICAgICAgICAgIGkoMCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpKGUpO1xuICAgICAgfVxuICAgIH0pKTtcbiAgICBpKHN0YXJ0KChlID0+IHtcbiAgICAgIGlmICgxID09PSBlICYmICFuKSB7XG4gICAgICAgIG4gPSAhMDtcbiAgICAgICAgYSgxKTtcbiAgICAgICAgZigxKTtcbiAgICAgIH0gZWxzZSBpZiAoIW4pIHtcbiAgICAgICAgYSgwKTtcbiAgICAgIH1cbiAgICB9KSkpO1xuICB9O1xufVxuXG5mdW5jdGlvbiB0YWtlV2hpbGUociwgdCkge1xuICByZXR1cm4gaSA9PiBhID0+IHtcbiAgICB2YXIgZiA9IGU7XG4gICAgdmFyIG4gPSAhMTtcbiAgICBpKChlID0+IHtcbiAgICAgIGlmIChuKSB7fSBlbHNlIGlmICgwID09PSBlKSB7XG4gICAgICAgIG4gPSAhMDtcbiAgICAgICAgYSgwKTtcbiAgICAgIH0gZWxzZSBpZiAoMCA9PT0gZS50YWcpIHtcbiAgICAgICAgZiA9IGVbMF07XG4gICAgICAgIGEoZSk7XG4gICAgICB9IGVsc2UgaWYgKCFyKGVbMF0pKSB7XG4gICAgICAgIG4gPSAhMDtcbiAgICAgICAgaWYgKHQpIHtcbiAgICAgICAgICBhKGUpO1xuICAgICAgICB9XG4gICAgICAgIGEoMCk7XG4gICAgICAgIGYoMSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhKGUpO1xuICAgICAgfVxuICAgIH0pKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZGVib3VuY2UoZSkge1xuICByZXR1cm4gciA9PiB0ID0+IHtcbiAgICB2YXIgaTtcbiAgICB2YXIgYSA9ICExO1xuICAgIHZhciBmID0gITE7XG4gICAgcigociA9PiB7XG4gICAgICBpZiAoZikge30gZWxzZSBpZiAoMCA9PT0gcikge1xuICAgICAgICBmID0gITA7XG4gICAgICAgIGlmIChpKSB7XG4gICAgICAgICAgYSA9ICEwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHQoMCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoMCA9PT0gci50YWcpIHtcbiAgICAgICAgdmFyIG4gPSByWzBdO1xuICAgICAgICB0KHN0YXJ0KChlID0+IHtcbiAgICAgICAgICBpZiAoMSA9PT0gZSAmJiAhZikge1xuICAgICAgICAgICAgZiA9ICEwO1xuICAgICAgICAgICAgYSA9ICExO1xuICAgICAgICAgICAgaWYgKGkpIHtcbiAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KGkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbigxKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKCFmKSB7XG4gICAgICAgICAgICBuKDApO1xuICAgICAgICAgIH1cbiAgICAgICAgfSkpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChpKSB7XG4gICAgICAgICAgY2xlYXJUaW1lb3V0KGkpO1xuICAgICAgICB9XG4gICAgICAgIGkgPSBzZXRUaW1lb3V0KCgoKSA9PiB7XG4gICAgICAgICAgaSA9IHZvaWQgMDtcbiAgICAgICAgICB0KHIpO1xuICAgICAgICAgIGlmIChhKSB7XG4gICAgICAgICAgICB0KDApO1xuICAgICAgICAgIH1cbiAgICAgICAgfSksIGUoclswXSkpO1xuICAgICAgfVxuICAgIH0pKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZGVsYXkoZSkge1xuICByZXR1cm4gciA9PiB0ID0+IHtcbiAgICB2YXIgaSA9IDA7XG4gICAgcigociA9PiB7XG4gICAgICBpZiAoMCAhPT0gciAmJiAwID09PSByLnRhZykge1xuICAgICAgICB0KHIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaSsrO1xuICAgICAgICBzZXRUaW1lb3V0KCgoKSA9PiB7XG4gICAgICAgICAgaWYgKGkpIHtcbiAgICAgICAgICAgIGktLTtcbiAgICAgICAgICAgIHQocik7XG4gICAgICAgICAgfVxuICAgICAgICB9KSwgZSk7XG4gICAgICB9XG4gICAgfSkpO1xuICB9O1xufVxuXG5mdW5jdGlvbiB0aHJvdHRsZShlKSB7XG4gIHJldHVybiByID0+IHQgPT4ge1xuICAgIHZhciBpID0gITE7XG4gICAgdmFyIGE7XG4gICAgcigociA9PiB7XG4gICAgICBpZiAoMCA9PT0gcikge1xuICAgICAgICBpZiAoYSkge1xuICAgICAgICAgIGNsZWFyVGltZW91dChhKTtcbiAgICAgICAgfVxuICAgICAgICB0KDApO1xuICAgICAgfSBlbHNlIGlmICgwID09PSByLnRhZykge1xuICAgICAgICB2YXIgZiA9IHJbMF07XG4gICAgICAgIHQoc3RhcnQoKGUgPT4ge1xuICAgICAgICAgIGlmICgxID09PSBlKSB7XG4gICAgICAgICAgICBpZiAoYSkge1xuICAgICAgICAgICAgICBjbGVhclRpbWVvdXQoYSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmKDEpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBmKDApO1xuICAgICAgICAgIH1cbiAgICAgICAgfSkpKTtcbiAgICAgIH0gZWxzZSBpZiAoIWkpIHtcbiAgICAgICAgaSA9ICEwO1xuICAgICAgICBpZiAoYSkge1xuICAgICAgICAgIGNsZWFyVGltZW91dChhKTtcbiAgICAgICAgfVxuICAgICAgICBhID0gc2V0VGltZW91dCgoKCkgPT4ge1xuICAgICAgICAgIGEgPSB2b2lkIDA7XG4gICAgICAgICAgaSA9ICExO1xuICAgICAgICB9KSwgZShyWzBdKSk7XG4gICAgICAgIHQocik7XG4gICAgICB9XG4gICAgfSkpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBsYXp5KGUpIHtcbiAgcmV0dXJuIHIgPT4gZSgpKHIpO1xufVxuXG5mdW5jdGlvbiBmcm9tQXN5bmNJdGVyYWJsZShlKSB7XG4gIHJldHVybiByID0+IHtcbiAgICB2YXIgdCA9IGVbYXN5bmNJdGVyYXRvclN5bWJvbCgpXSAmJiBlW2FzeW5jSXRlcmF0b3JTeW1ib2woKV0oKSB8fCBlO1xuICAgIHZhciBpID0gITE7XG4gICAgdmFyIGEgPSAhMTtcbiAgICB2YXIgZiA9ICExO1xuICAgIHZhciBuO1xuICAgIHIoc3RhcnQoKGFzeW5jIGUgPT4ge1xuICAgICAgaWYgKDEgPT09IGUpIHtcbiAgICAgICAgaSA9ICEwO1xuICAgICAgICBpZiAodC5yZXR1cm4pIHtcbiAgICAgICAgICB0LnJldHVybigpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGEpIHtcbiAgICAgICAgZiA9ICEwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZm9yIChmID0gYSA9ICEwOyBmICYmICFpOyApIHtcbiAgICAgICAgICBpZiAoKG4gPSBhd2FpdCB0Lm5leHQoKSkuZG9uZSkge1xuICAgICAgICAgICAgaSA9ICEwO1xuICAgICAgICAgICAgaWYgKHQucmV0dXJuKSB7XG4gICAgICAgICAgICAgIGF3YWl0IHQucmV0dXJuKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByKDApO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICBmID0gITE7XG4gICAgICAgICAgICAgIHIocHVzaChuLnZhbHVlKSk7XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgIGlmICh0LnRocm93KSB7XG4gICAgICAgICAgICAgICAgaWYgKGkgPSAhIShhd2FpdCB0LnRocm93KGUpKS5kb25lKSB7XG4gICAgICAgICAgICAgICAgICByKDApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGEgPSAhMTtcbiAgICAgIH1cbiAgICB9KSkpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBmcm9tSXRlcmFibGUoZSkge1xuICBpZiAoZVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0pIHtcbiAgICByZXR1cm4gZnJvbUFzeW5jSXRlcmFibGUoZSk7XG4gIH1cbiAgcmV0dXJuIHIgPT4ge1xuICAgIHZhciB0ID0gZVtTeW1ib2wuaXRlcmF0b3JdKCk7XG4gICAgdmFyIGkgPSAhMTtcbiAgICB2YXIgYSA9ICExO1xuICAgIHZhciBmID0gITE7XG4gICAgdmFyIG47XG4gICAgcihzdGFydCgoZSA9PiB7XG4gICAgICBpZiAoMSA9PT0gZSkge1xuICAgICAgICBpID0gITA7XG4gICAgICAgIGlmICh0LnJldHVybikge1xuICAgICAgICAgIHQucmV0dXJuKCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoYSkge1xuICAgICAgICBmID0gITA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmb3IgKGYgPSBhID0gITA7IGYgJiYgIWk7ICkge1xuICAgICAgICAgIGlmICgobiA9IHQubmV4dCgpKS5kb25lKSB7XG4gICAgICAgICAgICBpID0gITA7XG4gICAgICAgICAgICBpZiAodC5yZXR1cm4pIHtcbiAgICAgICAgICAgICAgdC5yZXR1cm4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHIoMCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIGYgPSAhMTtcbiAgICAgICAgICAgICAgcihwdXNoKG4udmFsdWUpKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgaWYgKHQudGhyb3cpIHtcbiAgICAgICAgICAgICAgICBpZiAoaSA9ICEhdC50aHJvdyhlKS5kb25lKSB7XG4gICAgICAgICAgICAgICAgICByKDApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGEgPSAhMTtcbiAgICAgIH1cbiAgICB9KSkpO1xuICB9O1xufVxuXG52YXIgciA9IGZyb21JdGVyYWJsZTtcblxuZnVuY3Rpb24gZnJvbVZhbHVlKGUpIHtcbiAgcmV0dXJuIHIgPT4ge1xuICAgIHZhciB0ID0gITE7XG4gICAgcihzdGFydCgoaSA9PiB7XG4gICAgICBpZiAoMSA9PT0gaSkge1xuICAgICAgICB0ID0gITA7XG4gICAgICB9IGVsc2UgaWYgKCF0KSB7XG4gICAgICAgIHQgPSAhMDtcbiAgICAgICAgcihwdXNoKGUpKTtcbiAgICAgICAgcigwKTtcbiAgICAgIH1cbiAgICB9KSkpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBtYWtlKGUpIHtcbiAgcmV0dXJuIHIgPT4ge1xuICAgIHZhciB0ID0gITE7XG4gICAgdmFyIGkgPSBlKHtcbiAgICAgIG5leHQoZSkge1xuICAgICAgICBpZiAoIXQpIHtcbiAgICAgICAgICByKHB1c2goZSkpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgY29tcGxldGUoKSB7XG4gICAgICAgIGlmICghdCkge1xuICAgICAgICAgIHQgPSAhMDtcbiAgICAgICAgICByKDApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gICAgcihzdGFydCgoZSA9PiB7XG4gICAgICBpZiAoMSA9PT0gZSAmJiAhdCkge1xuICAgICAgICB0ID0gITA7XG4gICAgICAgIGkoKTtcbiAgICAgIH1cbiAgICB9KSkpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBtYWtlU3ViamVjdCgpIHtcbiAgdmFyIGU7XG4gIHZhciByO1xuICByZXR1cm4ge1xuICAgIHNvdXJjZTogc2hhcmUobWFrZSgodCA9PiB7XG4gICAgICBlID0gdC5uZXh0O1xuICAgICAgciA9IHQuY29tcGxldGU7XG4gICAgICByZXR1cm4gdGVhcmRvd25QbGFjZWhvbGRlcjtcbiAgICB9KSkpLFxuICAgIG5leHQocikge1xuICAgICAgaWYgKGUpIHtcbiAgICAgICAgZShyKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGNvbXBsZXRlKCkge1xuICAgICAgaWYgKHIpIHtcbiAgICAgICAgcigpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbn1cblxudmFyIGVtcHR5ID0gZSA9PiB7XG4gIHZhciByID0gITE7XG4gIGUoc3RhcnQoKHQgPT4ge1xuICAgIGlmICgxID09PSB0KSB7XG4gICAgICByID0gITA7XG4gICAgfSBlbHNlIGlmICghcikge1xuICAgICAgciA9ICEwO1xuICAgICAgZSgwKTtcbiAgICB9XG4gIH0pKSk7XG59O1xuXG52YXIgbmV2ZXIgPSByID0+IHtcbiAgcihzdGFydChlKSk7XG59O1xuXG5mdW5jdGlvbiBpbnRlcnZhbChlKSB7XG4gIHJldHVybiBtYWtlKChyID0+IHtcbiAgICB2YXIgdCA9IDA7XG4gICAgdmFyIGkgPSBzZXRJbnRlcnZhbCgoKCkgPT4gci5uZXh0KHQrKykpLCBlKTtcbiAgICByZXR1cm4gKCkgPT4gY2xlYXJJbnRlcnZhbChpKTtcbiAgfSkpO1xufVxuXG5mdW5jdGlvbiBmcm9tRG9tRXZlbnQoZSwgcikge1xuICByZXR1cm4gbWFrZSgodCA9PiB7XG4gICAgZS5hZGRFdmVudExpc3RlbmVyKHIsIHQubmV4dCk7XG4gICAgcmV0dXJuICgpID0+IGUucmVtb3ZlRXZlbnRMaXN0ZW5lcihyLCB0Lm5leHQpO1xuICB9KSk7XG59XG5cbmZ1bmN0aW9uIGZyb21Qcm9taXNlKGUpIHtcbiAgcmV0dXJuIG1ha2UoKHIgPT4ge1xuICAgIGUudGhlbigoZSA9PiB7XG4gICAgICBQcm9taXNlLnJlc29sdmUoZSkudGhlbigoKCkgPT4ge1xuICAgICAgICByLm5leHQoZSk7XG4gICAgICAgIHIuY29tcGxldGUoKTtcbiAgICAgIH0pKTtcbiAgICB9KSk7XG4gICAgcmV0dXJuIHRlYXJkb3duUGxhY2Vob2xkZXI7XG4gIH0pKTtcbn1cblxuZnVuY3Rpb24gc3Vic2NyaWJlKHIpIHtcbiAgcmV0dXJuIHQgPT4ge1xuICAgIHZhciBpID0gZTtcbiAgICB2YXIgYSA9ICExO1xuICAgIHQoKGUgPT4ge1xuICAgICAgaWYgKDAgPT09IGUpIHtcbiAgICAgICAgYSA9ICEwO1xuICAgICAgfSBlbHNlIGlmICgwID09PSBlLnRhZykge1xuICAgICAgICAoaSA9IGVbMF0pKDApO1xuICAgICAgfSBlbHNlIGlmICghYSkge1xuICAgICAgICByKGVbMF0pO1xuICAgICAgICBpKDApO1xuICAgICAgfVxuICAgIH0pKTtcbiAgICByZXR1cm4ge1xuICAgICAgdW5zdWJzY3JpYmUoKSB7XG4gICAgICAgIGlmICghYSkge1xuICAgICAgICAgIGEgPSAhMDtcbiAgICAgICAgICBpKDEpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZm9yRWFjaChlKSB7XG4gIHJldHVybiByID0+IHtcbiAgICBzdWJzY3JpYmUoZSkocik7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHB1Ymxpc2goZSkge1xuICBzdWJzY3JpYmUoKGUgPT4ge30pKShlKTtcbn1cblxudmFyIHQgPSB7XG4gIGRvbmU6ICEwXG59O1xuXG52YXIgdG9Bc3luY0l0ZXJhYmxlID0gciA9PiB7XG4gIHZhciBpID0gW107XG4gIHZhciBhID0gITE7XG4gIHZhciBmID0gITE7XG4gIHZhciBuID0gITE7XG4gIHZhciBzID0gZTtcbiAgdmFyIGw7XG4gIHJldHVybiB7XG4gICAgYXN5bmMgbmV4dCgpIHtcbiAgICAgIGlmICghZikge1xuICAgICAgICBmID0gITA7XG4gICAgICAgIHIoKGUgPT4ge1xuICAgICAgICAgIGlmIChhKSB7fSBlbHNlIGlmICgwID09PSBlKSB7XG4gICAgICAgICAgICBpZiAobCkge1xuICAgICAgICAgICAgICBsID0gbCh0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGEgPSAhMDtcbiAgICAgICAgICB9IGVsc2UgaWYgKDAgPT09IGUudGFnKSB7XG4gICAgICAgICAgICBuID0gITA7XG4gICAgICAgICAgICAocyA9IGVbMF0pKDApO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBuID0gITE7XG4gICAgICAgICAgICBpZiAobCkge1xuICAgICAgICAgICAgICBsID0gbCh7XG4gICAgICAgICAgICAgICAgdmFsdWU6IGVbMF0sXG4gICAgICAgICAgICAgICAgZG9uZTogITFcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBpLnB1c2goZVswXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9KSk7XG4gICAgICB9XG4gICAgICBpZiAoYSAmJiAhaS5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIHQ7XG4gICAgICB9IGVsc2UgaWYgKCFhICYmICFuICYmIGkubGVuZ3RoIDw9IDEpIHtcbiAgICAgICAgbiA9ICEwO1xuICAgICAgICBzKDApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGkubGVuZ3RoID8ge1xuICAgICAgICB2YWx1ZTogaS5zaGlmdCgpLFxuICAgICAgICBkb25lOiAhMVxuICAgICAgfSA6IG5ldyBQcm9taXNlKChlID0+IGwgPSBlKSk7XG4gICAgfSxcbiAgICBhc3luYyByZXR1cm4oKSB7XG4gICAgICBpZiAoIWEpIHtcbiAgICAgICAgbCA9IHMoMSk7XG4gICAgICB9XG4gICAgICBhID0gITA7XG4gICAgICByZXR1cm4gdDtcbiAgICB9LFxuICAgIFthc3luY0l0ZXJhdG9yU3ltYm9sKCldKCkge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICB9O1xufTtcblxuZnVuY3Rpb24gdG9BcnJheShyKSB7XG4gIHZhciB0ID0gW107XG4gIHZhciBpID0gZTtcbiAgdmFyIGEgPSAhMTtcbiAgcigoZSA9PiB7XG4gICAgaWYgKDAgPT09IGUpIHtcbiAgICAgIGEgPSAhMDtcbiAgICB9IGVsc2UgaWYgKDAgPT09IGUudGFnKSB7XG4gICAgICAoaSA9IGVbMF0pKDApO1xuICAgIH0gZWxzZSB7XG4gICAgICB0LnB1c2goZVswXSk7XG4gICAgICBpKDApO1xuICAgIH1cbiAgfSkpO1xuICBpZiAoIWEpIHtcbiAgICBpKDEpO1xuICB9XG4gIHJldHVybiB0O1xufVxuXG5mdW5jdGlvbiB0b1Byb21pc2Uocikge1xuICByZXR1cm4gbmV3IFByb21pc2UoKHQgPT4ge1xuICAgIHZhciBpID0gZTtcbiAgICB2YXIgYTtcbiAgICByKChlID0+IHtcbiAgICAgIGlmICgwID09PSBlKSB7XG4gICAgICAgIFByb21pc2UucmVzb2x2ZShhKS50aGVuKHQpO1xuICAgICAgfSBlbHNlIGlmICgwID09PSBlLnRhZykge1xuICAgICAgICAoaSA9IGVbMF0pKDApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYSA9IGVbMF07XG4gICAgICAgIGkoMCk7XG4gICAgICB9XG4gICAgfSkpO1xuICB9KSk7XG59XG5cbmZ1bmN0aW9uIHppcChyKSB7XG4gIHZhciB0ID0gT2JqZWN0LmtleXMocikubGVuZ3RoO1xuICByZXR1cm4gaSA9PiB7XG4gICAgdmFyIGEgPSBuZXcgU2V0O1xuICAgIHZhciBmID0gQXJyYXkuaXNBcnJheShyKSA/IG5ldyBBcnJheSh0KS5maWxsKGUpIDoge307XG4gICAgdmFyIG4gPSBBcnJheS5pc0FycmF5KHIpID8gbmV3IEFycmF5KHQpIDoge307XG4gICAgdmFyIHMgPSAhMTtcbiAgICB2YXIgbCA9ICExO1xuICAgIHZhciB1ID0gITE7XG4gICAgdmFyIG8gPSAwO1xuICAgIHZhciBsb29wID0gZnVuY3Rpb24odikge1xuICAgICAgclt2XSgoYyA9PiB7XG4gICAgICAgIGlmICgwID09PSBjKSB7XG4gICAgICAgICAgaWYgKG8gPj0gdCAtIDEpIHtcbiAgICAgICAgICAgIHUgPSAhMDtcbiAgICAgICAgICAgIGkoMCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG8rKztcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoMCA9PT0gYy50YWcpIHtcbiAgICAgICAgICBmW3ZdID0gY1swXTtcbiAgICAgICAgfSBlbHNlIGlmICghdSkge1xuICAgICAgICAgIG5bdl0gPSBjWzBdO1xuICAgICAgICAgIGEuYWRkKHYpO1xuICAgICAgICAgIGlmICghcyAmJiBhLnNpemUgPCB0KSB7XG4gICAgICAgICAgICBpZiAoIWwpIHtcbiAgICAgICAgICAgICAgZm9yICh2YXIgaCBpbiByKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFhLmhhcyhoKSkge1xuICAgICAgICAgICAgICAgICAgKGZbaF0gfHwgZSkoMCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBsID0gITE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHMgPSAhMDtcbiAgICAgICAgICAgIGwgPSAhMTtcbiAgICAgICAgICAgIGkocHVzaChBcnJheS5pc0FycmF5KG4pID8gbi5zbGljZSgpIDoge1xuICAgICAgICAgICAgICAuLi5uXG4gICAgICAgICAgICB9KSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KSk7XG4gICAgfTtcbiAgICBmb3IgKHZhciB2IGluIHIpIHtcbiAgICAgIGxvb3Aodik7XG4gICAgfVxuICAgIGkoc3RhcnQoKGUgPT4ge1xuICAgICAgaWYgKHUpIHt9IGVsc2UgaWYgKDEgPT09IGUpIHtcbiAgICAgICAgdSA9ICEwO1xuICAgICAgICBmb3IgKHZhciByIGluIGYpIHtcbiAgICAgICAgICBmW3JdKDEpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKCFsKSB7XG4gICAgICAgIGwgPSAhMDtcbiAgICAgICAgZm9yICh2YXIgdCBpbiBmKSB7XG4gICAgICAgICAgZlt0XSgwKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pKSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNvbWJpbmUoLi4uZSkge1xuICByZXR1cm4gemlwKGUpO1xufVxuXG5mdW5jdGlvbiBmcm9tT2JzZXJ2YWJsZShlKSB7XG4gIHJldHVybiByID0+IHtcbiAgICB2YXIgdCA9IChlW29ic2VydmFibGVTeW1ib2woKV0gPyBlW29ic2VydmFibGVTeW1ib2woKV0oKSA6IGUpLnN1YnNjcmliZSh7XG4gICAgICBuZXh0KGUpIHtcbiAgICAgICAgcihwdXNoKGUpKTtcbiAgICAgIH0sXG4gICAgICBjb21wbGV0ZSgpIHtcbiAgICAgICAgcigwKTtcbiAgICAgIH0sXG4gICAgICBlcnJvcihlKSB7XG4gICAgICAgIHRocm93IGU7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcihzdGFydCgoZSA9PiB7XG4gICAgICBpZiAoMSA9PT0gZSkge1xuICAgICAgICB0LnVuc3Vic2NyaWJlKCk7XG4gICAgICB9XG4gICAgfSkpKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gdG9PYnNlcnZhYmxlKHIpIHtcbiAgcmV0dXJuIHtcbiAgICBzdWJzY3JpYmUodCwgaSwgYSkge1xuICAgICAgdmFyIGYgPSBcIm9iamVjdFwiID09IHR5cGVvZiB0ID8gdCA6IHtcbiAgICAgICAgbmV4dDogdCxcbiAgICAgICAgZXJyb3I6IGksXG4gICAgICAgIGNvbXBsZXRlOiBhXG4gICAgICB9O1xuICAgICAgdmFyIG4gPSBlO1xuICAgICAgdmFyIHMgPSAhMTtcbiAgICAgIHIoKGUgPT4ge1xuICAgICAgICBpZiAocykge30gZWxzZSBpZiAoMCA9PT0gZSkge1xuICAgICAgICAgIHMgPSAhMDtcbiAgICAgICAgICBpZiAoZi5jb21wbGV0ZSkge1xuICAgICAgICAgICAgZi5jb21wbGV0ZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICgwID09PSBlLnRhZykge1xuICAgICAgICAgIChuID0gZVswXSkoMCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZi5uZXh0KGVbMF0pO1xuICAgICAgICAgIG4oMCk7XG4gICAgICAgIH1cbiAgICAgIH0pKTtcbiAgICAgIHZhciBsID0ge1xuICAgICAgICBjbG9zZWQ6ICExLFxuICAgICAgICB1bnN1YnNjcmliZSgpIHtcbiAgICAgICAgICBsLmNsb3NlZCA9ICEwO1xuICAgICAgICAgIHMgPSAhMDtcbiAgICAgICAgICBuKDEpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgcmV0dXJuIGw7XG4gICAgfSxcbiAgICBbb2JzZXJ2YWJsZVN5bWJvbCgpXSgpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gZnJvbUNhbGxiYWcoZSkge1xuICByZXR1cm4gciA9PiB7XG4gICAgZSgwLCAoKGUsIHQpID0+IHtcbiAgICAgIGlmICgwID09PSBlKSB7XG4gICAgICAgIHIoc3RhcnQoKGUgPT4ge1xuICAgICAgICAgIHQoZSArIDEpO1xuICAgICAgICB9KSkpO1xuICAgICAgfSBlbHNlIGlmICgxID09PSBlKSB7XG4gICAgICAgIHIocHVzaCh0KSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByKDApO1xuICAgICAgfVxuICAgIH0pKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gdG9DYWxsYmFnKGUpIHtcbiAgcmV0dXJuIChyLCB0KSA9PiB7XG4gICAgaWYgKDAgPT09IHIpIHtcbiAgICAgIGUoKGUgPT4ge1xuICAgICAgICBpZiAoMCA9PT0gZSkge1xuICAgICAgICAgIHQoMik7XG4gICAgICAgIH0gZWxzZSBpZiAoMCA9PT0gZS50YWcpIHtcbiAgICAgICAgICB0KDAsIChyID0+IHtcbiAgICAgICAgICAgIGlmIChyIDwgMykge1xuICAgICAgICAgICAgICBlWzBdKHIgLSAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdCgxLCBlWzBdKTtcbiAgICAgICAgfVxuICAgICAgfSkpO1xuICAgIH1cbiAgfTtcbn1cblxudmFyIHBpcGUgPSAoLi4uZSkgPT4ge1xuICB2YXIgciA9IGVbMF07XG4gIGZvciAodmFyIHQgPSAxLCBpID0gZS5sZW5ndGg7IHQgPCBpOyB0KyspIHtcbiAgICByID0gZVt0XShyKTtcbiAgfVxuICByZXR1cm4gcjtcbn07XG5cbmV4cG9ydCB7IGJ1ZmZlciwgY29tYmluZSwgY29uY2F0LCBjb25jYXRBbGwsIGNvbmNhdE1hcCwgZGVib3VuY2UsIGRlbGF5LCBlbXB0eSwgZmlsdGVyLCBtZXJnZUFsbCBhcyBmbGF0dGVuLCBmb3JFYWNoLCByIGFzIGZyb21BcnJheSwgZnJvbUFzeW5jSXRlcmFibGUsIGZyb21DYWxsYmFnLCBmcm9tRG9tRXZlbnQsIGZyb21JdGVyYWJsZSwgZnJvbU9ic2VydmFibGUsIGZyb21Qcm9taXNlLCBmcm9tVmFsdWUsIGludGVydmFsLCBsYXp5LCBtYWtlLCBtYWtlU3ViamVjdCwgbWFwLCBtZXJnZSwgbWVyZ2VBbGwsIG1lcmdlTWFwLCBuZXZlciwgb25FbmQsIG9uUHVzaCwgb25TdGFydCwgcGlwZSwgcHVibGlzaCwgc2FtcGxlLCBzY2FuLCBzaGFyZSwgc2tpcCwgc2tpcFVudGlsLCBza2lwV2hpbGUsIHN1YnNjcmliZSwgc3dpdGNoQWxsLCBzd2l0Y2hNYXAsIHRha2UsIHRha2VMYXN0LCB0YWtlVW50aWwsIHRha2VXaGlsZSwgb25QdXNoIGFzIHRhcCwgdGhyb3R0bGUsIHRvQXJyYXksIHRvQXN5bmNJdGVyYWJsZSwgdG9DYWxsYmFnLCB0b09ic2VydmFibGUsIHRvUHJvbWlzZSwgemlwIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD13b25rYS5tanMubWFwXG4iXSwibmFtZXMiOlsidGVhcmRvd25QbGFjZWhvbGRlciIsImUiLCJzdGFydCIsInRhZyIsInB1c2giLCJhc3luY0l0ZXJhdG9yU3ltYm9sIiwiU3ltYm9sIiwiYXN5bmNJdGVyYXRvciIsIm9ic2VydmFibGVTeW1ib2wiLCJvYnNlcnZhYmxlIiwiaWRlbnRpdHkiLCJidWZmZXIiLCJyIiwidCIsImkiLCJhIiwiZiIsIm4iLCJzIiwibCIsImxlbmd0aCIsImNvbmNhdE1hcCIsInUiLCJvIiwiYXBwbHlJbm5lclNvdXJjZSIsInNoaWZ0IiwiY29uY2F0QWxsIiwiY29uY2F0IiwiZmlsdGVyIiwibWFwIiwibWVyZ2VNYXAiLCJpbmRleE9mIiwic2xpY2UiLCJzcGxpY2UiLCJtZXJnZUFsbCIsIm1lcmdlIiwib25FbmQiLCJvblB1c2giLCJvblN0YXJ0Iiwic2FtcGxlIiwic2NhbiIsInNoYXJlIiwic2tpcCIsInNraXBVbnRpbCIsInNraXBXaGlsZSIsInN3aXRjaE1hcCIsInN3aXRjaEFsbCIsInRha2UiLCJ0YWtlTGFzdCIsInRha2VVbnRpbCIsInRha2VXaGlsZSIsImRlYm91bmNlIiwiY2xlYXJUaW1lb3V0Iiwic2V0VGltZW91dCIsImRlbGF5IiwidGhyb3R0bGUiLCJsYXp5IiwiZnJvbUFzeW5jSXRlcmFibGUiLCJyZXR1cm4iLCJuZXh0IiwiZG9uZSIsInZhbHVlIiwidGhyb3ciLCJmcm9tSXRlcmFibGUiLCJpdGVyYXRvciIsImZyb21WYWx1ZSIsIm1ha2UiLCJjb21wbGV0ZSIsIm1ha2VTdWJqZWN0Iiwic291cmNlIiwiZW1wdHkiLCJuZXZlciIsImludGVydmFsIiwic2V0SW50ZXJ2YWwiLCJjbGVhckludGVydmFsIiwiZnJvbURvbUV2ZW50IiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJmcm9tUHJvbWlzZSIsInRoZW4iLCJQcm9taXNlIiwicmVzb2x2ZSIsInN1YnNjcmliZSIsInVuc3Vic2NyaWJlIiwiZm9yRWFjaCIsInB1Ymxpc2giLCJ0b0FzeW5jSXRlcmFibGUiLCJ0b0FycmF5IiwidG9Qcm9taXNlIiwiemlwIiwiT2JqZWN0Iiwia2V5cyIsIlNldCIsIkFycmF5IiwiaXNBcnJheSIsImZpbGwiLCJsb29wIiwidiIsImMiLCJhZGQiLCJzaXplIiwiaCIsImhhcyIsImNvbWJpbmUiLCJmcm9tT2JzZXJ2YWJsZSIsImVycm9yIiwidG9PYnNlcnZhYmxlIiwiY2xvc2VkIiwiZnJvbUNhbGxiYWciLCJ0b0NhbGxiYWciLCJwaXBlIiwiZmxhdHRlbiIsImZyb21BcnJheSIsInRhcCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/wonka/dist/wonka.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/zod/lib/index.mjs":
/*!****************************************!*\
  !*** ./node_modules/zod/lib/index.mjs ***!
  \****************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BRAND: function() { return /* binding */ BRAND; },\n/* harmony export */   DIRTY: function() { return /* binding */ DIRTY; },\n/* harmony export */   EMPTY_PATH: function() { return /* binding */ EMPTY_PATH; },\n/* harmony export */   INVALID: function() { return /* binding */ INVALID; },\n/* harmony export */   NEVER: function() { return /* binding */ NEVER; },\n/* harmony export */   OK: function() { return /* binding */ OK; },\n/* harmony export */   ParseStatus: function() { return /* binding */ ParseStatus; },\n/* harmony export */   Schema: function() { return /* binding */ ZodType; },\n/* harmony export */   ZodAny: function() { return /* binding */ ZodAny; },\n/* harmony export */   ZodArray: function() { return /* binding */ ZodArray; },\n/* harmony export */   ZodBigInt: function() { return /* binding */ ZodBigInt; },\n/* harmony export */   ZodBoolean: function() { return /* binding */ ZodBoolean; },\n/* harmony export */   ZodBranded: function() { return /* binding */ ZodBranded; },\n/* harmony export */   ZodCatch: function() { return /* binding */ ZodCatch; },\n/* harmony export */   ZodDate: function() { return /* binding */ ZodDate; },\n/* harmony export */   ZodDefault: function() { return /* binding */ ZodDefault; },\n/* harmony export */   ZodDiscriminatedUnion: function() { return /* binding */ ZodDiscriminatedUnion; },\n/* harmony export */   ZodEffects: function() { return /* binding */ ZodEffects; },\n/* harmony export */   ZodEnum: function() { return /* binding */ ZodEnum; },\n/* harmony export */   ZodError: function() { return /* binding */ ZodError; },\n/* harmony export */   ZodFirstPartyTypeKind: function() { return /* binding */ ZodFirstPartyTypeKind; },\n/* harmony export */   ZodFunction: function() { return /* binding */ ZodFunction; },\n/* harmony export */   ZodIntersection: function() { return /* binding */ ZodIntersection; },\n/* harmony export */   ZodIssueCode: function() { return /* binding */ ZodIssueCode; },\n/* harmony export */   ZodLazy: function() { return /* binding */ ZodLazy; },\n/* harmony export */   ZodLiteral: function() { return /* binding */ ZodLiteral; },\n/* harmony export */   ZodMap: function() { return /* binding */ ZodMap; },\n/* harmony export */   ZodNaN: function() { return /* binding */ ZodNaN; },\n/* harmony export */   ZodNativeEnum: function() { return /* binding */ ZodNativeEnum; },\n/* harmony export */   ZodNever: function() { return /* binding */ ZodNever; },\n/* harmony export */   ZodNull: function() { return /* binding */ ZodNull; },\n/* harmony export */   ZodNullable: function() { return /* binding */ ZodNullable; },\n/* harmony export */   ZodNumber: function() { return /* binding */ ZodNumber; },\n/* harmony export */   ZodObject: function() { return /* binding */ ZodObject; },\n/* harmony export */   ZodOptional: function() { return /* binding */ ZodOptional; },\n/* harmony export */   ZodParsedType: function() { return /* binding */ ZodParsedType; },\n/* harmony export */   ZodPipeline: function() { return /* binding */ ZodPipeline; },\n/* harmony export */   ZodPromise: function() { return /* binding */ ZodPromise; },\n/* harmony export */   ZodReadonly: function() { return /* binding */ ZodReadonly; },\n/* harmony export */   ZodRecord: function() { return /* binding */ ZodRecord; },\n/* harmony export */   ZodSchema: function() { return /* binding */ ZodType; },\n/* harmony export */   ZodSet: function() { return /* binding */ ZodSet; },\n/* harmony export */   ZodString: function() { return /* binding */ ZodString; },\n/* harmony export */   ZodSymbol: function() { return /* binding */ ZodSymbol; },\n/* harmony export */   ZodTransformer: function() { return /* binding */ ZodEffects; },\n/* harmony export */   ZodTuple: function() { return /* binding */ ZodTuple; },\n/* harmony export */   ZodType: function() { return /* binding */ ZodType; },\n/* harmony export */   ZodUndefined: function() { return /* binding */ ZodUndefined; },\n/* harmony export */   ZodUnion: function() { return /* binding */ ZodUnion; },\n/* harmony export */   ZodUnknown: function() { return /* binding */ ZodUnknown; },\n/* harmony export */   ZodVoid: function() { return /* binding */ ZodVoid; },\n/* harmony export */   addIssueToContext: function() { return /* binding */ addIssueToContext; },\n/* harmony export */   any: function() { return /* binding */ anyType; },\n/* harmony export */   array: function() { return /* binding */ arrayType; },\n/* harmony export */   bigint: function() { return /* binding */ bigIntType; },\n/* harmony export */   boolean: function() { return /* binding */ booleanType; },\n/* harmony export */   coerce: function() { return /* binding */ coerce; },\n/* harmony export */   custom: function() { return /* binding */ custom; },\n/* harmony export */   date: function() { return /* binding */ dateType; },\n/* harmony export */   datetimeRegex: function() { return /* binding */ datetimeRegex; },\n/* harmony export */   \"default\": function() { return /* binding */ z; },\n/* harmony export */   defaultErrorMap: function() { return /* binding */ errorMap; },\n/* harmony export */   discriminatedUnion: function() { return /* binding */ discriminatedUnionType; },\n/* harmony export */   effect: function() { return /* binding */ effectsType; },\n/* harmony export */   \"enum\": function() { return /* binding */ enumType; },\n/* harmony export */   \"function\": function() { return /* binding */ functionType; },\n/* harmony export */   getErrorMap: function() { return /* binding */ getErrorMap; },\n/* harmony export */   getParsedType: function() { return /* binding */ getParsedType; },\n/* harmony export */   \"instanceof\": function() { return /* binding */ instanceOfType; },\n/* harmony export */   intersection: function() { return /* binding */ intersectionType; },\n/* harmony export */   isAborted: function() { return /* binding */ isAborted; },\n/* harmony export */   isAsync: function() { return /* binding */ isAsync; },\n/* harmony export */   isDirty: function() { return /* binding */ isDirty; },\n/* harmony export */   isValid: function() { return /* binding */ isValid; },\n/* harmony export */   late: function() { return /* binding */ late; },\n/* harmony export */   lazy: function() { return /* binding */ lazyType; },\n/* harmony export */   literal: function() { return /* binding */ literalType; },\n/* harmony export */   makeIssue: function() { return /* binding */ makeIssue; },\n/* harmony export */   map: function() { return /* binding */ mapType; },\n/* harmony export */   nan: function() { return /* binding */ nanType; },\n/* harmony export */   nativeEnum: function() { return /* binding */ nativeEnumType; },\n/* harmony export */   never: function() { return /* binding */ neverType; },\n/* harmony export */   \"null\": function() { return /* binding */ nullType; },\n/* harmony export */   nullable: function() { return /* binding */ nullableType; },\n/* harmony export */   number: function() { return /* binding */ numberType; },\n/* harmony export */   object: function() { return /* binding */ objectType; },\n/* harmony export */   objectUtil: function() { return /* binding */ objectUtil; },\n/* harmony export */   oboolean: function() { return /* binding */ oboolean; },\n/* harmony export */   onumber: function() { return /* binding */ onumber; },\n/* harmony export */   optional: function() { return /* binding */ optionalType; },\n/* harmony export */   ostring: function() { return /* binding */ ostring; },\n/* harmony export */   pipeline: function() { return /* binding */ pipelineType; },\n/* harmony export */   preprocess: function() { return /* binding */ preprocessType; },\n/* harmony export */   promise: function() { return /* binding */ promiseType; },\n/* harmony export */   quotelessJson: function() { return /* binding */ quotelessJson; },\n/* harmony export */   record: function() { return /* binding */ recordType; },\n/* harmony export */   set: function() { return /* binding */ setType; },\n/* harmony export */   setErrorMap: function() { return /* binding */ setErrorMap; },\n/* harmony export */   strictObject: function() { return /* binding */ strictObjectType; },\n/* harmony export */   string: function() { return /* binding */ stringType; },\n/* harmony export */   symbol: function() { return /* binding */ symbolType; },\n/* harmony export */   transformer: function() { return /* binding */ effectsType; },\n/* harmony export */   tuple: function() { return /* binding */ tupleType; },\n/* harmony export */   undefined: function() { return /* binding */ undefinedType; },\n/* harmony export */   union: function() { return /* binding */ unionType; },\n/* harmony export */   unknown: function() { return /* binding */ unknownType; },\n/* harmony export */   util: function() { return /* binding */ util; },\n/* harmony export */   \"void\": function() { return /* binding */ voidType; },\n/* harmony export */   z: function() { return /* binding */ z; }\n/* harmony export */ });\nvar util;\n(function(util) {\n    util.assertEqual = (val)=>val;\n    function assertIs(_arg) {}\n    util.assertIs = assertIs;\n    function assertNever(_x) {\n        throw new Error();\n    }\n    util.assertNever = assertNever;\n    util.arrayToEnum = (items)=>{\n        const obj = {};\n        for (const item of items){\n            obj[item] = item;\n        }\n        return obj;\n    };\n    util.getValidEnumValues = (obj)=>{\n        const validKeys = util.objectKeys(obj).filter((k)=>typeof obj[obj[k]] !== \"number\");\n        const filtered = {};\n        for (const k of validKeys){\n            filtered[k] = obj[k];\n        }\n        return util.objectValues(filtered);\n    };\n    util.objectValues = (obj)=>{\n        return util.objectKeys(obj).map(function(e) {\n            return obj[e];\n        });\n    };\n    util.objectKeys = typeof Object.keys === \"function\" // eslint-disable-line ban/ban\n     ? (obj)=>Object.keys(obj) // eslint-disable-line ban/ban\n     : (object)=>{\n        const keys = [];\n        for(const key in object){\n            if (Object.prototype.hasOwnProperty.call(object, key)) {\n                keys.push(key);\n            }\n        }\n        return keys;\n    };\n    util.find = (arr, checker)=>{\n        for (const item of arr){\n            if (checker(item)) return item;\n        }\n        return undefined;\n    };\n    util.isInteger = typeof Number.isInteger === \"function\" ? (val)=>Number.isInteger(val) // eslint-disable-line ban/ban\n     : (val)=>typeof val === \"number\" && isFinite(val) && Math.floor(val) === val;\n    function joinValues(array) {\n        let separator = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \" | \";\n        return array.map((val)=>typeof val === \"string\" ? \"'\".concat(val, \"'\") : val).join(separator);\n    }\n    util.joinValues = joinValues;\n    util.jsonStringifyReplacer = (_, value)=>{\n        if (typeof value === \"bigint\") {\n            return value.toString();\n        }\n        return value;\n    };\n})(util || (util = {}));\nvar objectUtil;\n(function(objectUtil) {\n    objectUtil.mergeShapes = (first, second)=>{\n        return {\n            ...first,\n            ...second\n        };\n    };\n})(objectUtil || (objectUtil = {}));\nconst ZodParsedType = util.arrayToEnum([\n    \"string\",\n    \"nan\",\n    \"number\",\n    \"integer\",\n    \"float\",\n    \"boolean\",\n    \"date\",\n    \"bigint\",\n    \"symbol\",\n    \"function\",\n    \"undefined\",\n    \"null\",\n    \"array\",\n    \"object\",\n    \"unknown\",\n    \"promise\",\n    \"void\",\n    \"never\",\n    \"map\",\n    \"set\"\n]);\nconst getParsedType = (data)=>{\n    const t = typeof data;\n    switch(t){\n        case \"undefined\":\n            return ZodParsedType.undefined;\n        case \"string\":\n            return ZodParsedType.string;\n        case \"number\":\n            return isNaN(data) ? ZodParsedType.nan : ZodParsedType.number;\n        case \"boolean\":\n            return ZodParsedType.boolean;\n        case \"function\":\n            return ZodParsedType.function;\n        case \"bigint\":\n            return ZodParsedType.bigint;\n        case \"symbol\":\n            return ZodParsedType.symbol;\n        case \"object\":\n            if (Array.isArray(data)) {\n                return ZodParsedType.array;\n            }\n            if (data === null) {\n                return ZodParsedType.null;\n            }\n            if (data.then && typeof data.then === \"function\" && data.catch && typeof data.catch === \"function\") {\n                return ZodParsedType.promise;\n            }\n            if (typeof Map !== \"undefined\" && data instanceof Map) {\n                return ZodParsedType.map;\n            }\n            if (typeof Set !== \"undefined\" && data instanceof Set) {\n                return ZodParsedType.set;\n            }\n            if (typeof Date !== \"undefined\" && data instanceof Date) {\n                return ZodParsedType.date;\n            }\n            return ZodParsedType.object;\n        default:\n            return ZodParsedType.unknown;\n    }\n};\nconst ZodIssueCode = util.arrayToEnum([\n    \"invalid_type\",\n    \"invalid_literal\",\n    \"custom\",\n    \"invalid_union\",\n    \"invalid_union_discriminator\",\n    \"invalid_enum_value\",\n    \"unrecognized_keys\",\n    \"invalid_arguments\",\n    \"invalid_return_type\",\n    \"invalid_date\",\n    \"invalid_string\",\n    \"too_small\",\n    \"too_big\",\n    \"invalid_intersection_types\",\n    \"not_multiple_of\",\n    \"not_finite\"\n]);\nconst quotelessJson = (obj)=>{\n    const json = JSON.stringify(obj, null, 2);\n    return json.replace(/\"([^\"]+)\":/g, \"$1:\");\n};\nclass ZodError extends Error {\n    get errors() {\n        return this.issues;\n    }\n    format(_mapper) {\n        const mapper = _mapper || function(issue) {\n            return issue.message;\n        };\n        const fieldErrors = {\n            _errors: []\n        };\n        const processError = (error)=>{\n            for (const issue of error.issues){\n                if (issue.code === \"invalid_union\") {\n                    issue.unionErrors.map(processError);\n                } else if (issue.code === \"invalid_return_type\") {\n                    processError(issue.returnTypeError);\n                } else if (issue.code === \"invalid_arguments\") {\n                    processError(issue.argumentsError);\n                } else if (issue.path.length === 0) {\n                    fieldErrors._errors.push(mapper(issue));\n                } else {\n                    let curr = fieldErrors;\n                    let i = 0;\n                    while(i < issue.path.length){\n                        const el = issue.path[i];\n                        const terminal = i === issue.path.length - 1;\n                        if (!terminal) {\n                            curr[el] = curr[el] || {\n                                _errors: []\n                            };\n                        // if (typeof el === \"string\") {\n                        //   curr[el] = curr[el] || { _errors: [] };\n                        // } else if (typeof el === \"number\") {\n                        //   const errorArray: any = [];\n                        //   errorArray._errors = [];\n                        //   curr[el] = curr[el] || errorArray;\n                        // }\n                        } else {\n                            curr[el] = curr[el] || {\n                                _errors: []\n                            };\n                            curr[el]._errors.push(mapper(issue));\n                        }\n                        curr = curr[el];\n                        i++;\n                    }\n                }\n            }\n        };\n        processError(this);\n        return fieldErrors;\n    }\n    static assert(value) {\n        if (!(value instanceof ZodError)) {\n            throw new Error(\"Not a ZodError: \".concat(value));\n        }\n    }\n    toString() {\n        return this.message;\n    }\n    get message() {\n        return JSON.stringify(this.issues, util.jsonStringifyReplacer, 2);\n    }\n    get isEmpty() {\n        return this.issues.length === 0;\n    }\n    flatten() {\n        let mapper = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : (issue)=>issue.message;\n        const fieldErrors = {};\n        const formErrors = [];\n        for (const sub of this.issues){\n            if (sub.path.length > 0) {\n                fieldErrors[sub.path[0]] = fieldErrors[sub.path[0]] || [];\n                fieldErrors[sub.path[0]].push(mapper(sub));\n            } else {\n                formErrors.push(mapper(sub));\n            }\n        }\n        return {\n            formErrors,\n            fieldErrors\n        };\n    }\n    get formErrors() {\n        return this.flatten();\n    }\n    constructor(issues){\n        var _this;\n        super(), _this = this;\n        this.issues = [];\n        this.addIssue = (sub)=>{\n            this.issues = [\n                ...this.issues,\n                sub\n            ];\n        };\n        this.addIssues = function() {\n            let subs = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];\n            _this.issues = [\n                ..._this.issues,\n                ...subs\n            ];\n        };\n        const actualProto = new.target.prototype;\n        if (Object.setPrototypeOf) {\n            // eslint-disable-next-line ban/ban\n            Object.setPrototypeOf(this, actualProto);\n        } else {\n            this.__proto__ = actualProto;\n        }\n        this.name = \"ZodError\";\n        this.issues = issues;\n    }\n}\nZodError.create = (issues)=>{\n    const error = new ZodError(issues);\n    return error;\n};\nconst errorMap = (issue, _ctx)=>{\n    let message;\n    switch(issue.code){\n        case ZodIssueCode.invalid_type:\n            if (issue.received === ZodParsedType.undefined) {\n                message = \"Required\";\n            } else {\n                message = \"Expected \".concat(issue.expected, \", received \").concat(issue.received);\n            }\n            break;\n        case ZodIssueCode.invalid_literal:\n            message = \"Invalid literal value, expected \".concat(JSON.stringify(issue.expected, util.jsonStringifyReplacer));\n            break;\n        case ZodIssueCode.unrecognized_keys:\n            message = \"Unrecognized key(s) in object: \".concat(util.joinValues(issue.keys, \", \"));\n            break;\n        case ZodIssueCode.invalid_union:\n            message = \"Invalid input\";\n            break;\n        case ZodIssueCode.invalid_union_discriminator:\n            message = \"Invalid discriminator value. Expected \".concat(util.joinValues(issue.options));\n            break;\n        case ZodIssueCode.invalid_enum_value:\n            message = \"Invalid enum value. Expected \".concat(util.joinValues(issue.options), \", received '\").concat(issue.received, \"'\");\n            break;\n        case ZodIssueCode.invalid_arguments:\n            message = \"Invalid function arguments\";\n            break;\n        case ZodIssueCode.invalid_return_type:\n            message = \"Invalid function return type\";\n            break;\n        case ZodIssueCode.invalid_date:\n            message = \"Invalid date\";\n            break;\n        case ZodIssueCode.invalid_string:\n            if (typeof issue.validation === \"object\") {\n                if (\"includes\" in issue.validation) {\n                    message = 'Invalid input: must include \"'.concat(issue.validation.includes, '\"');\n                    if (typeof issue.validation.position === \"number\") {\n                        message = \"\".concat(message, \" at one or more positions greater than or equal to \").concat(issue.validation.position);\n                    }\n                } else if (\"startsWith\" in issue.validation) {\n                    message = 'Invalid input: must start with \"'.concat(issue.validation.startsWith, '\"');\n                } else if (\"endsWith\" in issue.validation) {\n                    message = 'Invalid input: must end with \"'.concat(issue.validation.endsWith, '\"');\n                } else {\n                    util.assertNever(issue.validation);\n                }\n            } else if (issue.validation !== \"regex\") {\n                message = \"Invalid \".concat(issue.validation);\n            } else {\n                message = \"Invalid\";\n            }\n            break;\n        case ZodIssueCode.too_small:\n            if (issue.type === \"array\") message = \"Array must contain \".concat(issue.exact ? \"exactly\" : issue.inclusive ? \"at least\" : \"more than\", \" \").concat(issue.minimum, \" element(s)\");\n            else if (issue.type === \"string\") message = \"String must contain \".concat(issue.exact ? \"exactly\" : issue.inclusive ? \"at least\" : \"over\", \" \").concat(issue.minimum, \" character(s)\");\n            else if (issue.type === \"number\") message = \"Number must be \".concat(issue.exact ? \"exactly equal to \" : issue.inclusive ? \"greater than or equal to \" : \"greater than \").concat(issue.minimum);\n            else if (issue.type === \"date\") message = \"Date must be \".concat(issue.exact ? \"exactly equal to \" : issue.inclusive ? \"greater than or equal to \" : \"greater than \").concat(new Date(Number(issue.minimum)));\n            else message = \"Invalid input\";\n            break;\n        case ZodIssueCode.too_big:\n            if (issue.type === \"array\") message = \"Array must contain \".concat(issue.exact ? \"exactly\" : issue.inclusive ? \"at most\" : \"less than\", \" \").concat(issue.maximum, \" element(s)\");\n            else if (issue.type === \"string\") message = \"String must contain \".concat(issue.exact ? \"exactly\" : issue.inclusive ? \"at most\" : \"under\", \" \").concat(issue.maximum, \" character(s)\");\n            else if (issue.type === \"number\") message = \"Number must be \".concat(issue.exact ? \"exactly\" : issue.inclusive ? \"less than or equal to\" : \"less than\", \" \").concat(issue.maximum);\n            else if (issue.type === \"bigint\") message = \"BigInt must be \".concat(issue.exact ? \"exactly\" : issue.inclusive ? \"less than or equal to\" : \"less than\", \" \").concat(issue.maximum);\n            else if (issue.type === \"date\") message = \"Date must be \".concat(issue.exact ? \"exactly\" : issue.inclusive ? \"smaller than or equal to\" : \"smaller than\", \" \").concat(new Date(Number(issue.maximum)));\n            else message = \"Invalid input\";\n            break;\n        case ZodIssueCode.custom:\n            message = \"Invalid input\";\n            break;\n        case ZodIssueCode.invalid_intersection_types:\n            message = \"Intersection results could not be merged\";\n            break;\n        case ZodIssueCode.not_multiple_of:\n            message = \"Number must be a multiple of \".concat(issue.multipleOf);\n            break;\n        case ZodIssueCode.not_finite:\n            message = \"Number must be finite\";\n            break;\n        default:\n            message = _ctx.defaultError;\n            util.assertNever(issue);\n    }\n    return {\n        message\n    };\n};\nlet overrideErrorMap = errorMap;\nfunction setErrorMap(map) {\n    overrideErrorMap = map;\n}\nfunction getErrorMap() {\n    return overrideErrorMap;\n}\nconst makeIssue = (params)=>{\n    const { data, path, errorMaps, issueData } = params;\n    const fullPath = [\n        ...path,\n        ...issueData.path || []\n    ];\n    const fullIssue = {\n        ...issueData,\n        path: fullPath\n    };\n    if (issueData.message !== undefined) {\n        return {\n            ...issueData,\n            path: fullPath,\n            message: issueData.message\n        };\n    }\n    let errorMessage = \"\";\n    const maps = errorMaps.filter((m)=>!!m).slice().reverse();\n    for (const map of maps){\n        errorMessage = map(fullIssue, {\n            data,\n            defaultError: errorMessage\n        }).message;\n    }\n    return {\n        ...issueData,\n        path: fullPath,\n        message: errorMessage\n    };\n};\nconst EMPTY_PATH = [];\nfunction addIssueToContext(ctx, issueData) {\n    const overrideMap = getErrorMap();\n    const issue = makeIssue({\n        issueData: issueData,\n        data: ctx.data,\n        path: ctx.path,\n        errorMaps: [\n            ctx.common.contextualErrorMap,\n            ctx.schemaErrorMap,\n            overrideMap,\n            overrideMap === errorMap ? undefined : errorMap\n        ].filter((x)=>!!x)\n    });\n    ctx.common.issues.push(issue);\n}\nclass ParseStatus {\n    dirty() {\n        if (this.value === \"valid\") this.value = \"dirty\";\n    }\n    abort() {\n        if (this.value !== \"aborted\") this.value = \"aborted\";\n    }\n    static mergeArray(status, results) {\n        const arrayValue = [];\n        for (const s of results){\n            if (s.status === \"aborted\") return INVALID;\n            if (s.status === \"dirty\") status.dirty();\n            arrayValue.push(s.value);\n        }\n        return {\n            status: status.value,\n            value: arrayValue\n        };\n    }\n    static async mergeObjectAsync(status, pairs) {\n        const syncPairs = [];\n        for (const pair of pairs){\n            const key = await pair.key;\n            const value = await pair.value;\n            syncPairs.push({\n                key,\n                value\n            });\n        }\n        return ParseStatus.mergeObjectSync(status, syncPairs);\n    }\n    static mergeObjectSync(status, pairs) {\n        const finalObject = {};\n        for (const pair of pairs){\n            const { key, value } = pair;\n            if (key.status === \"aborted\") return INVALID;\n            if (value.status === \"aborted\") return INVALID;\n            if (key.status === \"dirty\") status.dirty();\n            if (value.status === \"dirty\") status.dirty();\n            if (key.value !== \"__proto__\" && (typeof value.value !== \"undefined\" || pair.alwaysSet)) {\n                finalObject[key.value] = value.value;\n            }\n        }\n        return {\n            status: status.value,\n            value: finalObject\n        };\n    }\n    constructor(){\n        this.value = \"valid\";\n    }\n}\nconst INVALID = Object.freeze({\n    status: \"aborted\"\n});\nconst DIRTY = (value)=>({\n        status: \"dirty\",\n        value\n    });\n_c = DIRTY;\nconst OK = (value)=>({\n        status: \"valid\",\n        value\n    });\n_c1 = OK;\nconst isAborted = (x)=>x.status === \"aborted\";\nconst isDirty = (x)=>x.status === \"dirty\";\nconst isValid = (x)=>x.status === \"valid\";\nconst isAsync = (x)=>typeof Promise !== \"undefined\" && x instanceof Promise;\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */ function __classPrivateFieldGet(receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n}\nfunction __classPrivateFieldSet(receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n}\ntypeof SuppressedError === \"function\" ? SuppressedError : function(error, suppressed, message) {\n    var e = new Error(message);\n    return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\n};\nvar errorUtil;\n(function(errorUtil) {\n    errorUtil.errToObj = (message)=>typeof message === \"string\" ? {\n            message\n        } : message || {};\n    errorUtil.toString = (message)=>typeof message === \"string\" ? message : message === null || message === void 0 ? void 0 : message.message;\n})(errorUtil || (errorUtil = {}));\nvar _ZodEnum_cache, _ZodNativeEnum_cache;\nclass ParseInputLazyPath {\n    get path() {\n        if (!this._cachedPath.length) {\n            if (this._key instanceof Array) {\n                this._cachedPath.push(...this._path, ...this._key);\n            } else {\n                this._cachedPath.push(...this._path, this._key);\n            }\n        }\n        return this._cachedPath;\n    }\n    constructor(parent, value, path, key){\n        this._cachedPath = [];\n        this.parent = parent;\n        this.data = value;\n        this._path = path;\n        this._key = key;\n    }\n}\nconst handleResult = (ctx, result)=>{\n    if (isValid(result)) {\n        return {\n            success: true,\n            data: result.value\n        };\n    } else {\n        if (!ctx.common.issues.length) {\n            throw new Error(\"Validation failed but no issues detected.\");\n        }\n        return {\n            success: false,\n            get error () {\n                if (this._error) return this._error;\n                const error = new ZodError(ctx.common.issues);\n                this._error = error;\n                return this._error;\n            }\n        };\n    }\n};\nfunction processCreateParams(params) {\n    if (!params) return {};\n    const { errorMap, invalid_type_error, required_error, description } = params;\n    if (errorMap && (invalid_type_error || required_error)) {\n        throw new Error('Can\\'t use \"invalid_type_error\" or \"required_error\" in conjunction with custom error map.');\n    }\n    if (errorMap) return {\n        errorMap: errorMap,\n        description\n    };\n    const customMap = (iss, ctx)=>{\n        var _a, _b;\n        const { message } = params;\n        if (iss.code === \"invalid_enum_value\") {\n            return {\n                message: message !== null && message !== void 0 ? message : ctx.defaultError\n            };\n        }\n        if (typeof ctx.data === \"undefined\") {\n            return {\n                message: (_a = message !== null && message !== void 0 ? message : required_error) !== null && _a !== void 0 ? _a : ctx.defaultError\n            };\n        }\n        if (iss.code !== \"invalid_type\") return {\n            message: ctx.defaultError\n        };\n        return {\n            message: (_b = message !== null && message !== void 0 ? message : invalid_type_error) !== null && _b !== void 0 ? _b : ctx.defaultError\n        };\n    };\n    return {\n        errorMap: customMap,\n        description\n    };\n}\nclass ZodType {\n    get description() {\n        return this._def.description;\n    }\n    _getType(input) {\n        return getParsedType(input.data);\n    }\n    _getOrReturnCtx(input, ctx) {\n        return ctx || {\n            common: input.parent.common,\n            data: input.data,\n            parsedType: getParsedType(input.data),\n            schemaErrorMap: this._def.errorMap,\n            path: input.path,\n            parent: input.parent\n        };\n    }\n    _processInputParams(input) {\n        return {\n            status: new ParseStatus(),\n            ctx: {\n                common: input.parent.common,\n                data: input.data,\n                parsedType: getParsedType(input.data),\n                schemaErrorMap: this._def.errorMap,\n                path: input.path,\n                parent: input.parent\n            }\n        };\n    }\n    _parseSync(input) {\n        const result = this._parse(input);\n        if (isAsync(result)) {\n            throw new Error(\"Synchronous parse encountered promise.\");\n        }\n        return result;\n    }\n    _parseAsync(input) {\n        const result = this._parse(input);\n        return Promise.resolve(result);\n    }\n    parse(data, params) {\n        const result = this.safeParse(data, params);\n        if (result.success) return result.data;\n        throw result.error;\n    }\n    safeParse(data, params) {\n        var _a;\n        const ctx = {\n            common: {\n                issues: [],\n                async: (_a = params === null || params === void 0 ? void 0 : params.async) !== null && _a !== void 0 ? _a : false,\n                contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap\n            },\n            path: (params === null || params === void 0 ? void 0 : params.path) || [],\n            schemaErrorMap: this._def.errorMap,\n            parent: null,\n            data,\n            parsedType: getParsedType(data)\n        };\n        const result = this._parseSync({\n            data,\n            path: ctx.path,\n            parent: ctx\n        });\n        return handleResult(ctx, result);\n    }\n    \"~validate\"(data) {\n        var _a, _b;\n        const ctx = {\n            common: {\n                issues: [],\n                async: !!this[\"~standard\"].async\n            },\n            path: [],\n            schemaErrorMap: this._def.errorMap,\n            parent: null,\n            data,\n            parsedType: getParsedType(data)\n        };\n        if (!this[\"~standard\"].async) {\n            try {\n                const result = this._parseSync({\n                    data,\n                    path: [],\n                    parent: ctx\n                });\n                return isValid(result) ? {\n                    value: result.value\n                } : {\n                    issues: ctx.common.issues\n                };\n            } catch (err) {\n                if ((_b = (_a = err === null || err === void 0 ? void 0 : err.message) === null || _a === void 0 ? void 0 : _a.toLowerCase()) === null || _b === void 0 ? void 0 : _b.includes(\"encountered\")) {\n                    this[\"~standard\"].async = true;\n                }\n                ctx.common = {\n                    issues: [],\n                    async: true\n                };\n            }\n        }\n        return this._parseAsync({\n            data,\n            path: [],\n            parent: ctx\n        }).then((result)=>isValid(result) ? {\n                value: result.value\n            } : {\n                issues: ctx.common.issues\n            });\n    }\n    async parseAsync(data, params) {\n        const result = await this.safeParseAsync(data, params);\n        if (result.success) return result.data;\n        throw result.error;\n    }\n    async safeParseAsync(data, params) {\n        const ctx = {\n            common: {\n                issues: [],\n                contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap,\n                async: true\n            },\n            path: (params === null || params === void 0 ? void 0 : params.path) || [],\n            schemaErrorMap: this._def.errorMap,\n            parent: null,\n            data,\n            parsedType: getParsedType(data)\n        };\n        const maybeAsyncResult = this._parse({\n            data,\n            path: ctx.path,\n            parent: ctx\n        });\n        const result = await (isAsync(maybeAsyncResult) ? maybeAsyncResult : Promise.resolve(maybeAsyncResult));\n        return handleResult(ctx, result);\n    }\n    refine(check, message) {\n        const getIssueProperties = (val)=>{\n            if (typeof message === \"string\" || typeof message === \"undefined\") {\n                return {\n                    message\n                };\n            } else if (typeof message === \"function\") {\n                return message(val);\n            } else {\n                return message;\n            }\n        };\n        return this._refinement((val, ctx)=>{\n            const result = check(val);\n            const setError = ()=>ctx.addIssue({\n                    code: ZodIssueCode.custom,\n                    ...getIssueProperties(val)\n                });\n            if (typeof Promise !== \"undefined\" && result instanceof Promise) {\n                return result.then((data)=>{\n                    if (!data) {\n                        setError();\n                        return false;\n                    } else {\n                        return true;\n                    }\n                });\n            }\n            if (!result) {\n                setError();\n                return false;\n            } else {\n                return true;\n            }\n        });\n    }\n    refinement(check, refinementData) {\n        return this._refinement((val, ctx)=>{\n            if (!check(val)) {\n                ctx.addIssue(typeof refinementData === \"function\" ? refinementData(val, ctx) : refinementData);\n                return false;\n            } else {\n                return true;\n            }\n        });\n    }\n    _refinement(refinement) {\n        return new ZodEffects({\n            schema: this,\n            typeName: ZodFirstPartyTypeKind.ZodEffects,\n            effect: {\n                type: \"refinement\",\n                refinement\n            }\n        });\n    }\n    superRefine(refinement) {\n        return this._refinement(refinement);\n    }\n    optional() {\n        return ZodOptional.create(this, this._def);\n    }\n    nullable() {\n        return ZodNullable.create(this, this._def);\n    }\n    nullish() {\n        return this.nullable().optional();\n    }\n    array() {\n        return ZodArray.create(this);\n    }\n    promise() {\n        return ZodPromise.create(this, this._def);\n    }\n    or(option) {\n        return ZodUnion.create([\n            this,\n            option\n        ], this._def);\n    }\n    and(incoming) {\n        return ZodIntersection.create(this, incoming, this._def);\n    }\n    transform(transform) {\n        return new ZodEffects({\n            ...processCreateParams(this._def),\n            schema: this,\n            typeName: ZodFirstPartyTypeKind.ZodEffects,\n            effect: {\n                type: \"transform\",\n                transform\n            }\n        });\n    }\n    default(def) {\n        const defaultValueFunc = typeof def === \"function\" ? def : ()=>def;\n        return new ZodDefault({\n            ...processCreateParams(this._def),\n            innerType: this,\n            defaultValue: defaultValueFunc,\n            typeName: ZodFirstPartyTypeKind.ZodDefault\n        });\n    }\n    brand() {\n        return new ZodBranded({\n            typeName: ZodFirstPartyTypeKind.ZodBranded,\n            type: this,\n            ...processCreateParams(this._def)\n        });\n    }\n    catch(def) {\n        const catchValueFunc = typeof def === \"function\" ? def : ()=>def;\n        return new ZodCatch({\n            ...processCreateParams(this._def),\n            innerType: this,\n            catchValue: catchValueFunc,\n            typeName: ZodFirstPartyTypeKind.ZodCatch\n        });\n    }\n    describe(description) {\n        const This = this.constructor;\n        return new This({\n            ...this._def,\n            description\n        });\n    }\n    pipe(target) {\n        return ZodPipeline.create(this, target);\n    }\n    readonly() {\n        return ZodReadonly.create(this);\n    }\n    isOptional() {\n        return this.safeParse(undefined).success;\n    }\n    isNullable() {\n        return this.safeParse(null).success;\n    }\n    constructor(def){\n        /** Alias of safeParseAsync */ this.spa = this.safeParseAsync;\n        this._def = def;\n        this.parse = this.parse.bind(this);\n        this.safeParse = this.safeParse.bind(this);\n        this.parseAsync = this.parseAsync.bind(this);\n        this.safeParseAsync = this.safeParseAsync.bind(this);\n        this.spa = this.spa.bind(this);\n        this.refine = this.refine.bind(this);\n        this.refinement = this.refinement.bind(this);\n        this.superRefine = this.superRefine.bind(this);\n        this.optional = this.optional.bind(this);\n        this.nullable = this.nullable.bind(this);\n        this.nullish = this.nullish.bind(this);\n        this.array = this.array.bind(this);\n        this.promise = this.promise.bind(this);\n        this.or = this.or.bind(this);\n        this.and = this.and.bind(this);\n        this.transform = this.transform.bind(this);\n        this.brand = this.brand.bind(this);\n        this.default = this.default.bind(this);\n        this.catch = this.catch.bind(this);\n        this.describe = this.describe.bind(this);\n        this.pipe = this.pipe.bind(this);\n        this.readonly = this.readonly.bind(this);\n        this.isNullable = this.isNullable.bind(this);\n        this.isOptional = this.isOptional.bind(this);\n        this[\"~standard\"] = {\n            version: 1,\n            vendor: \"zod\",\n            validate: (data)=>this[\"~validate\"](data)\n        };\n    }\n}\nconst cuidRegex = /^c[^\\s-]{8,}$/i;\nconst cuid2Regex = /^[0-9a-z]+$/;\nconst ulidRegex = /^[0-9A-HJKMNP-TV-Z]{26}$/i;\n// const uuidRegex =\n//   /^([a-f0-9]{8}-[a-f0-9]{4}-[1-5][a-f0-9]{3}-[a-f0-9]{4}-[a-f0-9]{12}|00000000-0000-0000-0000-000000000000)$/i;\nconst uuidRegex = /^[0-9a-fA-F]{8}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{12}$/i;\nconst nanoidRegex = /^[a-z0-9_-]{21}$/i;\nconst jwtRegex = /^[A-Za-z0-9-_]+\\.[A-Za-z0-9-_]+\\.[A-Za-z0-9-_]*$/;\nconst durationRegex = /^[-+]?P(?!$)(?:(?:[-+]?\\d+Y)|(?:[-+]?\\d+[.,]\\d+Y$))?(?:(?:[-+]?\\d+M)|(?:[-+]?\\d+[.,]\\d+M$))?(?:(?:[-+]?\\d+W)|(?:[-+]?\\d+[.,]\\d+W$))?(?:(?:[-+]?\\d+D)|(?:[-+]?\\d+[.,]\\d+D$))?(?:T(?=[\\d+-])(?:(?:[-+]?\\d+H)|(?:[-+]?\\d+[.,]\\d+H$))?(?:(?:[-+]?\\d+M)|(?:[-+]?\\d+[.,]\\d+M$))?(?:[-+]?\\d+(?:[.,]\\d+)?S)?)??$/;\n// from https://stackoverflow.com/a/46181/1550155\n// old version: too slow, didn't support unicode\n// const emailRegex = /^((([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*)|((\\x22)((((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(([\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|\\x21|[\\x23-\\x5b]|[\\x5d-\\x7e]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(\\\\([\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))))*(((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(\\x22)))@((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))$/i;\n//old email regex\n// const emailRegex = /^(([^<>()[\\].,;:\\s@\"]+(\\.[^<>()[\\].,;:\\s@\"]+)*)|(\".+\"))@((?!-)([^<>()[\\].,;:\\s@\"]+\\.)+[^<>()[\\].,;:\\s@\"]{1,})[^-<>()[\\].,;:\\s@\"]$/i;\n// eslint-disable-next-line\n// const emailRegex =\n//   /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\])|(\\[IPv6:(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))\\])|([A-Za-z0-9]([A-Za-z0-9-]*[A-Za-z0-9])*(\\.[A-Za-z]{2,})+))$/;\n// const emailRegex =\n//   /^[a-zA-Z0-9\\.\\!\\#\\$\\%\\&\\'\\*\\+\\/\\=\\?\\^\\_\\`\\{\\|\\}\\~\\-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;\n// const emailRegex =\n//   /^(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])$/i;\nconst emailRegex = /^(?!\\.)(?!.*\\.\\.)([A-Z0-9_'+\\-\\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\\-]*\\.)+[A-Z]{2,}$/i;\n// const emailRegex =\n//   /^[a-z0-9.!#$%&’*+/=?^_`{|}~-]+@[a-z0-9-]+(?:\\.[a-z0-9\\-]+)*$/i;\n// from https://thekevinscott.com/emojis-in-javascript/#writing-a-regular-expression\nconst _emojiRegex = \"^(\\\\p{Extended_Pictographic}|\\\\p{Emoji_Component})+$\";\nlet emojiRegex;\n// faster, simpler, safer\nconst ipv4Regex = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$/;\nconst ipv4CidrRegex = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\\/(3[0-2]|[12]?[0-9])$/;\n// const ipv6Regex =\n// /^(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))$/;\nconst ipv6Regex = /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))$/;\nconst ipv6CidrRegex = /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))\\/(12[0-8]|1[01][0-9]|[1-9]?[0-9])$/;\n// https://stackoverflow.com/questions/7860392/determine-if-string-is-in-base64-using-javascript\nconst base64Regex = /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/;\n// https://base64.guru/standards/base64url\nconst base64urlRegex = /^([0-9a-zA-Z-_]{4})*(([0-9a-zA-Z-_]{2}(==)?)|([0-9a-zA-Z-_]{3}(=)?))?$/;\n// simple\n// const dateRegexSource = `\\\\d{4}-\\\\d{2}-\\\\d{2}`;\n// no leap year validation\n// const dateRegexSource = `\\\\d{4}-((0[13578]|10|12)-31|(0[13-9]|1[0-2])-30|(0[1-9]|1[0-2])-(0[1-9]|1\\\\d|2\\\\d))`;\n// with leap year validation\nconst dateRegexSource = \"((\\\\d\\\\d[2468][048]|\\\\d\\\\d[13579][26]|\\\\d\\\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\\\d{4}-((0[13578]|1[02])-(0[1-9]|[12]\\\\d|3[01])|(0[469]|11)-(0[1-9]|[12]\\\\d|30)|(02)-(0[1-9]|1\\\\d|2[0-8])))\";\nconst dateRegex = new RegExp(\"^\".concat(dateRegexSource, \"$\"));\nfunction timeRegexSource(args) {\n    // let regex = `\\\\d{2}:\\\\d{2}:\\\\d{2}`;\n    let regex = \"([01]\\\\d|2[0-3]):[0-5]\\\\d:[0-5]\\\\d\";\n    if (args.precision) {\n        regex = \"\".concat(regex, \"\\\\.\\\\d{\").concat(args.precision, \"}\");\n    } else if (args.precision == null) {\n        regex = \"\".concat(regex, \"(\\\\.\\\\d+)?\");\n    }\n    return regex;\n}\nfunction timeRegex(args) {\n    return new RegExp(\"^\".concat(timeRegexSource(args), \"$\"));\n}\n// Adapted from https://stackoverflow.com/a/3143231\nfunction datetimeRegex(args) {\n    let regex = \"\".concat(dateRegexSource, \"T\").concat(timeRegexSource(args));\n    const opts = [];\n    opts.push(args.local ? \"Z?\" : \"Z\");\n    if (args.offset) opts.push(\"([+-]\\\\d{2}:?\\\\d{2})\");\n    regex = \"\".concat(regex, \"(\").concat(opts.join(\"|\"), \")\");\n    return new RegExp(\"^\".concat(regex, \"$\"));\n}\nfunction isValidIP(ip, version) {\n    if ((version === \"v4\" || !version) && ipv4Regex.test(ip)) {\n        return true;\n    }\n    if ((version === \"v6\" || !version) && ipv6Regex.test(ip)) {\n        return true;\n    }\n    return false;\n}\nfunction isValidJWT(jwt, alg) {\n    if (!jwtRegex.test(jwt)) return false;\n    try {\n        const [header] = jwt.split(\".\");\n        // Convert base64url to base64\n        const base64 = header.replace(/-/g, \"+\").replace(/_/g, \"/\").padEnd(header.length + (4 - header.length % 4) % 4, \"=\");\n        const decoded = JSON.parse(atob(base64));\n        if (typeof decoded !== \"object\" || decoded === null) return false;\n        if (!decoded.typ || !decoded.alg) return false;\n        if (alg && decoded.alg !== alg) return false;\n        return true;\n    } catch (_a) {\n        return false;\n    }\n}\nfunction isValidCidr(ip, version) {\n    if ((version === \"v4\" || !version) && ipv4CidrRegex.test(ip)) {\n        return true;\n    }\n    if ((version === \"v6\" || !version) && ipv6CidrRegex.test(ip)) {\n        return true;\n    }\n    return false;\n}\nclass ZodString extends ZodType {\n    _parse(input) {\n        if (this._def.coerce) {\n            input.data = String(input.data);\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.string) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.string,\n                received: ctx.parsedType\n            });\n            return INVALID;\n        }\n        const status = new ParseStatus();\n        let ctx = undefined;\n        for (const check of this._def.checks){\n            if (check.kind === \"min\") {\n                if (input.data.length < check.value) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_small,\n                        minimum: check.value,\n                        type: \"string\",\n                        inclusive: true,\n                        exact: false,\n                        message: check.message\n                    });\n                    status.dirty();\n                }\n            } else if (check.kind === \"max\") {\n                if (input.data.length > check.value) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_big,\n                        maximum: check.value,\n                        type: \"string\",\n                        inclusive: true,\n                        exact: false,\n                        message: check.message\n                    });\n                    status.dirty();\n                }\n            } else if (check.kind === \"length\") {\n                const tooBig = input.data.length > check.value;\n                const tooSmall = input.data.length < check.value;\n                if (tooBig || tooSmall) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    if (tooBig) {\n                        addIssueToContext(ctx, {\n                            code: ZodIssueCode.too_big,\n                            maximum: check.value,\n                            type: \"string\",\n                            inclusive: true,\n                            exact: true,\n                            message: check.message\n                        });\n                    } else if (tooSmall) {\n                        addIssueToContext(ctx, {\n                            code: ZodIssueCode.too_small,\n                            minimum: check.value,\n                            type: \"string\",\n                            inclusive: true,\n                            exact: true,\n                            message: check.message\n                        });\n                    }\n                    status.dirty();\n                }\n            } else if (check.kind === \"email\") {\n                if (!emailRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"email\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message\n                    });\n                    status.dirty();\n                }\n            } else if (check.kind === \"emoji\") {\n                if (!emojiRegex) {\n                    emojiRegex = new RegExp(_emojiRegex, \"u\");\n                }\n                if (!emojiRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"emoji\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message\n                    });\n                    status.dirty();\n                }\n            } else if (check.kind === \"uuid\") {\n                if (!uuidRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"uuid\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message\n                    });\n                    status.dirty();\n                }\n            } else if (check.kind === \"nanoid\") {\n                if (!nanoidRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"nanoid\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message\n                    });\n                    status.dirty();\n                }\n            } else if (check.kind === \"cuid\") {\n                if (!cuidRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"cuid\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message\n                    });\n                    status.dirty();\n                }\n            } else if (check.kind === \"cuid2\") {\n                if (!cuid2Regex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"cuid2\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message\n                    });\n                    status.dirty();\n                }\n            } else if (check.kind === \"ulid\") {\n                if (!ulidRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"ulid\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message\n                    });\n                    status.dirty();\n                }\n            } else if (check.kind === \"url\") {\n                try {\n                    new URL(input.data);\n                } catch (_a) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"url\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message\n                    });\n                    status.dirty();\n                }\n            } else if (check.kind === \"regex\") {\n                check.regex.lastIndex = 0;\n                const testResult = check.regex.test(input.data);\n                if (!testResult) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"regex\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message\n                    });\n                    status.dirty();\n                }\n            } else if (check.kind === \"trim\") {\n                input.data = input.data.trim();\n            } else if (check.kind === \"includes\") {\n                if (!input.data.includes(check.value, check.position)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: {\n                            includes: check.value,\n                            position: check.position\n                        },\n                        message: check.message\n                    });\n                    status.dirty();\n                }\n            } else if (check.kind === \"toLowerCase\") {\n                input.data = input.data.toLowerCase();\n            } else if (check.kind === \"toUpperCase\") {\n                input.data = input.data.toUpperCase();\n            } else if (check.kind === \"startsWith\") {\n                if (!input.data.startsWith(check.value)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: {\n                            startsWith: check.value\n                        },\n                        message: check.message\n                    });\n                    status.dirty();\n                }\n            } else if (check.kind === \"endsWith\") {\n                if (!input.data.endsWith(check.value)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: {\n                            endsWith: check.value\n                        },\n                        message: check.message\n                    });\n                    status.dirty();\n                }\n            } else if (check.kind === \"datetime\") {\n                const regex = datetimeRegex(check);\n                if (!regex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: \"datetime\",\n                        message: check.message\n                    });\n                    status.dirty();\n                }\n            } else if (check.kind === \"date\") {\n                const regex = dateRegex;\n                if (!regex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: \"date\",\n                        message: check.message\n                    });\n                    status.dirty();\n                }\n            } else if (check.kind === \"time\") {\n                const regex = timeRegex(check);\n                if (!regex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: \"time\",\n                        message: check.message\n                    });\n                    status.dirty();\n                }\n            } else if (check.kind === \"duration\") {\n                if (!durationRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"duration\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message\n                    });\n                    status.dirty();\n                }\n            } else if (check.kind === \"ip\") {\n                if (!isValidIP(input.data, check.version)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"ip\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message\n                    });\n                    status.dirty();\n                }\n            } else if (check.kind === \"jwt\") {\n                if (!isValidJWT(input.data, check.alg)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"jwt\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message\n                    });\n                    status.dirty();\n                }\n            } else if (check.kind === \"cidr\") {\n                if (!isValidCidr(input.data, check.version)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"cidr\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message\n                    });\n                    status.dirty();\n                }\n            } else if (check.kind === \"base64\") {\n                if (!base64Regex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"base64\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message\n                    });\n                    status.dirty();\n                }\n            } else if (check.kind === \"base64url\") {\n                if (!base64urlRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"base64url\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message\n                    });\n                    status.dirty();\n                }\n            } else {\n                util.assertNever(check);\n            }\n        }\n        return {\n            status: status.value,\n            value: input.data\n        };\n    }\n    _regex(regex, validation, message) {\n        return this.refinement((data)=>regex.test(data), {\n            validation,\n            code: ZodIssueCode.invalid_string,\n            ...errorUtil.errToObj(message)\n        });\n    }\n    _addCheck(check) {\n        return new ZodString({\n            ...this._def,\n            checks: [\n                ...this._def.checks,\n                check\n            ]\n        });\n    }\n    email(message) {\n        return this._addCheck({\n            kind: \"email\",\n            ...errorUtil.errToObj(message)\n        });\n    }\n    url(message) {\n        return this._addCheck({\n            kind: \"url\",\n            ...errorUtil.errToObj(message)\n        });\n    }\n    emoji(message) {\n        return this._addCheck({\n            kind: \"emoji\",\n            ...errorUtil.errToObj(message)\n        });\n    }\n    uuid(message) {\n        return this._addCheck({\n            kind: \"uuid\",\n            ...errorUtil.errToObj(message)\n        });\n    }\n    nanoid(message) {\n        return this._addCheck({\n            kind: \"nanoid\",\n            ...errorUtil.errToObj(message)\n        });\n    }\n    cuid(message) {\n        return this._addCheck({\n            kind: \"cuid\",\n            ...errorUtil.errToObj(message)\n        });\n    }\n    cuid2(message) {\n        return this._addCheck({\n            kind: \"cuid2\",\n            ...errorUtil.errToObj(message)\n        });\n    }\n    ulid(message) {\n        return this._addCheck({\n            kind: \"ulid\",\n            ...errorUtil.errToObj(message)\n        });\n    }\n    base64(message) {\n        return this._addCheck({\n            kind: \"base64\",\n            ...errorUtil.errToObj(message)\n        });\n    }\n    base64url(message) {\n        // base64url encoding is a modification of base64 that can safely be used in URLs and filenames\n        return this._addCheck({\n            kind: \"base64url\",\n            ...errorUtil.errToObj(message)\n        });\n    }\n    jwt(options) {\n        return this._addCheck({\n            kind: \"jwt\",\n            ...errorUtil.errToObj(options)\n        });\n    }\n    ip(options) {\n        return this._addCheck({\n            kind: \"ip\",\n            ...errorUtil.errToObj(options)\n        });\n    }\n    cidr(options) {\n        return this._addCheck({\n            kind: \"cidr\",\n            ...errorUtil.errToObj(options)\n        });\n    }\n    datetime(options) {\n        var _a, _b;\n        if (typeof options === \"string\") {\n            return this._addCheck({\n                kind: \"datetime\",\n                precision: null,\n                offset: false,\n                local: false,\n                message: options\n            });\n        }\n        return this._addCheck({\n            kind: \"datetime\",\n            precision: typeof (options === null || options === void 0 ? void 0 : options.precision) === \"undefined\" ? null : options === null || options === void 0 ? void 0 : options.precision,\n            offset: (_a = options === null || options === void 0 ? void 0 : options.offset) !== null && _a !== void 0 ? _a : false,\n            local: (_b = options === null || options === void 0 ? void 0 : options.local) !== null && _b !== void 0 ? _b : false,\n            ...errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message)\n        });\n    }\n    date(message) {\n        return this._addCheck({\n            kind: \"date\",\n            message\n        });\n    }\n    time(options) {\n        if (typeof options === \"string\") {\n            return this._addCheck({\n                kind: \"time\",\n                precision: null,\n                message: options\n            });\n        }\n        return this._addCheck({\n            kind: \"time\",\n            precision: typeof (options === null || options === void 0 ? void 0 : options.precision) === \"undefined\" ? null : options === null || options === void 0 ? void 0 : options.precision,\n            ...errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message)\n        });\n    }\n    duration(message) {\n        return this._addCheck({\n            kind: \"duration\",\n            ...errorUtil.errToObj(message)\n        });\n    }\n    regex(regex, message) {\n        return this._addCheck({\n            kind: \"regex\",\n            regex: regex,\n            ...errorUtil.errToObj(message)\n        });\n    }\n    includes(value, options) {\n        return this._addCheck({\n            kind: \"includes\",\n            value: value,\n            position: options === null || options === void 0 ? void 0 : options.position,\n            ...errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message)\n        });\n    }\n    startsWith(value, message) {\n        return this._addCheck({\n            kind: \"startsWith\",\n            value: value,\n            ...errorUtil.errToObj(message)\n        });\n    }\n    endsWith(value, message) {\n        return this._addCheck({\n            kind: \"endsWith\",\n            value: value,\n            ...errorUtil.errToObj(message)\n        });\n    }\n    min(minLength, message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: minLength,\n            ...errorUtil.errToObj(message)\n        });\n    }\n    max(maxLength, message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: maxLength,\n            ...errorUtil.errToObj(message)\n        });\n    }\n    length(len, message) {\n        return this._addCheck({\n            kind: \"length\",\n            value: len,\n            ...errorUtil.errToObj(message)\n        });\n    }\n    /**\n     * Equivalent to `.min(1)`\n     */ nonempty(message) {\n        return this.min(1, errorUtil.errToObj(message));\n    }\n    trim() {\n        return new ZodString({\n            ...this._def,\n            checks: [\n                ...this._def.checks,\n                {\n                    kind: \"trim\"\n                }\n            ]\n        });\n    }\n    toLowerCase() {\n        return new ZodString({\n            ...this._def,\n            checks: [\n                ...this._def.checks,\n                {\n                    kind: \"toLowerCase\"\n                }\n            ]\n        });\n    }\n    toUpperCase() {\n        return new ZodString({\n            ...this._def,\n            checks: [\n                ...this._def.checks,\n                {\n                    kind: \"toUpperCase\"\n                }\n            ]\n        });\n    }\n    get isDatetime() {\n        return !!this._def.checks.find((ch)=>ch.kind === \"datetime\");\n    }\n    get isDate() {\n        return !!this._def.checks.find((ch)=>ch.kind === \"date\");\n    }\n    get isTime() {\n        return !!this._def.checks.find((ch)=>ch.kind === \"time\");\n    }\n    get isDuration() {\n        return !!this._def.checks.find((ch)=>ch.kind === \"duration\");\n    }\n    get isEmail() {\n        return !!this._def.checks.find((ch)=>ch.kind === \"email\");\n    }\n    get isURL() {\n        return !!this._def.checks.find((ch)=>ch.kind === \"url\");\n    }\n    get isEmoji() {\n        return !!this._def.checks.find((ch)=>ch.kind === \"emoji\");\n    }\n    get isUUID() {\n        return !!this._def.checks.find((ch)=>ch.kind === \"uuid\");\n    }\n    get isNANOID() {\n        return !!this._def.checks.find((ch)=>ch.kind === \"nanoid\");\n    }\n    get isCUID() {\n        return !!this._def.checks.find((ch)=>ch.kind === \"cuid\");\n    }\n    get isCUID2() {\n        return !!this._def.checks.find((ch)=>ch.kind === \"cuid2\");\n    }\n    get isULID() {\n        return !!this._def.checks.find((ch)=>ch.kind === \"ulid\");\n    }\n    get isIP() {\n        return !!this._def.checks.find((ch)=>ch.kind === \"ip\");\n    }\n    get isCIDR() {\n        return !!this._def.checks.find((ch)=>ch.kind === \"cidr\");\n    }\n    get isBase64() {\n        return !!this._def.checks.find((ch)=>ch.kind === \"base64\");\n    }\n    get isBase64url() {\n        // base64url encoding is a modification of base64 that can safely be used in URLs and filenames\n        return !!this._def.checks.find((ch)=>ch.kind === \"base64url\");\n    }\n    get minLength() {\n        let min = null;\n        for (const ch of this._def.checks){\n            if (ch.kind === \"min\") {\n                if (min === null || ch.value > min) min = ch.value;\n            }\n        }\n        return min;\n    }\n    get maxLength() {\n        let max = null;\n        for (const ch of this._def.checks){\n            if (ch.kind === \"max\") {\n                if (max === null || ch.value < max) max = ch.value;\n            }\n        }\n        return max;\n    }\n}\nZodString.create = (params)=>{\n    var _a;\n    return new ZodString({\n        checks: [],\n        typeName: ZodFirstPartyTypeKind.ZodString,\n        coerce: (_a = params === null || params === void 0 ? void 0 : params.coerce) !== null && _a !== void 0 ? _a : false,\n        ...processCreateParams(params)\n    });\n};\n// https://stackoverflow.com/questions/3966484/why-does-modulus-operator-return-fractional-number-in-javascript/31711034#31711034\nfunction floatSafeRemainder(val, step) {\n    const valDecCount = (val.toString().split(\".\")[1] || \"\").length;\n    const stepDecCount = (step.toString().split(\".\")[1] || \"\").length;\n    const decCount = valDecCount > stepDecCount ? valDecCount : stepDecCount;\n    const valInt = parseInt(val.toFixed(decCount).replace(\".\", \"\"));\n    const stepInt = parseInt(step.toFixed(decCount).replace(\".\", \"\"));\n    return valInt % stepInt / Math.pow(10, decCount);\n}\nclass ZodNumber extends ZodType {\n    _parse(input) {\n        if (this._def.coerce) {\n            input.data = Number(input.data);\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.number) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.number,\n                received: ctx.parsedType\n            });\n            return INVALID;\n        }\n        let ctx = undefined;\n        const status = new ParseStatus();\n        for (const check of this._def.checks){\n            if (check.kind === \"int\") {\n                if (!util.isInteger(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_type,\n                        expected: \"integer\",\n                        received: \"float\",\n                        message: check.message\n                    });\n                    status.dirty();\n                }\n            } else if (check.kind === \"min\") {\n                const tooSmall = check.inclusive ? input.data < check.value : input.data <= check.value;\n                if (tooSmall) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_small,\n                        minimum: check.value,\n                        type: \"number\",\n                        inclusive: check.inclusive,\n                        exact: false,\n                        message: check.message\n                    });\n                    status.dirty();\n                }\n            } else if (check.kind === \"max\") {\n                const tooBig = check.inclusive ? input.data > check.value : input.data >= check.value;\n                if (tooBig) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_big,\n                        maximum: check.value,\n                        type: \"number\",\n                        inclusive: check.inclusive,\n                        exact: false,\n                        message: check.message\n                    });\n                    status.dirty();\n                }\n            } else if (check.kind === \"multipleOf\") {\n                if (floatSafeRemainder(input.data, check.value) !== 0) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.not_multiple_of,\n                        multipleOf: check.value,\n                        message: check.message\n                    });\n                    status.dirty();\n                }\n            } else if (check.kind === \"finite\") {\n                if (!Number.isFinite(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.not_finite,\n                        message: check.message\n                    });\n                    status.dirty();\n                }\n            } else {\n                util.assertNever(check);\n            }\n        }\n        return {\n            status: status.value,\n            value: input.data\n        };\n    }\n    gte(value, message) {\n        return this.setLimit(\"min\", value, true, errorUtil.toString(message));\n    }\n    gt(value, message) {\n        return this.setLimit(\"min\", value, false, errorUtil.toString(message));\n    }\n    lte(value, message) {\n        return this.setLimit(\"max\", value, true, errorUtil.toString(message));\n    }\n    lt(value, message) {\n        return this.setLimit(\"max\", value, false, errorUtil.toString(message));\n    }\n    setLimit(kind, value, inclusive, message) {\n        return new ZodNumber({\n            ...this._def,\n            checks: [\n                ...this._def.checks,\n                {\n                    kind,\n                    value,\n                    inclusive,\n                    message: errorUtil.toString(message)\n                }\n            ]\n        });\n    }\n    _addCheck(check) {\n        return new ZodNumber({\n            ...this._def,\n            checks: [\n                ...this._def.checks,\n                check\n            ]\n        });\n    }\n    int(message) {\n        return this._addCheck({\n            kind: \"int\",\n            message: errorUtil.toString(message)\n        });\n    }\n    positive(message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: 0,\n            inclusive: false,\n            message: errorUtil.toString(message)\n        });\n    }\n    negative(message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: 0,\n            inclusive: false,\n            message: errorUtil.toString(message)\n        });\n    }\n    nonpositive(message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: 0,\n            inclusive: true,\n            message: errorUtil.toString(message)\n        });\n    }\n    nonnegative(message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: 0,\n            inclusive: true,\n            message: errorUtil.toString(message)\n        });\n    }\n    multipleOf(value, message) {\n        return this._addCheck({\n            kind: \"multipleOf\",\n            value: value,\n            message: errorUtil.toString(message)\n        });\n    }\n    finite(message) {\n        return this._addCheck({\n            kind: \"finite\",\n            message: errorUtil.toString(message)\n        });\n    }\n    safe(message) {\n        return this._addCheck({\n            kind: \"min\",\n            inclusive: true,\n            value: Number.MIN_SAFE_INTEGER,\n            message: errorUtil.toString(message)\n        })._addCheck({\n            kind: \"max\",\n            inclusive: true,\n            value: Number.MAX_SAFE_INTEGER,\n            message: errorUtil.toString(message)\n        });\n    }\n    get minValue() {\n        let min = null;\n        for (const ch of this._def.checks){\n            if (ch.kind === \"min\") {\n                if (min === null || ch.value > min) min = ch.value;\n            }\n        }\n        return min;\n    }\n    get maxValue() {\n        let max = null;\n        for (const ch of this._def.checks){\n            if (ch.kind === \"max\") {\n                if (max === null || ch.value < max) max = ch.value;\n            }\n        }\n        return max;\n    }\n    get isInt() {\n        return !!this._def.checks.find((ch)=>ch.kind === \"int\" || ch.kind === \"multipleOf\" && util.isInteger(ch.value));\n    }\n    get isFinite() {\n        let max = null, min = null;\n        for (const ch of this._def.checks){\n            if (ch.kind === \"finite\" || ch.kind === \"int\" || ch.kind === \"multipleOf\") {\n                return true;\n            } else if (ch.kind === \"min\") {\n                if (min === null || ch.value > min) min = ch.value;\n            } else if (ch.kind === \"max\") {\n                if (max === null || ch.value < max) max = ch.value;\n            }\n        }\n        return Number.isFinite(min) && Number.isFinite(max);\n    }\n    constructor(){\n        super(...arguments);\n        this.min = this.gte;\n        this.max = this.lte;\n        this.step = this.multipleOf;\n    }\n}\nZodNumber.create = (params)=>{\n    return new ZodNumber({\n        checks: [],\n        typeName: ZodFirstPartyTypeKind.ZodNumber,\n        coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,\n        ...processCreateParams(params)\n    });\n};\nclass ZodBigInt extends ZodType {\n    _parse(input) {\n        if (this._def.coerce) {\n            try {\n                input.data = BigInt(input.data);\n            } catch (_a) {\n                return this._getInvalidInput(input);\n            }\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.bigint) {\n            return this._getInvalidInput(input);\n        }\n        let ctx = undefined;\n        const status = new ParseStatus();\n        for (const check of this._def.checks){\n            if (check.kind === \"min\") {\n                const tooSmall = check.inclusive ? input.data < check.value : input.data <= check.value;\n                if (tooSmall) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_small,\n                        type: \"bigint\",\n                        minimum: check.value,\n                        inclusive: check.inclusive,\n                        message: check.message\n                    });\n                    status.dirty();\n                }\n            } else if (check.kind === \"max\") {\n                const tooBig = check.inclusive ? input.data > check.value : input.data >= check.value;\n                if (tooBig) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_big,\n                        type: \"bigint\",\n                        maximum: check.value,\n                        inclusive: check.inclusive,\n                        message: check.message\n                    });\n                    status.dirty();\n                }\n            } else if (check.kind === \"multipleOf\") {\n                if (input.data % check.value !== BigInt(0)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.not_multiple_of,\n                        multipleOf: check.value,\n                        message: check.message\n                    });\n                    status.dirty();\n                }\n            } else {\n                util.assertNever(check);\n            }\n        }\n        return {\n            status: status.value,\n            value: input.data\n        };\n    }\n    _getInvalidInput(input) {\n        const ctx = this._getOrReturnCtx(input);\n        addIssueToContext(ctx, {\n            code: ZodIssueCode.invalid_type,\n            expected: ZodParsedType.bigint,\n            received: ctx.parsedType\n        });\n        return INVALID;\n    }\n    gte(value, message) {\n        return this.setLimit(\"min\", value, true, errorUtil.toString(message));\n    }\n    gt(value, message) {\n        return this.setLimit(\"min\", value, false, errorUtil.toString(message));\n    }\n    lte(value, message) {\n        return this.setLimit(\"max\", value, true, errorUtil.toString(message));\n    }\n    lt(value, message) {\n        return this.setLimit(\"max\", value, false, errorUtil.toString(message));\n    }\n    setLimit(kind, value, inclusive, message) {\n        return new ZodBigInt({\n            ...this._def,\n            checks: [\n                ...this._def.checks,\n                {\n                    kind,\n                    value,\n                    inclusive,\n                    message: errorUtil.toString(message)\n                }\n            ]\n        });\n    }\n    _addCheck(check) {\n        return new ZodBigInt({\n            ...this._def,\n            checks: [\n                ...this._def.checks,\n                check\n            ]\n        });\n    }\n    positive(message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: BigInt(0),\n            inclusive: false,\n            message: errorUtil.toString(message)\n        });\n    }\n    negative(message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: BigInt(0),\n            inclusive: false,\n            message: errorUtil.toString(message)\n        });\n    }\n    nonpositive(message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: BigInt(0),\n            inclusive: true,\n            message: errorUtil.toString(message)\n        });\n    }\n    nonnegative(message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: BigInt(0),\n            inclusive: true,\n            message: errorUtil.toString(message)\n        });\n    }\n    multipleOf(value, message) {\n        return this._addCheck({\n            kind: \"multipleOf\",\n            value,\n            message: errorUtil.toString(message)\n        });\n    }\n    get minValue() {\n        let min = null;\n        for (const ch of this._def.checks){\n            if (ch.kind === \"min\") {\n                if (min === null || ch.value > min) min = ch.value;\n            }\n        }\n        return min;\n    }\n    get maxValue() {\n        let max = null;\n        for (const ch of this._def.checks){\n            if (ch.kind === \"max\") {\n                if (max === null || ch.value < max) max = ch.value;\n            }\n        }\n        return max;\n    }\n    constructor(){\n        super(...arguments);\n        this.min = this.gte;\n        this.max = this.lte;\n    }\n}\nZodBigInt.create = (params)=>{\n    var _a;\n    return new ZodBigInt({\n        checks: [],\n        typeName: ZodFirstPartyTypeKind.ZodBigInt,\n        coerce: (_a = params === null || params === void 0 ? void 0 : params.coerce) !== null && _a !== void 0 ? _a : false,\n        ...processCreateParams(params)\n    });\n};\nclass ZodBoolean extends ZodType {\n    _parse(input) {\n        if (this._def.coerce) {\n            input.data = Boolean(input.data);\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.boolean) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.boolean,\n                received: ctx.parsedType\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n}\nZodBoolean.create = (params)=>{\n    return new ZodBoolean({\n        typeName: ZodFirstPartyTypeKind.ZodBoolean,\n        coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,\n        ...processCreateParams(params)\n    });\n};\nclass ZodDate extends ZodType {\n    _parse(input) {\n        if (this._def.coerce) {\n            input.data = new Date(input.data);\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.date) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.date,\n                received: ctx.parsedType\n            });\n            return INVALID;\n        }\n        if (isNaN(input.data.getTime())) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_date\n            });\n            return INVALID;\n        }\n        const status = new ParseStatus();\n        let ctx = undefined;\n        for (const check of this._def.checks){\n            if (check.kind === \"min\") {\n                if (input.data.getTime() < check.value) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_small,\n                        message: check.message,\n                        inclusive: true,\n                        exact: false,\n                        minimum: check.value,\n                        type: \"date\"\n                    });\n                    status.dirty();\n                }\n            } else if (check.kind === \"max\") {\n                if (input.data.getTime() > check.value) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_big,\n                        message: check.message,\n                        inclusive: true,\n                        exact: false,\n                        maximum: check.value,\n                        type: \"date\"\n                    });\n                    status.dirty();\n                }\n            } else {\n                util.assertNever(check);\n            }\n        }\n        return {\n            status: status.value,\n            value: new Date(input.data.getTime())\n        };\n    }\n    _addCheck(check) {\n        return new ZodDate({\n            ...this._def,\n            checks: [\n                ...this._def.checks,\n                check\n            ]\n        });\n    }\n    min(minDate, message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: minDate.getTime(),\n            message: errorUtil.toString(message)\n        });\n    }\n    max(maxDate, message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: maxDate.getTime(),\n            message: errorUtil.toString(message)\n        });\n    }\n    get minDate() {\n        let min = null;\n        for (const ch of this._def.checks){\n            if (ch.kind === \"min\") {\n                if (min === null || ch.value > min) min = ch.value;\n            }\n        }\n        return min != null ? new Date(min) : null;\n    }\n    get maxDate() {\n        let max = null;\n        for (const ch of this._def.checks){\n            if (ch.kind === \"max\") {\n                if (max === null || ch.value < max) max = ch.value;\n            }\n        }\n        return max != null ? new Date(max) : null;\n    }\n}\nZodDate.create = (params)=>{\n    return new ZodDate({\n        checks: [],\n        coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,\n        typeName: ZodFirstPartyTypeKind.ZodDate,\n        ...processCreateParams(params)\n    });\n};\nclass ZodSymbol extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.symbol) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.symbol,\n                received: ctx.parsedType\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n}\nZodSymbol.create = (params)=>{\n    return new ZodSymbol({\n        typeName: ZodFirstPartyTypeKind.ZodSymbol,\n        ...processCreateParams(params)\n    });\n};\nclass ZodUndefined extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.undefined) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.undefined,\n                received: ctx.parsedType\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n}\nZodUndefined.create = (params)=>{\n    return new ZodUndefined({\n        typeName: ZodFirstPartyTypeKind.ZodUndefined,\n        ...processCreateParams(params)\n    });\n};\nclass ZodNull extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.null) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.null,\n                received: ctx.parsedType\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n}\nZodNull.create = (params)=>{\n    return new ZodNull({\n        typeName: ZodFirstPartyTypeKind.ZodNull,\n        ...processCreateParams(params)\n    });\n};\nclass ZodAny extends ZodType {\n    _parse(input) {\n        return OK(input.data);\n    }\n    constructor(){\n        super(...arguments);\n        // to prevent instances of other classes from extending ZodAny. this causes issues with catchall in ZodObject.\n        this._any = true;\n    }\n}\nZodAny.create = (params)=>{\n    return new ZodAny({\n        typeName: ZodFirstPartyTypeKind.ZodAny,\n        ...processCreateParams(params)\n    });\n};\nclass ZodUnknown extends ZodType {\n    _parse(input) {\n        return OK(input.data);\n    }\n    constructor(){\n        super(...arguments);\n        // required\n        this._unknown = true;\n    }\n}\nZodUnknown.create = (params)=>{\n    return new ZodUnknown({\n        typeName: ZodFirstPartyTypeKind.ZodUnknown,\n        ...processCreateParams(params)\n    });\n};\nclass ZodNever extends ZodType {\n    _parse(input) {\n        const ctx = this._getOrReturnCtx(input);\n        addIssueToContext(ctx, {\n            code: ZodIssueCode.invalid_type,\n            expected: ZodParsedType.never,\n            received: ctx.parsedType\n        });\n        return INVALID;\n    }\n}\nZodNever.create = (params)=>{\n    return new ZodNever({\n        typeName: ZodFirstPartyTypeKind.ZodNever,\n        ...processCreateParams(params)\n    });\n};\nclass ZodVoid extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.undefined) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.void,\n                received: ctx.parsedType\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n}\nZodVoid.create = (params)=>{\n    return new ZodVoid({\n        typeName: ZodFirstPartyTypeKind.ZodVoid,\n        ...processCreateParams(params)\n    });\n};\nclass ZodArray extends ZodType {\n    _parse(input) {\n        const { ctx, status } = this._processInputParams(input);\n        const def = this._def;\n        if (ctx.parsedType !== ZodParsedType.array) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.array,\n                received: ctx.parsedType\n            });\n            return INVALID;\n        }\n        if (def.exactLength !== null) {\n            const tooBig = ctx.data.length > def.exactLength.value;\n            const tooSmall = ctx.data.length < def.exactLength.value;\n            if (tooBig || tooSmall) {\n                addIssueToContext(ctx, {\n                    code: tooBig ? ZodIssueCode.too_big : ZodIssueCode.too_small,\n                    minimum: tooSmall ? def.exactLength.value : undefined,\n                    maximum: tooBig ? def.exactLength.value : undefined,\n                    type: \"array\",\n                    inclusive: true,\n                    exact: true,\n                    message: def.exactLength.message\n                });\n                status.dirty();\n            }\n        }\n        if (def.minLength !== null) {\n            if (ctx.data.length < def.minLength.value) {\n                addIssueToContext(ctx, {\n                    code: ZodIssueCode.too_small,\n                    minimum: def.minLength.value,\n                    type: \"array\",\n                    inclusive: true,\n                    exact: false,\n                    message: def.minLength.message\n                });\n                status.dirty();\n            }\n        }\n        if (def.maxLength !== null) {\n            if (ctx.data.length > def.maxLength.value) {\n                addIssueToContext(ctx, {\n                    code: ZodIssueCode.too_big,\n                    maximum: def.maxLength.value,\n                    type: \"array\",\n                    inclusive: true,\n                    exact: false,\n                    message: def.maxLength.message\n                });\n                status.dirty();\n            }\n        }\n        if (ctx.common.async) {\n            return Promise.all([\n                ...ctx.data\n            ].map((item, i)=>{\n                return def.type._parseAsync(new ParseInputLazyPath(ctx, item, ctx.path, i));\n            })).then((result)=>{\n                return ParseStatus.mergeArray(status, result);\n            });\n        }\n        const result = [\n            ...ctx.data\n        ].map((item, i)=>{\n            return def.type._parseSync(new ParseInputLazyPath(ctx, item, ctx.path, i));\n        });\n        return ParseStatus.mergeArray(status, result);\n    }\n    get element() {\n        return this._def.type;\n    }\n    min(minLength, message) {\n        return new ZodArray({\n            ...this._def,\n            minLength: {\n                value: minLength,\n                message: errorUtil.toString(message)\n            }\n        });\n    }\n    max(maxLength, message) {\n        return new ZodArray({\n            ...this._def,\n            maxLength: {\n                value: maxLength,\n                message: errorUtil.toString(message)\n            }\n        });\n    }\n    length(len, message) {\n        return new ZodArray({\n            ...this._def,\n            exactLength: {\n                value: len,\n                message: errorUtil.toString(message)\n            }\n        });\n    }\n    nonempty(message) {\n        return this.min(1, message);\n    }\n}\nZodArray.create = (schema, params)=>{\n    return new ZodArray({\n        type: schema,\n        minLength: null,\n        maxLength: null,\n        exactLength: null,\n        typeName: ZodFirstPartyTypeKind.ZodArray,\n        ...processCreateParams(params)\n    });\n};\nfunction deepPartialify(schema) {\n    if (schema instanceof ZodObject) {\n        const newShape = {};\n        for(const key in schema.shape){\n            const fieldSchema = schema.shape[key];\n            newShape[key] = ZodOptional.create(deepPartialify(fieldSchema));\n        }\n        return new ZodObject({\n            ...schema._def,\n            shape: ()=>newShape\n        });\n    } else if (schema instanceof ZodArray) {\n        return new ZodArray({\n            ...schema._def,\n            type: deepPartialify(schema.element)\n        });\n    } else if (schema instanceof ZodOptional) {\n        return ZodOptional.create(deepPartialify(schema.unwrap()));\n    } else if (schema instanceof ZodNullable) {\n        return ZodNullable.create(deepPartialify(schema.unwrap()));\n    } else if (schema instanceof ZodTuple) {\n        return ZodTuple.create(schema.items.map((item)=>deepPartialify(item)));\n    } else {\n        return schema;\n    }\n}\nclass ZodObject extends ZodType {\n    _getCached() {\n        if (this._cached !== null) return this._cached;\n        const shape = this._def.shape();\n        const keys = util.objectKeys(shape);\n        return this._cached = {\n            shape,\n            keys\n        };\n    }\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.object) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.object,\n                received: ctx.parsedType\n            });\n            return INVALID;\n        }\n        const { status, ctx } = this._processInputParams(input);\n        const { shape, keys: shapeKeys } = this._getCached();\n        const extraKeys = [];\n        if (!(this._def.catchall instanceof ZodNever && this._def.unknownKeys === \"strip\")) {\n            for(const key in ctx.data){\n                if (!shapeKeys.includes(key)) {\n                    extraKeys.push(key);\n                }\n            }\n        }\n        const pairs = [];\n        for (const key of shapeKeys){\n            const keyValidator = shape[key];\n            const value = ctx.data[key];\n            pairs.push({\n                key: {\n                    status: \"valid\",\n                    value: key\n                },\n                value: keyValidator._parse(new ParseInputLazyPath(ctx, value, ctx.path, key)),\n                alwaysSet: key in ctx.data\n            });\n        }\n        if (this._def.catchall instanceof ZodNever) {\n            const unknownKeys = this._def.unknownKeys;\n            if (unknownKeys === \"passthrough\") {\n                for (const key of extraKeys){\n                    pairs.push({\n                        key: {\n                            status: \"valid\",\n                            value: key\n                        },\n                        value: {\n                            status: \"valid\",\n                            value: ctx.data[key]\n                        }\n                    });\n                }\n            } else if (unknownKeys === \"strict\") {\n                if (extraKeys.length > 0) {\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.unrecognized_keys,\n                        keys: extraKeys\n                    });\n                    status.dirty();\n                }\n            } else if (unknownKeys === \"strip\") ;\n            else {\n                throw new Error(\"Internal ZodObject error: invalid unknownKeys value.\");\n            }\n        } else {\n            // run catchall validation\n            const catchall = this._def.catchall;\n            for (const key of extraKeys){\n                const value = ctx.data[key];\n                pairs.push({\n                    key: {\n                        status: \"valid\",\n                        value: key\n                    },\n                    value: catchall._parse(new ParseInputLazyPath(ctx, value, ctx.path, key) //, ctx.child(key), value, getParsedType(value)\n                    ),\n                    alwaysSet: key in ctx.data\n                });\n            }\n        }\n        if (ctx.common.async) {\n            return Promise.resolve().then(async ()=>{\n                const syncPairs = [];\n                for (const pair of pairs){\n                    const key = await pair.key;\n                    const value = await pair.value;\n                    syncPairs.push({\n                        key,\n                        value,\n                        alwaysSet: pair.alwaysSet\n                    });\n                }\n                return syncPairs;\n            }).then((syncPairs)=>{\n                return ParseStatus.mergeObjectSync(status, syncPairs);\n            });\n        } else {\n            return ParseStatus.mergeObjectSync(status, pairs);\n        }\n    }\n    get shape() {\n        return this._def.shape();\n    }\n    strict(message) {\n        errorUtil.errToObj;\n        return new ZodObject({\n            ...this._def,\n            unknownKeys: \"strict\",\n            ...message !== undefined ? {\n                errorMap: (issue, ctx)=>{\n                    var _a, _b, _c, _d;\n                    const defaultError = (_c = (_b = (_a = this._def).errorMap) === null || _b === void 0 ? void 0 : _b.call(_a, issue, ctx).message) !== null && _c !== void 0 ? _c : ctx.defaultError;\n                    if (issue.code === \"unrecognized_keys\") return {\n                        message: (_d = errorUtil.errToObj(message).message) !== null && _d !== void 0 ? _d : defaultError\n                    };\n                    return {\n                        message: defaultError\n                    };\n                }\n            } : {}\n        });\n    }\n    strip() {\n        return new ZodObject({\n            ...this._def,\n            unknownKeys: \"strip\"\n        });\n    }\n    passthrough() {\n        return new ZodObject({\n            ...this._def,\n            unknownKeys: \"passthrough\"\n        });\n    }\n    // const AugmentFactory =\n    //   <Def extends ZodObjectDef>(def: Def) =>\n    //   <Augmentation extends ZodRawShape>(\n    //     augmentation: Augmentation\n    //   ): ZodObject<\n    //     extendShape<ReturnType<Def[\"shape\"]>, Augmentation>,\n    //     Def[\"unknownKeys\"],\n    //     Def[\"catchall\"]\n    //   > => {\n    //     return new ZodObject({\n    //       ...def,\n    //       shape: () => ({\n    //         ...def.shape(),\n    //         ...augmentation,\n    //       }),\n    //     }) as any;\n    //   };\n    extend(augmentation) {\n        return new ZodObject({\n            ...this._def,\n            shape: ()=>({\n                    ...this._def.shape(),\n                    ...augmentation\n                })\n        });\n    }\n    /**\n     * Prior to zod@1.0.12 there was a bug in the\n     * inferred type of merged objects. Please\n     * upgrade if you are experiencing issues.\n     */ merge(merging) {\n        const merged = new ZodObject({\n            unknownKeys: merging._def.unknownKeys,\n            catchall: merging._def.catchall,\n            shape: ()=>({\n                    ...this._def.shape(),\n                    ...merging._def.shape()\n                }),\n            typeName: ZodFirstPartyTypeKind.ZodObject\n        });\n        return merged;\n    }\n    // merge<\n    //   Incoming extends AnyZodObject,\n    //   Augmentation extends Incoming[\"shape\"],\n    //   NewOutput extends {\n    //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation\n    //       ? Augmentation[k][\"_output\"]\n    //       : k extends keyof Output\n    //       ? Output[k]\n    //       : never;\n    //   },\n    //   NewInput extends {\n    //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation\n    //       ? Augmentation[k][\"_input\"]\n    //       : k extends keyof Input\n    //       ? Input[k]\n    //       : never;\n    //   }\n    // >(\n    //   merging: Incoming\n    // ): ZodObject<\n    //   extendShape<T, ReturnType<Incoming[\"_def\"][\"shape\"]>>,\n    //   Incoming[\"_def\"][\"unknownKeys\"],\n    //   Incoming[\"_def\"][\"catchall\"],\n    //   NewOutput,\n    //   NewInput\n    // > {\n    //   const merged: any = new ZodObject({\n    //     unknownKeys: merging._def.unknownKeys,\n    //     catchall: merging._def.catchall,\n    //     shape: () =>\n    //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),\n    //     typeName: ZodFirstPartyTypeKind.ZodObject,\n    //   }) as any;\n    //   return merged;\n    // }\n    setKey(key, schema) {\n        return this.augment({\n            [key]: schema\n        });\n    }\n    // merge<Incoming extends AnyZodObject>(\n    //   merging: Incoming\n    // ): //ZodObject<T & Incoming[\"_shape\"], UnknownKeys, Catchall> = (merging) => {\n    // ZodObject<\n    //   extendShape<T, ReturnType<Incoming[\"_def\"][\"shape\"]>>,\n    //   Incoming[\"_def\"][\"unknownKeys\"],\n    //   Incoming[\"_def\"][\"catchall\"]\n    // > {\n    //   // const mergedShape = objectUtil.mergeShapes(\n    //   //   this._def.shape(),\n    //   //   merging._def.shape()\n    //   // );\n    //   const merged: any = new ZodObject({\n    //     unknownKeys: merging._def.unknownKeys,\n    //     catchall: merging._def.catchall,\n    //     shape: () =>\n    //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),\n    //     typeName: ZodFirstPartyTypeKind.ZodObject,\n    //   }) as any;\n    //   return merged;\n    // }\n    catchall(index) {\n        return new ZodObject({\n            ...this._def,\n            catchall: index\n        });\n    }\n    pick(mask) {\n        const shape = {};\n        util.objectKeys(mask).forEach((key)=>{\n            if (mask[key] && this.shape[key]) {\n                shape[key] = this.shape[key];\n            }\n        });\n        return new ZodObject({\n            ...this._def,\n            shape: ()=>shape\n        });\n    }\n    omit(mask) {\n        const shape = {};\n        util.objectKeys(this.shape).forEach((key)=>{\n            if (!mask[key]) {\n                shape[key] = this.shape[key];\n            }\n        });\n        return new ZodObject({\n            ...this._def,\n            shape: ()=>shape\n        });\n    }\n    /**\n     * @deprecated\n     */ deepPartial() {\n        return deepPartialify(this);\n    }\n    partial(mask) {\n        const newShape = {};\n        util.objectKeys(this.shape).forEach((key)=>{\n            const fieldSchema = this.shape[key];\n            if (mask && !mask[key]) {\n                newShape[key] = fieldSchema;\n            } else {\n                newShape[key] = fieldSchema.optional();\n            }\n        });\n        return new ZodObject({\n            ...this._def,\n            shape: ()=>newShape\n        });\n    }\n    required(mask) {\n        const newShape = {};\n        util.objectKeys(this.shape).forEach((key)=>{\n            if (mask && !mask[key]) {\n                newShape[key] = this.shape[key];\n            } else {\n                const fieldSchema = this.shape[key];\n                let newField = fieldSchema;\n                while(newField instanceof ZodOptional){\n                    newField = newField._def.innerType;\n                }\n                newShape[key] = newField;\n            }\n        });\n        return new ZodObject({\n            ...this._def,\n            shape: ()=>newShape\n        });\n    }\n    keyof() {\n        return createZodEnum(util.objectKeys(this.shape));\n    }\n    constructor(){\n        super(...arguments);\n        this._cached = null;\n        /**\n         * @deprecated In most cases, this is no longer needed - unknown properties are now silently stripped.\n         * If you want to pass through unknown properties, use `.passthrough()` instead.\n         */ this.nonstrict = this.passthrough;\n        // extend<\n        //   Augmentation extends ZodRawShape,\n        //   NewOutput extends util.flatten<{\n        //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation\n        //       ? Augmentation[k][\"_output\"]\n        //       : k extends keyof Output\n        //       ? Output[k]\n        //       : never;\n        //   }>,\n        //   NewInput extends util.flatten<{\n        //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation\n        //       ? Augmentation[k][\"_input\"]\n        //       : k extends keyof Input\n        //       ? Input[k]\n        //       : never;\n        //   }>\n        // >(\n        //   augmentation: Augmentation\n        // ): ZodObject<\n        //   extendShape<T, Augmentation>,\n        //   UnknownKeys,\n        //   Catchall,\n        //   NewOutput,\n        //   NewInput\n        // > {\n        //   return new ZodObject({\n        //     ...this._def,\n        //     shape: () => ({\n        //       ...this._def.shape(),\n        //       ...augmentation,\n        //     }),\n        //   }) as any;\n        // }\n        /**\n         * @deprecated Use `.extend` instead\n         *  */ this.augment = this.extend;\n    }\n}\nZodObject.create = (shape, params)=>{\n    return new ZodObject({\n        shape: ()=>shape,\n        unknownKeys: \"strip\",\n        catchall: ZodNever.create(),\n        typeName: ZodFirstPartyTypeKind.ZodObject,\n        ...processCreateParams(params)\n    });\n};\nZodObject.strictCreate = (shape, params)=>{\n    return new ZodObject({\n        shape: ()=>shape,\n        unknownKeys: \"strict\",\n        catchall: ZodNever.create(),\n        typeName: ZodFirstPartyTypeKind.ZodObject,\n        ...processCreateParams(params)\n    });\n};\nZodObject.lazycreate = (shape, params)=>{\n    return new ZodObject({\n        shape,\n        unknownKeys: \"strip\",\n        catchall: ZodNever.create(),\n        typeName: ZodFirstPartyTypeKind.ZodObject,\n        ...processCreateParams(params)\n    });\n};\nclass ZodUnion extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        const options = this._def.options;\n        function handleResults(results) {\n            // return first issue-free validation if it exists\n            for (const result of results){\n                if (result.result.status === \"valid\") {\n                    return result.result;\n                }\n            }\n            for (const result of results){\n                if (result.result.status === \"dirty\") {\n                    // add issues from dirty option\n                    ctx.common.issues.push(...result.ctx.common.issues);\n                    return result.result;\n                }\n            }\n            // return invalid\n            const unionErrors = results.map((result)=>new ZodError(result.ctx.common.issues));\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_union,\n                unionErrors\n            });\n            return INVALID;\n        }\n        if (ctx.common.async) {\n            return Promise.all(options.map(async (option)=>{\n                const childCtx = {\n                    ...ctx,\n                    common: {\n                        ...ctx.common,\n                        issues: []\n                    },\n                    parent: null\n                };\n                return {\n                    result: await option._parseAsync({\n                        data: ctx.data,\n                        path: ctx.path,\n                        parent: childCtx\n                    }),\n                    ctx: childCtx\n                };\n            })).then(handleResults);\n        } else {\n            let dirty = undefined;\n            const issues = [];\n            for (const option of options){\n                const childCtx = {\n                    ...ctx,\n                    common: {\n                        ...ctx.common,\n                        issues: []\n                    },\n                    parent: null\n                };\n                const result = option._parseSync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: childCtx\n                });\n                if (result.status === \"valid\") {\n                    return result;\n                } else if (result.status === \"dirty\" && !dirty) {\n                    dirty = {\n                        result,\n                        ctx: childCtx\n                    };\n                }\n                if (childCtx.common.issues.length) {\n                    issues.push(childCtx.common.issues);\n                }\n            }\n            if (dirty) {\n                ctx.common.issues.push(...dirty.ctx.common.issues);\n                return dirty.result;\n            }\n            const unionErrors = issues.map((issues)=>new ZodError(issues));\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_union,\n                unionErrors\n            });\n            return INVALID;\n        }\n    }\n    get options() {\n        return this._def.options;\n    }\n}\nZodUnion.create = (types, params)=>{\n    return new ZodUnion({\n        options: types,\n        typeName: ZodFirstPartyTypeKind.ZodUnion,\n        ...processCreateParams(params)\n    });\n};\n/////////////////////////////////////////////////////\n/////////////////////////////////////////////////////\n//////////                                 //////////\n//////////      ZodDiscriminatedUnion      //////////\n//////////                                 //////////\n/////////////////////////////////////////////////////\n/////////////////////////////////////////////////////\nconst getDiscriminator = (type)=>{\n    if (type instanceof ZodLazy) {\n        return getDiscriminator(type.schema);\n    } else if (type instanceof ZodEffects) {\n        return getDiscriminator(type.innerType());\n    } else if (type instanceof ZodLiteral) {\n        return [\n            type.value\n        ];\n    } else if (type instanceof ZodEnum) {\n        return type.options;\n    } else if (type instanceof ZodNativeEnum) {\n        // eslint-disable-next-line ban/ban\n        return util.objectValues(type.enum);\n    } else if (type instanceof ZodDefault) {\n        return getDiscriminator(type._def.innerType);\n    } else if (type instanceof ZodUndefined) {\n        return [\n            undefined\n        ];\n    } else if (type instanceof ZodNull) {\n        return [\n            null\n        ];\n    } else if (type instanceof ZodOptional) {\n        return [\n            undefined,\n            ...getDiscriminator(type.unwrap())\n        ];\n    } else if (type instanceof ZodNullable) {\n        return [\n            null,\n            ...getDiscriminator(type.unwrap())\n        ];\n    } else if (type instanceof ZodBranded) {\n        return getDiscriminator(type.unwrap());\n    } else if (type instanceof ZodReadonly) {\n        return getDiscriminator(type.unwrap());\n    } else if (type instanceof ZodCatch) {\n        return getDiscriminator(type._def.innerType);\n    } else {\n        return [];\n    }\n};\nclass ZodDiscriminatedUnion extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.object) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.object,\n                received: ctx.parsedType\n            });\n            return INVALID;\n        }\n        const discriminator = this.discriminator;\n        const discriminatorValue = ctx.data[discriminator];\n        const option = this.optionsMap.get(discriminatorValue);\n        if (!option) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_union_discriminator,\n                options: Array.from(this.optionsMap.keys()),\n                path: [\n                    discriminator\n                ]\n            });\n            return INVALID;\n        }\n        if (ctx.common.async) {\n            return option._parseAsync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx\n            });\n        } else {\n            return option._parseSync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx\n            });\n        }\n    }\n    get discriminator() {\n        return this._def.discriminator;\n    }\n    get options() {\n        return this._def.options;\n    }\n    get optionsMap() {\n        return this._def.optionsMap;\n    }\n    /**\n     * The constructor of the discriminated union schema. Its behaviour is very similar to that of the normal z.union() constructor.\n     * However, it only allows a union of objects, all of which need to share a discriminator property. This property must\n     * have a different value for each object in the union.\n     * @param discriminator the name of the discriminator property\n     * @param types an array of object schemas\n     * @param params\n     */ static create(discriminator, options, params) {\n        // Get all the valid discriminator values\n        const optionsMap = new Map();\n        // try {\n        for (const type of options){\n            const discriminatorValues = getDiscriminator(type.shape[discriminator]);\n            if (!discriminatorValues.length) {\n                throw new Error(\"A discriminator value for key `\".concat(discriminator, \"` could not be extracted from all schema options\"));\n            }\n            for (const value of discriminatorValues){\n                if (optionsMap.has(value)) {\n                    throw new Error(\"Discriminator property \".concat(String(discriminator), \" has duplicate value \").concat(String(value)));\n                }\n                optionsMap.set(value, type);\n            }\n        }\n        return new ZodDiscriminatedUnion({\n            typeName: ZodFirstPartyTypeKind.ZodDiscriminatedUnion,\n            discriminator,\n            options,\n            optionsMap,\n            ...processCreateParams(params)\n        });\n    }\n}\nfunction mergeValues(a, b) {\n    const aType = getParsedType(a);\n    const bType = getParsedType(b);\n    if (a === b) {\n        return {\n            valid: true,\n            data: a\n        };\n    } else if (aType === ZodParsedType.object && bType === ZodParsedType.object) {\n        const bKeys = util.objectKeys(b);\n        const sharedKeys = util.objectKeys(a).filter((key)=>bKeys.indexOf(key) !== -1);\n        const newObj = {\n            ...a,\n            ...b\n        };\n        for (const key of sharedKeys){\n            const sharedValue = mergeValues(a[key], b[key]);\n            if (!sharedValue.valid) {\n                return {\n                    valid: false\n                };\n            }\n            newObj[key] = sharedValue.data;\n        }\n        return {\n            valid: true,\n            data: newObj\n        };\n    } else if (aType === ZodParsedType.array && bType === ZodParsedType.array) {\n        if (a.length !== b.length) {\n            return {\n                valid: false\n            };\n        }\n        const newArray = [];\n        for(let index = 0; index < a.length; index++){\n            const itemA = a[index];\n            const itemB = b[index];\n            const sharedValue = mergeValues(itemA, itemB);\n            if (!sharedValue.valid) {\n                return {\n                    valid: false\n                };\n            }\n            newArray.push(sharedValue.data);\n        }\n        return {\n            valid: true,\n            data: newArray\n        };\n    } else if (aType === ZodParsedType.date && bType === ZodParsedType.date && +a === +b) {\n        return {\n            valid: true,\n            data: a\n        };\n    } else {\n        return {\n            valid: false\n        };\n    }\n}\nclass ZodIntersection extends ZodType {\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        const handleParsed = (parsedLeft, parsedRight)=>{\n            if (isAborted(parsedLeft) || isAborted(parsedRight)) {\n                return INVALID;\n            }\n            const merged = mergeValues(parsedLeft.value, parsedRight.value);\n            if (!merged.valid) {\n                addIssueToContext(ctx, {\n                    code: ZodIssueCode.invalid_intersection_types\n                });\n                return INVALID;\n            }\n            if (isDirty(parsedLeft) || isDirty(parsedRight)) {\n                status.dirty();\n            }\n            return {\n                status: status.value,\n                value: merged.data\n            };\n        };\n        if (ctx.common.async) {\n            return Promise.all([\n                this._def.left._parseAsync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx\n                }),\n                this._def.right._parseAsync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx\n                })\n            ]).then((param)=>{\n                let [left, right] = param;\n                return handleParsed(left, right);\n            });\n        } else {\n            return handleParsed(this._def.left._parseSync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx\n            }), this._def.right._parseSync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx\n            }));\n        }\n    }\n}\nZodIntersection.create = (left, right, params)=>{\n    return new ZodIntersection({\n        left: left,\n        right: right,\n        typeName: ZodFirstPartyTypeKind.ZodIntersection,\n        ...processCreateParams(params)\n    });\n};\nclass ZodTuple extends ZodType {\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.array) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.array,\n                received: ctx.parsedType\n            });\n            return INVALID;\n        }\n        if (ctx.data.length < this._def.items.length) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.too_small,\n                minimum: this._def.items.length,\n                inclusive: true,\n                exact: false,\n                type: \"array\"\n            });\n            return INVALID;\n        }\n        const rest = this._def.rest;\n        if (!rest && ctx.data.length > this._def.items.length) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.too_big,\n                maximum: this._def.items.length,\n                inclusive: true,\n                exact: false,\n                type: \"array\"\n            });\n            status.dirty();\n        }\n        const items = [\n            ...ctx.data\n        ].map((item, itemIndex)=>{\n            const schema = this._def.items[itemIndex] || this._def.rest;\n            if (!schema) return null;\n            return schema._parse(new ParseInputLazyPath(ctx, item, ctx.path, itemIndex));\n        }).filter((x)=>!!x); // filter nulls\n        if (ctx.common.async) {\n            return Promise.all(items).then((results)=>{\n                return ParseStatus.mergeArray(status, results);\n            });\n        } else {\n            return ParseStatus.mergeArray(status, items);\n        }\n    }\n    get items() {\n        return this._def.items;\n    }\n    rest(rest) {\n        return new ZodTuple({\n            ...this._def,\n            rest\n        });\n    }\n}\nZodTuple.create = (schemas, params)=>{\n    if (!Array.isArray(schemas)) {\n        throw new Error(\"You must pass an array of schemas to z.tuple([ ... ])\");\n    }\n    return new ZodTuple({\n        items: schemas,\n        typeName: ZodFirstPartyTypeKind.ZodTuple,\n        rest: null,\n        ...processCreateParams(params)\n    });\n};\nclass ZodRecord extends ZodType {\n    get keySchema() {\n        return this._def.keyType;\n    }\n    get valueSchema() {\n        return this._def.valueType;\n    }\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.object) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.object,\n                received: ctx.parsedType\n            });\n            return INVALID;\n        }\n        const pairs = [];\n        const keyType = this._def.keyType;\n        const valueType = this._def.valueType;\n        for(const key in ctx.data){\n            pairs.push({\n                key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, key)),\n                value: valueType._parse(new ParseInputLazyPath(ctx, ctx.data[key], ctx.path, key)),\n                alwaysSet: key in ctx.data\n            });\n        }\n        if (ctx.common.async) {\n            return ParseStatus.mergeObjectAsync(status, pairs);\n        } else {\n            return ParseStatus.mergeObjectSync(status, pairs);\n        }\n    }\n    get element() {\n        return this._def.valueType;\n    }\n    static create(first, second, third) {\n        if (second instanceof ZodType) {\n            return new ZodRecord({\n                keyType: first,\n                valueType: second,\n                typeName: ZodFirstPartyTypeKind.ZodRecord,\n                ...processCreateParams(third)\n            });\n        }\n        return new ZodRecord({\n            keyType: ZodString.create(),\n            valueType: first,\n            typeName: ZodFirstPartyTypeKind.ZodRecord,\n            ...processCreateParams(second)\n        });\n    }\n}\nclass ZodMap extends ZodType {\n    get keySchema() {\n        return this._def.keyType;\n    }\n    get valueSchema() {\n        return this._def.valueType;\n    }\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.map) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.map,\n                received: ctx.parsedType\n            });\n            return INVALID;\n        }\n        const keyType = this._def.keyType;\n        const valueType = this._def.valueType;\n        const pairs = [\n            ...ctx.data.entries()\n        ].map((param, index)=>{\n            let [key, value] = param;\n            return {\n                key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, [\n                    index,\n                    \"key\"\n                ])),\n                value: valueType._parse(new ParseInputLazyPath(ctx, value, ctx.path, [\n                    index,\n                    \"value\"\n                ]))\n            };\n        });\n        if (ctx.common.async) {\n            const finalMap = new Map();\n            return Promise.resolve().then(async ()=>{\n                for (const pair of pairs){\n                    const key = await pair.key;\n                    const value = await pair.value;\n                    if (key.status === \"aborted\" || value.status === \"aborted\") {\n                        return INVALID;\n                    }\n                    if (key.status === \"dirty\" || value.status === \"dirty\") {\n                        status.dirty();\n                    }\n                    finalMap.set(key.value, value.value);\n                }\n                return {\n                    status: status.value,\n                    value: finalMap\n                };\n            });\n        } else {\n            const finalMap = new Map();\n            for (const pair of pairs){\n                const key = pair.key;\n                const value = pair.value;\n                if (key.status === \"aborted\" || value.status === \"aborted\") {\n                    return INVALID;\n                }\n                if (key.status === \"dirty\" || value.status === \"dirty\") {\n                    status.dirty();\n                }\n                finalMap.set(key.value, value.value);\n            }\n            return {\n                status: status.value,\n                value: finalMap\n            };\n        }\n    }\n}\nZodMap.create = (keyType, valueType, params)=>{\n    return new ZodMap({\n        valueType,\n        keyType,\n        typeName: ZodFirstPartyTypeKind.ZodMap,\n        ...processCreateParams(params)\n    });\n};\nclass ZodSet extends ZodType {\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.set) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.set,\n                received: ctx.parsedType\n            });\n            return INVALID;\n        }\n        const def = this._def;\n        if (def.minSize !== null) {\n            if (ctx.data.size < def.minSize.value) {\n                addIssueToContext(ctx, {\n                    code: ZodIssueCode.too_small,\n                    minimum: def.minSize.value,\n                    type: \"set\",\n                    inclusive: true,\n                    exact: false,\n                    message: def.minSize.message\n                });\n                status.dirty();\n            }\n        }\n        if (def.maxSize !== null) {\n            if (ctx.data.size > def.maxSize.value) {\n                addIssueToContext(ctx, {\n                    code: ZodIssueCode.too_big,\n                    maximum: def.maxSize.value,\n                    type: \"set\",\n                    inclusive: true,\n                    exact: false,\n                    message: def.maxSize.message\n                });\n                status.dirty();\n            }\n        }\n        const valueType = this._def.valueType;\n        function finalizeSet(elements) {\n            const parsedSet = new Set();\n            for (const element of elements){\n                if (element.status === \"aborted\") return INVALID;\n                if (element.status === \"dirty\") status.dirty();\n                parsedSet.add(element.value);\n            }\n            return {\n                status: status.value,\n                value: parsedSet\n            };\n        }\n        const elements = [\n            ...ctx.data.values()\n        ].map((item, i)=>valueType._parse(new ParseInputLazyPath(ctx, item, ctx.path, i)));\n        if (ctx.common.async) {\n            return Promise.all(elements).then((elements)=>finalizeSet(elements));\n        } else {\n            return finalizeSet(elements);\n        }\n    }\n    min(minSize, message) {\n        return new ZodSet({\n            ...this._def,\n            minSize: {\n                value: minSize,\n                message: errorUtil.toString(message)\n            }\n        });\n    }\n    max(maxSize, message) {\n        return new ZodSet({\n            ...this._def,\n            maxSize: {\n                value: maxSize,\n                message: errorUtil.toString(message)\n            }\n        });\n    }\n    size(size, message) {\n        return this.min(size, message).max(size, message);\n    }\n    nonempty(message) {\n        return this.min(1, message);\n    }\n}\nZodSet.create = (valueType, params)=>{\n    return new ZodSet({\n        valueType,\n        minSize: null,\n        maxSize: null,\n        typeName: ZodFirstPartyTypeKind.ZodSet,\n        ...processCreateParams(params)\n    });\n};\nclass ZodFunction extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.function) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.function,\n                received: ctx.parsedType\n            });\n            return INVALID;\n        }\n        function makeArgsIssue(args, error) {\n            return makeIssue({\n                data: args,\n                path: ctx.path,\n                errorMaps: [\n                    ctx.common.contextualErrorMap,\n                    ctx.schemaErrorMap,\n                    getErrorMap(),\n                    errorMap\n                ].filter((x)=>!!x),\n                issueData: {\n                    code: ZodIssueCode.invalid_arguments,\n                    argumentsError: error\n                }\n            });\n        }\n        function makeReturnsIssue(returns, error) {\n            return makeIssue({\n                data: returns,\n                path: ctx.path,\n                errorMaps: [\n                    ctx.common.contextualErrorMap,\n                    ctx.schemaErrorMap,\n                    getErrorMap(),\n                    errorMap\n                ].filter((x)=>!!x),\n                issueData: {\n                    code: ZodIssueCode.invalid_return_type,\n                    returnTypeError: error\n                }\n            });\n        }\n        const params = {\n            errorMap: ctx.common.contextualErrorMap\n        };\n        const fn = ctx.data;\n        if (this._def.returns instanceof ZodPromise) {\n            // Would love a way to avoid disabling this rule, but we need\n            // an alias (using an arrow function was what caused 2651).\n            // eslint-disable-next-line @typescript-eslint/no-this-alias\n            const me = this;\n            return OK(async function() {\n                for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n                    args[_key] = arguments[_key];\n                }\n                const error = new ZodError([]);\n                const parsedArgs = await me._def.args.parseAsync(args, params).catch((e)=>{\n                    error.addIssue(makeArgsIssue(args, e));\n                    throw error;\n                });\n                const result = await Reflect.apply(fn, this, parsedArgs);\n                const parsedReturns = await me._def.returns._def.type.parseAsync(result, params).catch((e)=>{\n                    error.addIssue(makeReturnsIssue(result, e));\n                    throw error;\n                });\n                return parsedReturns;\n            });\n        } else {\n            // Would love a way to avoid disabling this rule, but we need\n            // an alias (using an arrow function was what caused 2651).\n            // eslint-disable-next-line @typescript-eslint/no-this-alias\n            const me = this;\n            return OK(function() {\n                for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n                    args[_key] = arguments[_key];\n                }\n                const parsedArgs = me._def.args.safeParse(args, params);\n                if (!parsedArgs.success) {\n                    throw new ZodError([\n                        makeArgsIssue(args, parsedArgs.error)\n                    ]);\n                }\n                const result = Reflect.apply(fn, this, parsedArgs.data);\n                const parsedReturns = me._def.returns.safeParse(result, params);\n                if (!parsedReturns.success) {\n                    throw new ZodError([\n                        makeReturnsIssue(result, parsedReturns.error)\n                    ]);\n                }\n                return parsedReturns.data;\n            });\n        }\n    }\n    parameters() {\n        return this._def.args;\n    }\n    returnType() {\n        return this._def.returns;\n    }\n    args() {\n        for(var _len = arguments.length, items = new Array(_len), _key = 0; _key < _len; _key++){\n            items[_key] = arguments[_key];\n        }\n        return new ZodFunction({\n            ...this._def,\n            args: ZodTuple.create(items).rest(ZodUnknown.create())\n        });\n    }\n    returns(returnType) {\n        return new ZodFunction({\n            ...this._def,\n            returns: returnType\n        });\n    }\n    implement(func) {\n        const validatedFunc = this.parse(func);\n        return validatedFunc;\n    }\n    strictImplement(func) {\n        const validatedFunc = this.parse(func);\n        return validatedFunc;\n    }\n    static create(args, returns, params) {\n        return new ZodFunction({\n            args: args ? args : ZodTuple.create([]).rest(ZodUnknown.create()),\n            returns: returns || ZodUnknown.create(),\n            typeName: ZodFirstPartyTypeKind.ZodFunction,\n            ...processCreateParams(params)\n        });\n    }\n    constructor(){\n        super(...arguments);\n        this.validate = this.implement;\n    }\n}\nclass ZodLazy extends ZodType {\n    get schema() {\n        return this._def.getter();\n    }\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        const lazySchema = this._def.getter();\n        return lazySchema._parse({\n            data: ctx.data,\n            path: ctx.path,\n            parent: ctx\n        });\n    }\n}\nZodLazy.create = (getter, params)=>{\n    return new ZodLazy({\n        getter: getter,\n        typeName: ZodFirstPartyTypeKind.ZodLazy,\n        ...processCreateParams(params)\n    });\n};\nclass ZodLiteral extends ZodType {\n    _parse(input) {\n        if (input.data !== this._def.value) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                received: ctx.data,\n                code: ZodIssueCode.invalid_literal,\n                expected: this._def.value\n            });\n            return INVALID;\n        }\n        return {\n            status: \"valid\",\n            value: input.data\n        };\n    }\n    get value() {\n        return this._def.value;\n    }\n}\nZodLiteral.create = (value, params)=>{\n    return new ZodLiteral({\n        value: value,\n        typeName: ZodFirstPartyTypeKind.ZodLiteral,\n        ...processCreateParams(params)\n    });\n};\nfunction createZodEnum(values, params) {\n    return new ZodEnum({\n        values,\n        typeName: ZodFirstPartyTypeKind.ZodEnum,\n        ...processCreateParams(params)\n    });\n}\nclass ZodEnum extends ZodType {\n    _parse(input) {\n        if (typeof input.data !== \"string\") {\n            const ctx = this._getOrReturnCtx(input);\n            const expectedValues = this._def.values;\n            addIssueToContext(ctx, {\n                expected: util.joinValues(expectedValues),\n                received: ctx.parsedType,\n                code: ZodIssueCode.invalid_type\n            });\n            return INVALID;\n        }\n        if (!__classPrivateFieldGet(this, _ZodEnum_cache, \"f\")) {\n            __classPrivateFieldSet(this, _ZodEnum_cache, new Set(this._def.values), \"f\");\n        }\n        if (!__classPrivateFieldGet(this, _ZodEnum_cache, \"f\").has(input.data)) {\n            const ctx = this._getOrReturnCtx(input);\n            const expectedValues = this._def.values;\n            addIssueToContext(ctx, {\n                received: ctx.data,\n                code: ZodIssueCode.invalid_enum_value,\n                options: expectedValues\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n    get options() {\n        return this._def.values;\n    }\n    get enum() {\n        const enumValues = {};\n        for (const val of this._def.values){\n            enumValues[val] = val;\n        }\n        return enumValues;\n    }\n    get Values() {\n        const enumValues = {};\n        for (const val of this._def.values){\n            enumValues[val] = val;\n        }\n        return enumValues;\n    }\n    get Enum() {\n        const enumValues = {};\n        for (const val of this._def.values){\n            enumValues[val] = val;\n        }\n        return enumValues;\n    }\n    extract(values) {\n        let newDef = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : this._def;\n        return ZodEnum.create(values, {\n            ...this._def,\n            ...newDef\n        });\n    }\n    exclude(values) {\n        let newDef = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : this._def;\n        return ZodEnum.create(this.options.filter((opt)=>!values.includes(opt)), {\n            ...this._def,\n            ...newDef\n        });\n    }\n    constructor(){\n        super(...arguments);\n        _ZodEnum_cache.set(this, void 0);\n    }\n}\n_ZodEnum_cache = new WeakMap();\nZodEnum.create = createZodEnum;\nclass ZodNativeEnum extends ZodType {\n    _parse(input) {\n        const nativeEnumValues = util.getValidEnumValues(this._def.values);\n        const ctx = this._getOrReturnCtx(input);\n        if (ctx.parsedType !== ZodParsedType.string && ctx.parsedType !== ZodParsedType.number) {\n            const expectedValues = util.objectValues(nativeEnumValues);\n            addIssueToContext(ctx, {\n                expected: util.joinValues(expectedValues),\n                received: ctx.parsedType,\n                code: ZodIssueCode.invalid_type\n            });\n            return INVALID;\n        }\n        if (!__classPrivateFieldGet(this, _ZodNativeEnum_cache, \"f\")) {\n            __classPrivateFieldSet(this, _ZodNativeEnum_cache, new Set(util.getValidEnumValues(this._def.values)), \"f\");\n        }\n        if (!__classPrivateFieldGet(this, _ZodNativeEnum_cache, \"f\").has(input.data)) {\n            const expectedValues = util.objectValues(nativeEnumValues);\n            addIssueToContext(ctx, {\n                received: ctx.data,\n                code: ZodIssueCode.invalid_enum_value,\n                options: expectedValues\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n    get enum() {\n        return this._def.values;\n    }\n    constructor(){\n        super(...arguments);\n        _ZodNativeEnum_cache.set(this, void 0);\n    }\n}\n_ZodNativeEnum_cache = new WeakMap();\nZodNativeEnum.create = (values, params)=>{\n    return new ZodNativeEnum({\n        values: values,\n        typeName: ZodFirstPartyTypeKind.ZodNativeEnum,\n        ...processCreateParams(params)\n    });\n};\nclass ZodPromise extends ZodType {\n    unwrap() {\n        return this._def.type;\n    }\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.promise && ctx.common.async === false) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.promise,\n                received: ctx.parsedType\n            });\n            return INVALID;\n        }\n        const promisified = ctx.parsedType === ZodParsedType.promise ? ctx.data : Promise.resolve(ctx.data);\n        return OK(promisified.then((data)=>{\n            return this._def.type.parseAsync(data, {\n                path: ctx.path,\n                errorMap: ctx.common.contextualErrorMap\n            });\n        }));\n    }\n}\nZodPromise.create = (schema, params)=>{\n    return new ZodPromise({\n        type: schema,\n        typeName: ZodFirstPartyTypeKind.ZodPromise,\n        ...processCreateParams(params)\n    });\n};\nclass ZodEffects extends ZodType {\n    innerType() {\n        return this._def.schema;\n    }\n    sourceType() {\n        return this._def.schema._def.typeName === ZodFirstPartyTypeKind.ZodEffects ? this._def.schema.sourceType() : this._def.schema;\n    }\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        const effect = this._def.effect || null;\n        const checkCtx = {\n            addIssue: (arg)=>{\n                addIssueToContext(ctx, arg);\n                if (arg.fatal) {\n                    status.abort();\n                } else {\n                    status.dirty();\n                }\n            },\n            get path () {\n                return ctx.path;\n            }\n        };\n        checkCtx.addIssue = checkCtx.addIssue.bind(checkCtx);\n        if (effect.type === \"preprocess\") {\n            const processed = effect.transform(ctx.data, checkCtx);\n            if (ctx.common.async) {\n                return Promise.resolve(processed).then(async (processed)=>{\n                    if (status.value === \"aborted\") return INVALID;\n                    const result = await this._def.schema._parseAsync({\n                        data: processed,\n                        path: ctx.path,\n                        parent: ctx\n                    });\n                    if (result.status === \"aborted\") return INVALID;\n                    if (result.status === \"dirty\") return DIRTY(result.value);\n                    if (status.value === \"dirty\") return DIRTY(result.value);\n                    return result;\n                });\n            } else {\n                if (status.value === \"aborted\") return INVALID;\n                const result = this._def.schema._parseSync({\n                    data: processed,\n                    path: ctx.path,\n                    parent: ctx\n                });\n                if (result.status === \"aborted\") return INVALID;\n                if (result.status === \"dirty\") return DIRTY(result.value);\n                if (status.value === \"dirty\") return DIRTY(result.value);\n                return result;\n            }\n        }\n        if (effect.type === \"refinement\") {\n            const executeRefinement = (acc)=>{\n                const result = effect.refinement(acc, checkCtx);\n                if (ctx.common.async) {\n                    return Promise.resolve(result);\n                }\n                if (result instanceof Promise) {\n                    throw new Error(\"Async refinement encountered during synchronous parse operation. Use .parseAsync instead.\");\n                }\n                return acc;\n            };\n            if (ctx.common.async === false) {\n                const inner = this._def.schema._parseSync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx\n                });\n                if (inner.status === \"aborted\") return INVALID;\n                if (inner.status === \"dirty\") status.dirty();\n                // return value is ignored\n                executeRefinement(inner.value);\n                return {\n                    status: status.value,\n                    value: inner.value\n                };\n            } else {\n                return this._def.schema._parseAsync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx\n                }).then((inner)=>{\n                    if (inner.status === \"aborted\") return INVALID;\n                    if (inner.status === \"dirty\") status.dirty();\n                    return executeRefinement(inner.value).then(()=>{\n                        return {\n                            status: status.value,\n                            value: inner.value\n                        };\n                    });\n                });\n            }\n        }\n        if (effect.type === \"transform\") {\n            if (ctx.common.async === false) {\n                const base = this._def.schema._parseSync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx\n                });\n                if (!isValid(base)) return base;\n                const result = effect.transform(base.value, checkCtx);\n                if (result instanceof Promise) {\n                    throw new Error(\"Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.\");\n                }\n                return {\n                    status: status.value,\n                    value: result\n                };\n            } else {\n                return this._def.schema._parseAsync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx\n                }).then((base)=>{\n                    if (!isValid(base)) return base;\n                    return Promise.resolve(effect.transform(base.value, checkCtx)).then((result)=>({\n                            status: status.value,\n                            value: result\n                        }));\n                });\n            }\n        }\n        util.assertNever(effect);\n    }\n}\nZodEffects.create = (schema, effect, params)=>{\n    return new ZodEffects({\n        schema,\n        typeName: ZodFirstPartyTypeKind.ZodEffects,\n        effect,\n        ...processCreateParams(params)\n    });\n};\nZodEffects.createWithPreprocess = (preprocess, schema, params)=>{\n    return new ZodEffects({\n        schema,\n        effect: {\n            type: \"preprocess\",\n            transform: preprocess\n        },\n        typeName: ZodFirstPartyTypeKind.ZodEffects,\n        ...processCreateParams(params)\n    });\n};\nclass ZodOptional extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType === ZodParsedType.undefined) {\n            return OK(undefined);\n        }\n        return this._def.innerType._parse(input);\n    }\n    unwrap() {\n        return this._def.innerType;\n    }\n}\nZodOptional.create = (type, params)=>{\n    return new ZodOptional({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodOptional,\n        ...processCreateParams(params)\n    });\n};\nclass ZodNullable extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType === ZodParsedType.null) {\n            return OK(null);\n        }\n        return this._def.innerType._parse(input);\n    }\n    unwrap() {\n        return this._def.innerType;\n    }\n}\nZodNullable.create = (type, params)=>{\n    return new ZodNullable({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodNullable,\n        ...processCreateParams(params)\n    });\n};\nclass ZodDefault extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        let data = ctx.data;\n        if (ctx.parsedType === ZodParsedType.undefined) {\n            data = this._def.defaultValue();\n        }\n        return this._def.innerType._parse({\n            data,\n            path: ctx.path,\n            parent: ctx\n        });\n    }\n    removeDefault() {\n        return this._def.innerType;\n    }\n}\nZodDefault.create = (type, params)=>{\n    return new ZodDefault({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodDefault,\n        defaultValue: typeof params.default === \"function\" ? params.default : ()=>params.default,\n        ...processCreateParams(params)\n    });\n};\nclass ZodCatch extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        // newCtx is used to not collect issues from inner types in ctx\n        const newCtx = {\n            ...ctx,\n            common: {\n                ...ctx.common,\n                issues: []\n            }\n        };\n        const result = this._def.innerType._parse({\n            data: newCtx.data,\n            path: newCtx.path,\n            parent: {\n                ...newCtx\n            }\n        });\n        if (isAsync(result)) {\n            return result.then((result)=>{\n                return {\n                    status: \"valid\",\n                    value: result.status === \"valid\" ? result.value : this._def.catchValue({\n                        get error () {\n                            return new ZodError(newCtx.common.issues);\n                        },\n                        input: newCtx.data\n                    })\n                };\n            });\n        } else {\n            return {\n                status: \"valid\",\n                value: result.status === \"valid\" ? result.value : this._def.catchValue({\n                    get error () {\n                        return new ZodError(newCtx.common.issues);\n                    },\n                    input: newCtx.data\n                })\n            };\n        }\n    }\n    removeCatch() {\n        return this._def.innerType;\n    }\n}\nZodCatch.create = (type, params)=>{\n    return new ZodCatch({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodCatch,\n        catchValue: typeof params.catch === \"function\" ? params.catch : ()=>params.catch,\n        ...processCreateParams(params)\n    });\n};\nclass ZodNaN extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.nan) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.nan,\n                received: ctx.parsedType\n            });\n            return INVALID;\n        }\n        return {\n            status: \"valid\",\n            value: input.data\n        };\n    }\n}\nZodNaN.create = (params)=>{\n    return new ZodNaN({\n        typeName: ZodFirstPartyTypeKind.ZodNaN,\n        ...processCreateParams(params)\n    });\n};\nconst BRAND = Symbol(\"zod_brand\");\nclass ZodBranded extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        const data = ctx.data;\n        return this._def.type._parse({\n            data,\n            path: ctx.path,\n            parent: ctx\n        });\n    }\n    unwrap() {\n        return this._def.type;\n    }\n}\nclass ZodPipeline extends ZodType {\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.common.async) {\n            const handleAsync = async ()=>{\n                const inResult = await this._def.in._parseAsync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx\n                });\n                if (inResult.status === \"aborted\") return INVALID;\n                if (inResult.status === \"dirty\") {\n                    status.dirty();\n                    return DIRTY(inResult.value);\n                } else {\n                    return this._def.out._parseAsync({\n                        data: inResult.value,\n                        path: ctx.path,\n                        parent: ctx\n                    });\n                }\n            };\n            return handleAsync();\n        } else {\n            const inResult = this._def.in._parseSync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx\n            });\n            if (inResult.status === \"aborted\") return INVALID;\n            if (inResult.status === \"dirty\") {\n                status.dirty();\n                return {\n                    status: \"dirty\",\n                    value: inResult.value\n                };\n            } else {\n                return this._def.out._parseSync({\n                    data: inResult.value,\n                    path: ctx.path,\n                    parent: ctx\n                });\n            }\n        }\n    }\n    static create(a, b) {\n        return new ZodPipeline({\n            in: a,\n            out: b,\n            typeName: ZodFirstPartyTypeKind.ZodPipeline\n        });\n    }\n}\nclass ZodReadonly extends ZodType {\n    _parse(input) {\n        const result = this._def.innerType._parse(input);\n        const freeze = (data)=>{\n            if (isValid(data)) {\n                data.value = Object.freeze(data.value);\n            }\n            return data;\n        };\n        return isAsync(result) ? result.then((data)=>freeze(data)) : freeze(result);\n    }\n    unwrap() {\n        return this._def.innerType;\n    }\n}\nZodReadonly.create = (type, params)=>{\n    return new ZodReadonly({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodReadonly,\n        ...processCreateParams(params)\n    });\n};\nfunction custom(check) {\n    let params = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, /**\n * @deprecated\n *\n * Pass `fatal` into the params object instead:\n *\n * ```ts\n * z.string().custom((val) => val.length > 5, { fatal: false })\n * ```\n *\n */ fatal = arguments.length > 2 ? arguments[2] : void 0;\n    if (check) return ZodAny.create().superRefine((data, ctx)=>{\n        var _a, _b;\n        if (!check(data)) {\n            const p = typeof params === \"function\" ? params(data) : typeof params === \"string\" ? {\n                message: params\n            } : params;\n            const _fatal = (_b = (_a = p.fatal) !== null && _a !== void 0 ? _a : fatal) !== null && _b !== void 0 ? _b : true;\n            const p2 = typeof p === \"string\" ? {\n                message: p\n            } : p;\n            ctx.addIssue({\n                code: \"custom\",\n                ...p2,\n                fatal: _fatal\n            });\n        }\n    });\n    return ZodAny.create();\n}\nconst late = {\n    object: ZodObject.lazycreate\n};\nvar ZodFirstPartyTypeKind;\n(function(ZodFirstPartyTypeKind) {\n    ZodFirstPartyTypeKind[\"ZodString\"] = \"ZodString\";\n    ZodFirstPartyTypeKind[\"ZodNumber\"] = \"ZodNumber\";\n    ZodFirstPartyTypeKind[\"ZodNaN\"] = \"ZodNaN\";\n    ZodFirstPartyTypeKind[\"ZodBigInt\"] = \"ZodBigInt\";\n    ZodFirstPartyTypeKind[\"ZodBoolean\"] = \"ZodBoolean\";\n    ZodFirstPartyTypeKind[\"ZodDate\"] = \"ZodDate\";\n    ZodFirstPartyTypeKind[\"ZodSymbol\"] = \"ZodSymbol\";\n    ZodFirstPartyTypeKind[\"ZodUndefined\"] = \"ZodUndefined\";\n    ZodFirstPartyTypeKind[\"ZodNull\"] = \"ZodNull\";\n    ZodFirstPartyTypeKind[\"ZodAny\"] = \"ZodAny\";\n    ZodFirstPartyTypeKind[\"ZodUnknown\"] = \"ZodUnknown\";\n    ZodFirstPartyTypeKind[\"ZodNever\"] = \"ZodNever\";\n    ZodFirstPartyTypeKind[\"ZodVoid\"] = \"ZodVoid\";\n    ZodFirstPartyTypeKind[\"ZodArray\"] = \"ZodArray\";\n    ZodFirstPartyTypeKind[\"ZodObject\"] = \"ZodObject\";\n    ZodFirstPartyTypeKind[\"ZodUnion\"] = \"ZodUnion\";\n    ZodFirstPartyTypeKind[\"ZodDiscriminatedUnion\"] = \"ZodDiscriminatedUnion\";\n    ZodFirstPartyTypeKind[\"ZodIntersection\"] = \"ZodIntersection\";\n    ZodFirstPartyTypeKind[\"ZodTuple\"] = \"ZodTuple\";\n    ZodFirstPartyTypeKind[\"ZodRecord\"] = \"ZodRecord\";\n    ZodFirstPartyTypeKind[\"ZodMap\"] = \"ZodMap\";\n    ZodFirstPartyTypeKind[\"ZodSet\"] = \"ZodSet\";\n    ZodFirstPartyTypeKind[\"ZodFunction\"] = \"ZodFunction\";\n    ZodFirstPartyTypeKind[\"ZodLazy\"] = \"ZodLazy\";\n    ZodFirstPartyTypeKind[\"ZodLiteral\"] = \"ZodLiteral\";\n    ZodFirstPartyTypeKind[\"ZodEnum\"] = \"ZodEnum\";\n    ZodFirstPartyTypeKind[\"ZodEffects\"] = \"ZodEffects\";\n    ZodFirstPartyTypeKind[\"ZodNativeEnum\"] = \"ZodNativeEnum\";\n    ZodFirstPartyTypeKind[\"ZodOptional\"] = \"ZodOptional\";\n    ZodFirstPartyTypeKind[\"ZodNullable\"] = \"ZodNullable\";\n    ZodFirstPartyTypeKind[\"ZodDefault\"] = \"ZodDefault\";\n    ZodFirstPartyTypeKind[\"ZodCatch\"] = \"ZodCatch\";\n    ZodFirstPartyTypeKind[\"ZodPromise\"] = \"ZodPromise\";\n    ZodFirstPartyTypeKind[\"ZodBranded\"] = \"ZodBranded\";\n    ZodFirstPartyTypeKind[\"ZodPipeline\"] = \"ZodPipeline\";\n    ZodFirstPartyTypeKind[\"ZodReadonly\"] = \"ZodReadonly\";\n})(ZodFirstPartyTypeKind || (ZodFirstPartyTypeKind = {}));\nconst instanceOfType = function(// const instanceOfType = <T extends new (...args: any[]) => any>(\ncls) {\n    let params = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {\n        message: \"Input not instance of \".concat(cls.name)\n    };\n    return custom((data)=>data instanceof cls, params);\n};\nconst stringType = ZodString.create;\nconst numberType = ZodNumber.create;\nconst nanType = ZodNaN.create;\nconst bigIntType = ZodBigInt.create;\nconst booleanType = ZodBoolean.create;\nconst dateType = ZodDate.create;\nconst symbolType = ZodSymbol.create;\nconst undefinedType = ZodUndefined.create;\nconst nullType = ZodNull.create;\nconst anyType = ZodAny.create;\nconst unknownType = ZodUnknown.create;\nconst neverType = ZodNever.create;\nconst voidType = ZodVoid.create;\nconst arrayType = ZodArray.create;\nconst objectType = ZodObject.create;\nconst strictObjectType = ZodObject.strictCreate;\nconst unionType = ZodUnion.create;\nconst discriminatedUnionType = ZodDiscriminatedUnion.create;\nconst intersectionType = ZodIntersection.create;\nconst tupleType = ZodTuple.create;\nconst recordType = ZodRecord.create;\nconst mapType = ZodMap.create;\nconst setType = ZodSet.create;\nconst functionType = ZodFunction.create;\nconst lazyType = ZodLazy.create;\nconst literalType = ZodLiteral.create;\nconst enumType = ZodEnum.create;\nconst nativeEnumType = ZodNativeEnum.create;\nconst promiseType = ZodPromise.create;\nconst effectsType = ZodEffects.create;\nconst optionalType = ZodOptional.create;\nconst nullableType = ZodNullable.create;\nconst preprocessType = ZodEffects.createWithPreprocess;\nconst pipelineType = ZodPipeline.create;\nconst ostring = ()=>stringType().optional();\nconst onumber = ()=>numberType().optional();\nconst oboolean = ()=>booleanType().optional();\nconst coerce = {\n    string: (arg)=>ZodString.create({\n            ...arg,\n            coerce: true\n        }),\n    number: (arg)=>ZodNumber.create({\n            ...arg,\n            coerce: true\n        }),\n    boolean: (arg)=>ZodBoolean.create({\n            ...arg,\n            coerce: true\n        }),\n    bigint: (arg)=>ZodBigInt.create({\n            ...arg,\n            coerce: true\n        }),\n    date: (arg)=>ZodDate.create({\n            ...arg,\n            coerce: true\n        })\n};\nconst NEVER = INVALID;\nvar z = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    defaultErrorMap: errorMap,\n    setErrorMap: setErrorMap,\n    getErrorMap: getErrorMap,\n    makeIssue: makeIssue,\n    EMPTY_PATH: EMPTY_PATH,\n    addIssueToContext: addIssueToContext,\n    ParseStatus: ParseStatus,\n    INVALID: INVALID,\n    DIRTY: DIRTY,\n    OK: OK,\n    isAborted: isAborted,\n    isDirty: isDirty,\n    isValid: isValid,\n    isAsync: isAsync,\n    get util () {\n        return util;\n    },\n    get objectUtil () {\n        return objectUtil;\n    },\n    ZodParsedType: ZodParsedType,\n    getParsedType: getParsedType,\n    ZodType: ZodType,\n    datetimeRegex: datetimeRegex,\n    ZodString: ZodString,\n    ZodNumber: ZodNumber,\n    ZodBigInt: ZodBigInt,\n    ZodBoolean: ZodBoolean,\n    ZodDate: ZodDate,\n    ZodSymbol: ZodSymbol,\n    ZodUndefined: ZodUndefined,\n    ZodNull: ZodNull,\n    ZodAny: ZodAny,\n    ZodUnknown: ZodUnknown,\n    ZodNever: ZodNever,\n    ZodVoid: ZodVoid,\n    ZodArray: ZodArray,\n    ZodObject: ZodObject,\n    ZodUnion: ZodUnion,\n    ZodDiscriminatedUnion: ZodDiscriminatedUnion,\n    ZodIntersection: ZodIntersection,\n    ZodTuple: ZodTuple,\n    ZodRecord: ZodRecord,\n    ZodMap: ZodMap,\n    ZodSet: ZodSet,\n    ZodFunction: ZodFunction,\n    ZodLazy: ZodLazy,\n    ZodLiteral: ZodLiteral,\n    ZodEnum: ZodEnum,\n    ZodNativeEnum: ZodNativeEnum,\n    ZodPromise: ZodPromise,\n    ZodEffects: ZodEffects,\n    ZodTransformer: ZodEffects,\n    ZodOptional: ZodOptional,\n    ZodNullable: ZodNullable,\n    ZodDefault: ZodDefault,\n    ZodCatch: ZodCatch,\n    ZodNaN: ZodNaN,\n    BRAND: BRAND,\n    ZodBranded: ZodBranded,\n    ZodPipeline: ZodPipeline,\n    ZodReadonly: ZodReadonly,\n    custom: custom,\n    Schema: ZodType,\n    ZodSchema: ZodType,\n    late: late,\n    get ZodFirstPartyTypeKind () {\n        return ZodFirstPartyTypeKind;\n    },\n    coerce: coerce,\n    any: anyType,\n    array: arrayType,\n    bigint: bigIntType,\n    boolean: booleanType,\n    date: dateType,\n    discriminatedUnion: discriminatedUnionType,\n    effect: effectsType,\n    \"enum\": enumType,\n    \"function\": functionType,\n    \"instanceof\": instanceOfType,\n    intersection: intersectionType,\n    lazy: lazyType,\n    literal: literalType,\n    map: mapType,\n    nan: nanType,\n    nativeEnum: nativeEnumType,\n    never: neverType,\n    \"null\": nullType,\n    nullable: nullableType,\n    number: numberType,\n    object: objectType,\n    oboolean: oboolean,\n    onumber: onumber,\n    optional: optionalType,\n    ostring: ostring,\n    pipeline: pipelineType,\n    preprocess: preprocessType,\n    promise: promiseType,\n    record: recordType,\n    set: setType,\n    strictObject: strictObjectType,\n    string: stringType,\n    symbol: symbolType,\n    transformer: effectsType,\n    tuple: tupleType,\n    \"undefined\": undefinedType,\n    union: unionType,\n    unknown: unknownType,\n    \"void\": voidType,\n    NEVER: NEVER,\n    ZodIssueCode: ZodIssueCode,\n    quotelessJson: quotelessJson,\n    ZodError: ZodError\n});\n\nvar _c, _c1;\n$RefreshReg$(_c, \"DIRTY\");\n$RefreshReg$(_c1, \"OK\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/zod/lib/index.mjs\n"));

/***/ })

},
/******/ function(__webpack_require__) { // webpackRuntimeModules
/******/ var __webpack_exec__ = function(moduleId) { return __webpack_require__(__webpack_require__.s = moduleId); }
/******/ __webpack_require__.O(0, ["main-app"], function() { return __webpack_exec__("(app-pages-browser)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%2Fhome%2Fsourabh7iwari%2FLocal_development%2Faa%2Fui%2Fnode_modules%2F%40copilotkit%2Freact-core%2Fdist%2Findex.mjs&modules=%2Fhome%2Fsourabh7iwari%2FLocal_development%2Faa%2Fui%2Fnode_modules%2Fnext%2Ffont%2Fgoogle%2Ftarget.css%3F%7B%22path%22%3A%22app%2Flayout.tsx%22%2C%22import%22%3A%22Inter%22%2C%22arguments%22%3A%5B%7B%22subsets%22%3A%5B%22latin%22%5D%7D%5D%2C%22variableName%22%3A%22inter%22%7D&modules=%2Fhome%2Fsourabh7iwari%2FLocal_development%2Faa%2Fui%2Fapp%2Fglobals.css&server=false!"); });
/******/ var __webpack_exports__ = __webpack_require__.O();
/******/ _N_E = __webpack_exports__;
/******/ }
]);